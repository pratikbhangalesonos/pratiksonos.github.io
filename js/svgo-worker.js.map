{"version":3,"file":"svgo-worker.js","sources":["../../node_modules/rollup-plugin-node-builtins/src/es6/events.js","../../node_modules/process-es6/browser.js","../../node_modules/rollup-plugin-node-builtins/src/es6/util.js","../../node_modules/buffer-es6/base64.js","../../node_modules/buffer-es6/ieee754.js","../../node_modules/buffer-es6/index.js","../../node_modules/rollup-plugin-node-builtins/src/es6/readable-stream/buffer-list.js","../../node_modules/rollup-plugin-node-builtins/src/es6/string-decoder.js","../../node_modules/rollup-plugin-node-builtins/src/es6/readable-stream/readable.js","../../node_modules/rollup-plugin-node-builtins/src/es6/readable-stream/writable.js","../../node_modules/rollup-plugin-node-builtins/src/es6/readable-stream/duplex.js","../../node_modules/rollup-plugin-node-builtins/src/es6/readable-stream/transform.js","../../node_modules/rollup-plugin-node-builtins/src/es6/readable-stream/passthrough.js","../../node_modules/rollup-plugin-node-builtins/src/es6/stream.js","../../../svgo/node_modules/entities/lib/encode.js","../../../svgo/node_modules/entities/lib/decode.js","../../../svgo/node_modules/domutils/lib/stringify.js","../../../svgo/node_modules/domutils/lib/querying.js","../../../svgo/node_modules/css-what/index.js","../../../svgo/node_modules/css-select/lib/sort.js","../../../svgo/node_modules/css-select/lib/pseudos.js","../../../svgo/node_modules/css-select/lib/compile.js","../../../svgo/node_modules/css-select/index.js","../../../svgo/node_modules/css-select-base-adapter/index.js","../../../svgo/node_modules/css-tree/lib/utils/list.js","../../../svgo/node_modules/css-tree/lib/tokenizer/error.js","../../../svgo/node_modules/css-tree/lib/tokenizer/utils.js","../../../svgo/node_modules/css-tree/lib/tokenizer/Tokenizer.js","../../../svgo/node_modules/css-tree/lib/lexer/grammar/generate.js","../../../svgo/node_modules/css-tree/lib/lexer/error.js","../../../svgo/node_modules/css-tree/lib/utils/names.js","../../../svgo/node_modules/css-tree/lib/lexer/generic.js","../../../svgo/node_modules/css-tree/lib/lexer/grammar/parse.js","../../../svgo/node_modules/css-tree/lib/lexer/grammar/walk.js","../../../svgo/node_modules/css-tree/lib/lexer/match.js","../../../svgo/node_modules/css-tree/lib/lexer/trace.js","../../../svgo/node_modules/css-tree/lib/lexer/search.js","../../../svgo/node_modules/css-tree/lib/lexer/structure.js","../../../svgo/node_modules/css-tree/lib/lexer/Lexer.js","../../../svgo/node_modules/css-tree/lib/parser/create.js","../../../svgo/node_modules/source-map/lib/base64-vlq.js","../../../svgo/node_modules/source-map/lib/array-set.js","../../../svgo/node_modules/source-map/lib/mapping-list.js","../../../svgo/node_modules/source-map/lib/source-map-generator.js","../../../svgo/node_modules/source-map/lib/quick-sort.js","../../../svgo/node_modules/source-map/lib/source-map-consumer.js","../../../svgo/node_modules/source-map/lib/source-node.js","../../../svgo/node_modules/css-tree/lib/generator/create.js","../../../svgo/node_modules/css-tree/lib/walker/create.js","../../../svgo/node_modules/css-tree/lib/syntax/config/mix.js","../../../svgo/node_modules/css-tree/lib/syntax/create.js","../../../svgo/node_modules/css-tree/data/index.js","../../../svgo/node_modules/css-tree/lib/syntax/node/AnPlusB.js","../../../svgo/node_modules/css-tree/lib/syntax/node/Atrule.js","../../../svgo/node_modules/css-tree/lib/syntax/node/AttributeSelector.js","../../../svgo/node_modules/css-tree/lib/syntax/node/Block.js","../../../svgo/node_modules/css-tree/lib/syntax/node/Declaration.js","../../../svgo/node_modules/css-tree/lib/syntax/node/DeclarationList.js","../../../svgo/node_modules/css-tree/lib/syntax/node/Dimension.js","../../../svgo/node_modules/css-tree/lib/syntax/node/HexColor.js","../../../svgo/node_modules/css-tree/lib/syntax/node/Ratio.js","../../../svgo/node_modules/css-tree/lib/syntax/node/Rule.js","../../../svgo/node_modules/css-tree/lib/syntax/node/StyleSheet.js","../../../svgo/node_modules/css-tree/lib/syntax/node/TypeSelector.js","../../../svgo/node_modules/css-tree/lib/syntax/node/UnicodeRange.js","../../../svgo/node_modules/css-tree/lib/syntax/atrule/supports.js","../../../svgo/lib/css-tools.js","../../node_modules/rollup-plugin-node-builtins/src/es6/os.js","../../../svgo/lib/svgo/js2svg.js","../../../svgo/lib/svgo/plugins.js","../../../svgo/plugins/cleanupIDs.js","../../src/js/svgo-worker/index.js","../../../svgo/node_modules/es-abstract/helpers/isNaN.js","../../../svgo/node_modules/sax/lib/sax.js","../../src/js/utils/node-globals/global.js","../../node_modules/rollup-plugin-node-builtins/src/es6/inherits.js","../../node_modules/buffer-es6/isArray.js","../../../svgo/node_modules/domelementtype/index.js","../../../svgo/node_modules/dom-serializer/node_modules/domelementtype/index.js","../../../svgo/node_modules/entities/lib/decode_codepoint.js","../../../svgo/node_modules/entities/index.js","../../../svgo/node_modules/dom-serializer/index.js","../../../svgo/node_modules/domutils/lib/traversal.js","../../../svgo/node_modules/domutils/lib/manipulation.js","../../../svgo/node_modules/domutils/lib/legacy.js","../../../svgo/node_modules/domutils/lib/helpers.js","../../../svgo/node_modules/domutils/index.js","../../../svgo/node_modules/boolbase/index.js","../../../svgo/node_modules/css-select/lib/attributes.js","../../../svgo/node_modules/nth-check/parse.js","../../../svgo/node_modules/nth-check/compile.js","../../../svgo/node_modules/nth-check/index.js","../../../svgo/node_modules/css-select/lib/general.js","../../../svgo/lib/svgo/css-select-adapter.js","../../../svgo/lib/svgo/jsAPI.js","../../../svgo/node_modules/object-keys/isArguments.js","../../../svgo/node_modules/object-keys/index.js","../../../svgo/node_modules/define-properties/index.js","../../../svgo/node_modules/function-bind/implementation.js","../../../svgo/node_modules/function-bind/index.js","../../../svgo/node_modules/has/src/index.js","../../../svgo/node_modules/es-to-primitive/helpers/isPrimitive.js","../../../svgo/node_modules/is-callable/index.js","../../../svgo/node_modules/is-date-object/index.js","../../../svgo/node_modules/has-symbols/shams.js","../../../svgo/node_modules/has-symbols/index.js","../../../svgo/node_modules/is-symbol/index.js","../../../svgo/node_modules/es-to-primitive/es2015.js","../../../svgo/node_modules/es-to-primitive/es6.js","../../../svgo/node_modules/es-abstract/GetIntrinsic.js","../../../svgo/node_modules/es-abstract/helpers/isFinite.js","../../../svgo/node_modules/es-abstract/helpers/assign.js","../../../svgo/node_modules/es-abstract/helpers/sign.js","../../../svgo/node_modules/es-abstract/helpers/mod.js","../../../svgo/node_modules/es-abstract/helpers/isPrimitive.js","../../../svgo/node_modules/es-to-primitive/es5.js","../../../svgo/node_modules/es-abstract/es5.js","../../../svgo/node_modules/is-regex/index.js","../../../svgo/node_modules/es-abstract/es2015.js","../../../svgo/node_modules/es-abstract/es2016.js","../../../svgo/node_modules/object.values/implementation.js","../../../svgo/node_modules/object.values/polyfill.js","../../../svgo/node_modules/object.values/index.js","../../../svgo/node_modules/object.values/shim.js","../../../svgo/lib/svgo/css-class-list.js","../../../svgo/node_modules/css-tree/lib/utils/createCustomError.js","../../../svgo/node_modules/css-tree/lib/tokenizer/const.js","../../../svgo/node_modules/css-tree/lib/lexer/grammar/error.js","../../../svgo/node_modules/css-tree/lib/lexer/grammar/index.js","../../../svgo/node_modules/css-tree/lib/parser/sequence.js","../../../svgo/node_modules/source-map/lib/base64.js","../../../svgo/node_modules/source-map/lib/util.js","../../../svgo/node_modules/source-map/lib/binary-search.js","../../../svgo/node_modules/source-map/source-map.js","../../../svgo/node_modules/css-tree/lib/generator/sourceMap.js","../../../svgo/node_modules/css-tree/lib/convertor/create.js","../../../svgo/node_modules/css-tree/lib/utils/clone.js","../../../svgo/node_modules/css-tree/lib/syntax/node/AtrulePrelude.js","../../../svgo/node_modules/css-tree/lib/syntax/node/Brackets.js","../../../svgo/node_modules/css-tree/lib/syntax/node/CDC.js","../../../svgo/node_modules/css-tree/lib/syntax/node/CDO.js","../../../svgo/node_modules/css-tree/lib/syntax/node/ClassSelector.js","../../../svgo/node_modules/css-tree/lib/syntax/node/Combinator.js","../../../svgo/node_modules/css-tree/lib/syntax/node/Comment.js","../../../svgo/node_modules/css-tree/lib/syntax/node/Function.js","../../../svgo/node_modules/css-tree/lib/syntax/node/Identifier.js","../../../svgo/node_modules/css-tree/lib/syntax/node/IdSelector.js","../../../svgo/node_modules/css-tree/lib/syntax/node/MediaFeature.js","../../../svgo/node_modules/css-tree/lib/syntax/node/MediaQuery.js","../../../svgo/node_modules/css-tree/lib/syntax/node/MediaQueryList.js","../../../svgo/node_modules/css-tree/lib/syntax/node/Number.js","../../../svgo/node_modules/css-tree/lib/syntax/node/Operator.js","../../../svgo/node_modules/css-tree/lib/syntax/node/Parentheses.js","../../../svgo/node_modules/css-tree/lib/syntax/node/Percentage.js","../../../svgo/node_modules/css-tree/lib/syntax/node/PseudoClassSelector.js","../../../svgo/node_modules/css-tree/lib/syntax/node/PseudoElementSelector.js","../../../svgo/node_modules/css-tree/lib/syntax/node/Raw.js","../../../svgo/node_modules/css-tree/lib/syntax/node/SelectorList.js","../../../svgo/node_modules/css-tree/lib/syntax/node/String.js","../../../svgo/node_modules/css-tree/lib/syntax/node/Url.js","../../../svgo/node_modules/css-tree/lib/syntax/node/WhiteSpace.js","../../../svgo/node_modules/css-tree/lib/syntax/node/index.js","../../../svgo/node_modules/css-tree/lib/syntax/node/Nth.js","../../../svgo/node_modules/css-tree/lib/syntax/node/Selector.js","../../../svgo/node_modules/css-tree/lib/syntax/node/Value.js","../../../svgo/node_modules/css-tree/lib/syntax/config/lexer.js","../../../svgo/node_modules/css-tree/lib/syntax/scope/default.js","../../../svgo/node_modules/css-tree/lib/syntax/scope/selector.js","../../../svgo/node_modules/css-tree/lib/syntax/function/element.js","../../../svgo/node_modules/css-tree/lib/syntax/function/var.js","../../../svgo/node_modules/css-tree/lib/syntax/atrule/import.js","../../../svgo/node_modules/css-tree/lib/syntax/pseudo/common/selectorList.js","../../../svgo/node_modules/css-tree/lib/syntax/pseudo/common/nthWithOfClause.js","../../../svgo/node_modules/css-tree/lib/syntax/pseudo/common/nth.js","../../../svgo/node_modules/css-tree/lib/syntax/index.js","../../../svgo/node_modules/css-tree/lib/syntax/config/parser.js","../../../svgo/node_modules/css-tree/lib/syntax/scope/index.js","../../../svgo/node_modules/css-tree/lib/syntax/scope/atrulePrelude.js","../../../svgo/node_modules/css-tree/lib/syntax/scope/value.js","../../../svgo/node_modules/css-tree/lib/syntax/function/expression.js","../../../svgo/node_modules/css-tree/lib/syntax/atrule/index.js","../../../svgo/node_modules/css-tree/lib/syntax/atrule/font-face.js","../../../svgo/node_modules/css-tree/lib/syntax/atrule/media.js","../../../svgo/node_modules/css-tree/lib/syntax/atrule/page.js","../../../svgo/node_modules/css-tree/lib/syntax/pseudo/index.js","../../../svgo/node_modules/css-tree/lib/syntax/pseudo/dir.js","../../../svgo/node_modules/css-tree/lib/syntax/pseudo/has.js","../../../svgo/node_modules/css-tree/lib/syntax/pseudo/lang.js","../../../svgo/node_modules/css-tree/lib/syntax/pseudo/slotted.js","../../../svgo/node_modules/css-tree/lib/syntax/config/walker.js","../../../svgo/node_modules/stable/stable.js","../../../svgo/node_modules/csso/lib/restructure/prepare/specificity.js","../../../svgo/lib/svgo/css-style-declaration.js","../../../svgo/lib/svgo/svg2js.js","../../../svgo/plugins/_collections.js","../../../svgo/plugins/removeXMLProcInst.js","../../../svgo/plugins/removeComments.js","../../../svgo/plugins/removeXMLNS.js","../../../svgo/plugins/removeHiddenElems.js","../../../svgo/plugins/removeEditorsNSData.js","../../../svgo/plugins/removeDoctype.js","../../../svgo/plugins/removeMetadata.js","../../../svgo/plugins/removeForeignObject.js","../../../svgo/plugins/removeSwitch.js"],"sourcesContent":["'use strict';\n\nvar domain;\n\n// This constructor is used to store event handlers. Instantiating this is\n// faster than explicitly calling `Object.create(null)` to get a \"clean\" empty\n// object (tested with v8 v4.9).\nfunction EventHandlers() {}\nEventHandlers.prototype = Object.create(null);\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nexport default EventEmitter;\nexport {EventEmitter};\n\n// nodejs oddity\n// require('events') === require('events').EventEmitter\nEventEmitter.EventEmitter = EventEmitter\n\nEventEmitter.usingDomains = false;\n\nEventEmitter.prototype.domain = undefined;\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\nEventEmitter.init = function() {\n  this.domain = null;\n  if (EventEmitter.usingDomains) {\n    // if there is an active domain, then attach to it.\n    if (domain.active && !(this instanceof domain.Domain)) {\n      this.domain = domain.active;\n    }\n  }\n\n  if (!this._events || this._events === Object.getPrototypeOf(this)._events) {\n    this._events = new EventHandlers();\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || isNaN(n))\n    throw new TypeError('\"n\" argument must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nfunction $getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return $getMaxListeners(this);\n};\n\n// These standalone emit* functions are used to optimize calling of event\n// handlers for fast cases because emit() itself often has a variable number of\n// arguments and can be deoptimized because of that. These functions always have\n// the same number of arguments and thus do not get deoptimized, so the code\n// inside them can execute faster.\nfunction emitNone(handler, isFn, self) {\n  if (isFn)\n    handler.call(self);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self);\n  }\n}\nfunction emitOne(handler, isFn, self, arg1) {\n  if (isFn)\n    handler.call(self, arg1);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1);\n  }\n}\nfunction emitTwo(handler, isFn, self, arg1, arg2) {\n  if (isFn)\n    handler.call(self, arg1, arg2);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2);\n  }\n}\nfunction emitThree(handler, isFn, self, arg1, arg2, arg3) {\n  if (isFn)\n    handler.call(self, arg1, arg2, arg3);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2, arg3);\n  }\n}\n\nfunction emitMany(handler, isFn, self, args) {\n  if (isFn)\n    handler.apply(self, args);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].apply(self, args);\n  }\n}\n\nEventEmitter.prototype.emit = function emit(type) {\n  var er, handler, len, args, i, events, domain;\n  var needDomainExit = false;\n  var doError = (type === 'error');\n\n  events = this._events;\n  if (events)\n    doError = (doError && events.error == null);\n  else if (!doError)\n    return false;\n\n  domain = this.domain;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    er = arguments[1];\n    if (domain) {\n      if (!er)\n        er = new Error('Uncaught, unspecified \"error\" event');\n      er.domainEmitter = this;\n      er.domain = domain;\n      er.domainThrown = false;\n      domain.emit('error', er);\n    } else if (er instanceof Error) {\n      throw er; // Unhandled 'error' event\n    } else {\n      // At least give some kind of context to the user\n      var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n      err.context = er;\n      throw err;\n    }\n    return false;\n  }\n\n  handler = events[type];\n\n  if (!handler)\n    return false;\n\n  var isFn = typeof handler === 'function';\n  len = arguments.length;\n  switch (len) {\n    // fast cases\n    case 1:\n      emitNone(handler, isFn, this);\n      break;\n    case 2:\n      emitOne(handler, isFn, this, arguments[1]);\n      break;\n    case 3:\n      emitTwo(handler, isFn, this, arguments[1], arguments[2]);\n      break;\n    case 4:\n      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);\n      break;\n    // slower\n    default:\n      args = new Array(len - 1);\n      for (i = 1; i < len; i++)\n        args[i - 1] = arguments[i];\n      emitMany(handler, isFn, this, args);\n  }\n\n  if (needDomainExit)\n    domain.exit();\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n\n  events = target._events;\n  if (!events) {\n    events = target._events = new EventHandlers();\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (!existing) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] = prepend ? [listener, existing] :\n                                          [existing, listener];\n    } else {\n      // If we've already got an array, just append.\n      if (prepend) {\n        existing.unshift(listener);\n      } else {\n        existing.push(listener);\n      }\n    }\n\n    // Check for listener leak\n    if (!existing.warned) {\n      m = $getMaxListeners(target);\n      if (m && m > 0 && existing.length > m) {\n        existing.warned = true;\n        var w = new Error('Possible EventEmitter memory leak detected. ' +\n                            existing.length + ' ' + type + ' listeners added. ' +\n                            'Use emitter.setMaxListeners() to increase limit');\n        w.name = 'MaxListenersExceededWarning';\n        w.emitter = target;\n        w.type = type;\n        w.count = existing.length;\n        emitWarning(w);\n      }\n    }\n  }\n\n  return target;\n}\nfunction emitWarning(e) {\n  typeof console.warn === 'function' ? console.warn(e) : console.log(e);\n}\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction _onceWrap(target, type, listener) {\n  var fired = false;\n  function g() {\n    target.removeListener(type, g);\n    if (!fired) {\n      fired = true;\n      listener.apply(target, arguments);\n    }\n  }\n  g.listener = listener;\n  return g;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      list = events[type];\n      if (!list)\n        return this;\n\n      if (list === listener || (list.listener && list.listener === listener)) {\n        if (--this._eventsCount === 0)\n          this._events = new EventHandlers();\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length; i-- > 0;) {\n          if (list[i] === listener ||\n              (list[i].listener && list[i].listener === listener)) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (list.length === 1) {\n          list[0] = undefined;\n          if (--this._eventsCount === 0) {\n            this._events = new EventHandlers();\n            return this;\n          } else {\n            delete events[type];\n          }\n        } else {\n          spliceOne(list, position);\n        }\n\n        if (events.removeListener)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events;\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (!events.removeListener) {\n        if (arguments.length === 0) {\n          this._events = new EventHandlers();\n          this._eventsCount = 0;\n        } else if (events[type]) {\n          if (--this._eventsCount === 0)\n            this._events = new EventHandlers();\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        for (var i = 0, key; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = new EventHandlers();\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners) {\n        // LIFO order\n        do {\n          this.removeListener(type, listeners[listeners.length - 1]);\n        } while (listeners[0]);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  var evlistener;\n  var ret;\n  var events = this._events;\n\n  if (!events)\n    ret = [];\n  else {\n    evlistener = events[type];\n    if (!evlistener)\n      ret = [];\n    else if (typeof evlistener === 'function')\n      ret = [evlistener.listener || evlistener];\n    else\n      ret = unwrapListeners(evlistener);\n  }\n\n  return ret;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];\n};\n\n// About 1.5x faster than the two-arg version of Array#splice().\nfunction spliceOne(list, index) {\n  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)\n    list[i] = list[k];\n  list.pop();\n}\n\nfunction arrayClone(arr, i) {\n  var copy = new Array(i);\n  while (i--)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n","// shim for using process in browser\n// based off https://github.com/defunctzombie/node-process/blob/master/browser.js\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\nvar cachedSetTimeout = defaultSetTimout;\nvar cachedClearTimeout = defaultClearTimeout;\nif (typeof global.setTimeout === 'function') {\n    cachedSetTimeout = setTimeout;\n}\nif (typeof global.clearTimeout === 'function') {\n    cachedClearTimeout = clearTimeout;\n}\n\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\nexport function nextTick(fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n}\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nexport var title = 'browser';\nexport var platform = 'browser';\nexport var browser = true;\nexport var env = {};\nexport var argv = [];\nexport var version = ''; // empty string to avoid regexp issues\nexport var versions = {};\nexport var release = {};\nexport var config = {};\n\nfunction noop() {}\n\nexport var on = noop;\nexport var addListener = noop;\nexport var once = noop;\nexport var off = noop;\nexport var removeListener = noop;\nexport var removeAllListeners = noop;\nexport var emit = noop;\n\nexport function binding(name) {\n    throw new Error('process.binding is not supported');\n}\n\nexport function cwd () { return '/' }\nexport function chdir (dir) {\n    throw new Error('process.chdir is not supported');\n};\nexport function umask() { return 0; }\n\n// from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js\nvar performance = global.performance || {}\nvar performanceNow =\n  performance.now        ||\n  performance.mozNow     ||\n  performance.msNow      ||\n  performance.oNow       ||\n  performance.webkitNow  ||\n  function(){ return (new Date()).getTime() }\n\n// generate timestamp or delta\n// see http://nodejs.org/api/process.html#process_process_hrtime\nexport function hrtime(previousTimestamp){\n  var clocktime = performanceNow.call(performance)*1e-3\n  var seconds = Math.floor(clocktime)\n  var nanoseconds = Math.floor((clocktime%1)*1e9)\n  if (previousTimestamp) {\n    seconds = seconds - previousTimestamp[0]\n    nanoseconds = nanoseconds - previousTimestamp[1]\n    if (nanoseconds<0) {\n      seconds--\n      nanoseconds += 1e9\n    }\n  }\n  return [seconds,nanoseconds]\n}\n\nvar startTime = new Date();\nexport function uptime() {\n  var currentTime = new Date();\n  var dif = currentTime - startTime;\n  return dif / 1000;\n}\n\nexport default {\n  nextTick: nextTick,\n  title: title,\n  browser: browser,\n  env: env,\n  argv: argv,\n  version: version,\n  versions: versions,\n  on: on,\n  addListener: addListener,\n  once: once,\n  off: off,\n  removeListener: removeListener,\n  removeAllListeners: removeAllListeners,\n  emit: emit,\n  binding: binding,\n  cwd: cwd,\n  chdir: chdir,\n  umask: umask,\n  hrtime: hrtime,\n  platform: platform,\n  release: release,\n  config: config,\n  uptime: uptime\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\nimport process from 'process';\nvar formatRegExp = /%[sdj%]/g;\nexport function format(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexport function deprecate(fn, msg) {\n  // Allow for deprecating things in the process of starting up.\n  if (isUndefined(global.process)) {\n    return function() {\n      return deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  if (process.noDeprecation === true) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexport function debuglog(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = 0;\n      debugs[set] = function() {\n        var msg = format.apply(null, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nexport function inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    _extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nexport function isArray(ar) {\n  return Array.isArray(ar);\n}\n\nexport function isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\n\nexport function isNull(arg) {\n  return arg === null;\n}\n\nexport function isNullOrUndefined(arg) {\n  return arg == null;\n}\n\nexport function isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nexport function isString(arg) {\n  return typeof arg === 'string';\n}\n\nexport function isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\n\nexport function isUndefined(arg) {\n  return arg === void 0;\n}\n\nexport function isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\n\nexport function isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nexport function isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\n\nexport function isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\n\nexport function isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nexport function isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\n\nexport function isBuffer(maybeBuf) {\n  return Buffer.isBuffer(maybeBuf);\n}\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexport function log() {\n  console.log('%s - %s', timestamp(), format.apply(null, arguments));\n}\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nimport inherits from './inherits';\nexport {inherits}\n\nexport function _extend(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nexport default {\n  inherits: inherits,\n  _extend: _extend,\n  log: log,\n  isBuffer: isBuffer,\n  isPrimitive: isPrimitive,\n  isFunction: isFunction,\n  isError: isError,\n  isDate: isDate,\n  isObject: isObject,\n  isRegExp: isRegExp,\n  isUndefined: isUndefined,\n  isSymbol: isSymbol,\n  isString: isString,\n  isNumber: isNumber,\n  isNullOrUndefined: isNullOrUndefined,\n  isNull: isNull,\n  isBoolean: isBoolean,\n  isArray: isArray,\n  inspect: inspect,\n  deprecate: deprecate,\n  format: format,\n  debuglog: debuglog\n}\n","\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\nvar inited = false;\nfunction init () {\n  inited = true;\n  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n  for (var i = 0, len = code.length; i < len; ++i) {\n    lookup[i] = code[i]\n    revLookup[code.charCodeAt(i)] = i\n  }\n\n  revLookup['-'.charCodeAt(0)] = 62\n  revLookup['_'.charCodeAt(0)] = 63\n}\n\nexport function toByteArray (b64) {\n  if (!inited) {\n    init();\n  }\n  var i, j, l, tmp, placeHolders, arr\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n\n  // base64 is 4/3 + up to two characters of the original data\n  arr = new Arr(len * 3 / 4 - placeHolders)\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len\n\n  var L = 0\n\n  for (i = 0, j = 0; i < l; i += 4, j += 3) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[L++] = tmp & 0xFF\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nexport function fromByteArray (uint8) {\n  if (!inited) {\n    init();\n  }\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var output = ''\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    output += lookup[tmp >> 2]\n    output += lookup[(tmp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n    output += lookup[tmp >> 10]\n    output += lookup[(tmp >> 4) & 0x3F]\n    output += lookup[(tmp << 2) & 0x3F]\n    output += '='\n  }\n\n  parts.push(output)\n\n  return parts.join('')\n}\n","\nexport function read (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexport function write (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\nimport * as base64 from './base64'\nimport * as ieee754 from './ieee754'\nimport isArray from './isArray'\n\nexport var INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : true\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nvar _kMaxLength = kMaxLength()\nexport {_kMaxLength as kMaxLength};\nfunction typedArraySupport () {\n  return true;\n  // rollup issues\n  // try {\n  //   var arr = new Uint8Array(1)\n  //   arr.__proto__ = {\n  //     __proto__: Uint8Array.prototype,\n  //     foo: function () { return 42 }\n  //   }\n  //   return arr.foo() === 42 && // typed array instances can be augmented\n  //       typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n  //       arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  // } catch (e) {\n  //   return false\n  // }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nexport function Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    // Object.defineProperty(Buffer, Symbol.species, {\n    //   value: null,\n    //   configurable: true\n    // })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (internalIsBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nexport function SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\nBuffer.isBuffer = isBuffer;\nfunction internalIsBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!internalIsBuffer(a) || !internalIsBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!internalIsBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (internalIsBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!internalIsBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (internalIsBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!internalIsBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = internalIsBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n\n// the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nexport function isBuffer(obj) {\n  return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))\n}\n\nfunction isFastBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))\n}\n","import {Buffer} from 'buffer';\n\nexport default BufferList;\n\nfunction BufferList() {\n  this.head = null;\n  this.tail = null;\n  this.length = 0;\n}\n\nBufferList.prototype.push = function (v) {\n  var entry = { data: v, next: null };\n  if (this.length > 0) this.tail.next = entry;else this.head = entry;\n  this.tail = entry;\n  ++this.length;\n};\n\nBufferList.prototype.unshift = function (v) {\n  var entry = { data: v, next: this.head };\n  if (this.length === 0) this.tail = entry;\n  this.head = entry;\n  ++this.length;\n};\n\nBufferList.prototype.shift = function () {\n  if (this.length === 0) return;\n  var ret = this.head.data;\n  if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;\n  --this.length;\n  return ret;\n};\n\nBufferList.prototype.clear = function () {\n  this.head = this.tail = null;\n  this.length = 0;\n};\n\nBufferList.prototype.join = function (s) {\n  if (this.length === 0) return '';\n  var p = this.head;\n  var ret = '' + p.data;\n  while (p = p.next) {\n    ret += s + p.data;\n  }return ret;\n};\n\nBufferList.prototype.concat = function (n) {\n  if (this.length === 0) return Buffer.alloc(0);\n  if (this.length === 1) return this.head.data;\n  var ret = Buffer.allocUnsafe(n >>> 0);\n  var p = this.head;\n  var i = 0;\n  while (p) {\n    p.data.copy(ret, i);\n    i += p.data.length;\n    p = p.next;\n  }\n  return ret;\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nimport {Buffer} from 'buffer';\nvar isBufferEncoding = Buffer.isEncoding\n  || function(encoding) {\n       switch (encoding && encoding.toLowerCase()) {\n         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;\n         default: return false;\n       }\n     }\n\n\nfunction assertEncoding(encoding) {\n  if (encoding && !isBufferEncoding(encoding)) {\n    throw new Error('Unknown encoding: ' + encoding);\n  }\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters. CESU-8 is handled as part of the UTF-8 encoding.\n//\n// @TODO Handling all encodings inside a single object makes it very difficult\n// to reason about this code, so it should be split up in the future.\n// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code\n// points as used by CESU-8.\nexport function StringDecoder(encoding) {\n  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');\n  assertEncoding(encoding);\n  switch (this.encoding) {\n    case 'utf8':\n      // CESU-8 represents each of Surrogate Pair by 3-bytes\n      this.surrogateSize = 3;\n      break;\n    case 'ucs2':\n    case 'utf16le':\n      // UTF-16 represents each of Surrogate Pair by 2-bytes\n      this.surrogateSize = 2;\n      this.detectIncompleteChar = utf16DetectIncompleteChar;\n      break;\n    case 'base64':\n      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.\n      this.surrogateSize = 3;\n      this.detectIncompleteChar = base64DetectIncompleteChar;\n      break;\n    default:\n      this.write = passThroughWrite;\n      return;\n  }\n\n  // Enough space to store all bytes of a single character. UTF-8 needs 4\n  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).\n  this.charBuffer = new Buffer(6);\n  // Number of bytes received for the current incomplete multi-byte character.\n  this.charReceived = 0;\n  // Number of bytes expected for the current incomplete multi-byte character.\n  this.charLength = 0;\n};\n\n\n// write decodes the given buffer and returns it as JS string that is\n// guaranteed to not contain any partial multi-byte characters. Any partial\n// character found at the end of the buffer is buffered up, and will be\n// returned when calling write again with the remaining bytes.\n//\n// Note: Converting a Buffer containing an orphan surrogate to a String\n// currently works, but converting a String to a Buffer (via `new Buffer`, or\n// Buffer#write) will replace incomplete surrogates with the unicode\n// replacement character. See https://codereview.chromium.org/121173009/ .\nStringDecoder.prototype.write = function(buffer) {\n  var charStr = '';\n  // if our last write ended with an incomplete multibyte character\n  while (this.charLength) {\n    // determine how many remaining bytes this buffer has to offer for this char\n    var available = (buffer.length >= this.charLength - this.charReceived) ?\n        this.charLength - this.charReceived :\n        buffer.length;\n\n    // add the new bytes to the char buffer\n    buffer.copy(this.charBuffer, this.charReceived, 0, available);\n    this.charReceived += available;\n\n    if (this.charReceived < this.charLength) {\n      // still not enough chars in this buffer? wait for more ...\n      return '';\n    }\n\n    // remove bytes belonging to the current character from the buffer\n    buffer = buffer.slice(available, buffer.length);\n\n    // get the character that was split\n    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);\n\n    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character\n    var charCode = charStr.charCodeAt(charStr.length - 1);\n    if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n      this.charLength += this.surrogateSize;\n      charStr = '';\n      continue;\n    }\n    this.charReceived = this.charLength = 0;\n\n    // if there are no more bytes in this buffer, just emit our char\n    if (buffer.length === 0) {\n      return charStr;\n    }\n    break;\n  }\n\n  // determine and set charLength / charReceived\n  this.detectIncompleteChar(buffer);\n\n  var end = buffer.length;\n  if (this.charLength) {\n    // buffer the incomplete character bytes we got\n    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);\n    end -= this.charReceived;\n  }\n\n  charStr += buffer.toString(this.encoding, 0, end);\n\n  var end = charStr.length - 1;\n  var charCode = charStr.charCodeAt(end);\n  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character\n  if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n    var size = this.surrogateSize;\n    this.charLength += size;\n    this.charReceived += size;\n    this.charBuffer.copy(this.charBuffer, size, 0, size);\n    buffer.copy(this.charBuffer, 0, 0, size);\n    return charStr.substring(0, end);\n  }\n\n  // or just emit the charStr\n  return charStr;\n};\n\n// detectIncompleteChar determines if there is an incomplete UTF-8 character at\n// the end of the given buffer. If so, it sets this.charLength to the byte\n// length that character, and sets this.charReceived to the number of bytes\n// that are available for this character.\nStringDecoder.prototype.detectIncompleteChar = function(buffer) {\n  // determine how many bytes we have to check at the end of this buffer\n  var i = (buffer.length >= 3) ? 3 : buffer.length;\n\n  // Figure out if one of the last i bytes of our buffer announces an\n  // incomplete char.\n  for (; i > 0; i--) {\n    var c = buffer[buffer.length - i];\n\n    // See http://en.wikipedia.org/wiki/UTF-8#Description\n\n    // 110XXXXX\n    if (i == 1 && c >> 5 == 0x06) {\n      this.charLength = 2;\n      break;\n    }\n\n    // 1110XXXX\n    if (i <= 2 && c >> 4 == 0x0E) {\n      this.charLength = 3;\n      break;\n    }\n\n    // 11110XXX\n    if (i <= 3 && c >> 3 == 0x1E) {\n      this.charLength = 4;\n      break;\n    }\n  }\n  this.charReceived = i;\n};\n\nStringDecoder.prototype.end = function(buffer) {\n  var res = '';\n  if (buffer && buffer.length)\n    res = this.write(buffer);\n\n  if (this.charReceived) {\n    var cr = this.charReceived;\n    var buf = this.charBuffer;\n    var enc = this.encoding;\n    res += buf.slice(0, cr).toString(enc);\n  }\n\n  return res;\n};\n\nfunction passThroughWrite(buffer) {\n  return buffer.toString(this.encoding);\n}\n\nfunction utf16DetectIncompleteChar(buffer) {\n  this.charReceived = buffer.length % 2;\n  this.charLength = this.charReceived ? 2 : 0;\n}\n\nfunction base64DetectIncompleteChar(buffer) {\n  this.charReceived = buffer.length % 3;\n  this.charLength = this.charReceived ? 3 : 0;\n}\n","'use strict';\n\n\nReadable.ReadableState = ReadableState;\nimport EventEmitter from 'events';\nimport {inherits, debuglog} from 'util';\nimport BufferList from './buffer-list';\nimport {StringDecoder} from 'string_decoder';\nimport {Duplex} from './duplex';\nimport {nextTick} from 'process';\n\nvar debug = debuglog('stream');\ninherits(Readable, EventEmitter);\n\nfunction prependListener(emitter, event, fn) {\n  // Sadly this is not cacheable as some libraries bundle their own\n  // event emitter implementation with them.\n  if (typeof emitter.prependListener === 'function') {\n    return emitter.prependListener(event, fn);\n  } else {\n    // This is a hack to make sure that our error handler is attached before any\n    // userland ones.  NEVER DO THIS. This is here only because this code needs\n    // to continue to work with older versions of Node.js that do not include\n    // the prependListener() method. The goal is to eventually remove this hack.\n    if (!emitter._events || !emitter._events[event])\n      emitter.on(event, fn);\n    else if (Array.isArray(emitter._events[event]))\n      emitter._events[event].unshift(fn);\n    else\n      emitter._events[event] = [fn, emitter._events[event]];\n  }\n}\nfunction listenerCount (emitter, type) {\n  return emitter.listeners(type).length;\n}\nfunction ReadableState(options, stream) {\n\n  options = options || {};\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n\n  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  var hwm = options.highWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = ~ ~this.highWaterMark;\n\n  // A linked list is used to store data chunks instead of an array because the\n  // linked list can remove elements from the beginning faster than\n  // array.shift()\n  this.buffer = new BufferList();\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // when piping, we only care about 'readable' events that happen\n  // after read()ing all the bytes and not getting any pushback.\n  this.ranOut = false;\n\n  // the number of writers that are awaiting a drain event in .pipe()s\n  this.awaitDrain = 0;\n\n  // if true, a maybeReadMore has been scheduled\n  this.readingMore = false;\n\n  this.decoder = null;\n  this.encoding = null;\n  if (options.encoding) {\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\nexport default Readable;\nexport function Readable(options) {\n\n  if (!(this instanceof Readable)) return new Readable(options);\n\n  this._readableState = new ReadableState(options, this);\n\n  // legacy\n  this.readable = true;\n\n  if (options && typeof options.read === 'function') this._read = options.read;\n\n  EventEmitter.call(this);\n}\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n\n  if (!state.objectMode && typeof chunk === 'string') {\n    encoding = encoding || state.defaultEncoding;\n    if (encoding !== state.encoding) {\n      chunk = Buffer.from(chunk, encoding);\n      encoding = '';\n    }\n  }\n\n  return readableAddChunk(this, state, chunk, encoding, false);\n};\n\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function (chunk) {\n  var state = this._readableState;\n  return readableAddChunk(this, state, chunk, '', true);\n};\n\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n};\n\nfunction readableAddChunk(stream, state, chunk, encoding, addToFront) {\n  var er = chunkInvalid(state, chunk);\n  if (er) {\n    stream.emit('error', er);\n  } else if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else if (state.objectMode || chunk && chunk.length > 0) {\n    if (state.ended && !addToFront) {\n      var e = new Error('stream.push() after EOF');\n      stream.emit('error', e);\n    } else if (state.endEmitted && addToFront) {\n      var _e = new Error('stream.unshift() after end event');\n      stream.emit('error', _e);\n    } else {\n      var skipAdd;\n      if (state.decoder && !addToFront && !encoding) {\n        chunk = state.decoder.write(chunk);\n        skipAdd = !state.objectMode && chunk.length === 0;\n      }\n\n      if (!addToFront) state.reading = false;\n\n      // Don't add to the buffer if we've decoded to an empty string chunk and\n      // we're not in object mode\n      if (!skipAdd) {\n        // if we want the data now, just emit it.\n        if (state.flowing && state.length === 0 && !state.sync) {\n          stream.emit('data', chunk);\n          stream.read(0);\n        } else {\n          // update the buffer info.\n          state.length += state.objectMode ? 1 : chunk.length;\n          if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n\n          if (state.needReadable) emitReadable(stream);\n        }\n      }\n\n      maybeReadMore(stream, state);\n    }\n  } else if (!addToFront) {\n    state.reading = false;\n  }\n\n  return needMoreData(state);\n}\n\n// if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\nfunction needMoreData(state) {\n  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);\n}\n\n// backwards compatibility.\nReadable.prototype.setEncoding = function (enc) {\n  this._readableState.decoder = new StringDecoder(enc);\n  this._readableState.encoding = enc;\n  return this;\n};\n\n// Don't raise the hwm > 8MB\nvar MAX_HWM = 0x800000;\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\n    // tiny amounts\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n  return n;\n}\n\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction howMuchToRead(n, state) {\n  if (n <= 0 || state.length === 0 && state.ended) return 0;\n  if (state.objectMode) return 1;\n  if (n !== n) {\n    // Only flow one buffer at a time\n    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;\n  }\n  // If we're asking for more than the current hwm, then raise the hwm.\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n  if (n <= state.length) return n;\n  // Don't have enough\n  if (!state.ended) {\n    state.needReadable = true;\n    return 0;\n  }\n  return state.length;\n}\n\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  n = parseInt(n, 10);\n  var state = this._readableState;\n  var nOrig = n;\n\n  if (n !== 0) state.emittedReadable = false;\n\n  // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state);\n\n  // if we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  var doRead = state.needReadable;\n  debug('need readable', doRead);\n\n  // if we currently have less than the highWaterMark, then also read some\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  }\n\n  // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  } else if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true;\n    // if the length is currently zero, then we *need* a readable event.\n    if (state.length === 0) state.needReadable = true;\n    // call internal read method\n    this._read(state.highWaterMark);\n    state.sync = false;\n    // If _read pushed data synchronously, then `reading` will be false,\n    // and we need to re-evaluate how much data we can return to the user.\n    if (!state.reading) n = howMuchToRead(nOrig, state);\n  }\n\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n\n  if (ret === null) {\n    state.needReadable = true;\n    n = 0;\n  } else {\n    state.length -= n;\n  }\n\n  if (state.length === 0) {\n    // If we have nothing in the buffer, then we want to know\n    // as soon as we *do* get something into the buffer.\n    if (!state.ended) state.needReadable = true;\n\n    // If we tried to read() past the EOF, then emit end on the next tick.\n    if (nOrig !== n && state.ended) endReadable(this);\n  }\n\n  if (ret !== null) this.emit('data', ret);\n\n  return ret;\n};\n\nfunction chunkInvalid(state, chunk) {\n  var er = null;\n  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  return er;\n}\n\nfunction onEofChunk(stream, state) {\n  if (state.ended) return;\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n  state.ended = true;\n\n  // emit 'readable' now to make sure it gets picked up.\n  emitReadable(stream);\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    if (state.sync) nextTick(emitReadable_, stream);else emitReadable_(stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  debug('emit readable');\n  stream.emit('readable');\n  flow(stream);\n}\n\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    nextTick(maybeReadMore_, stream, state);\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  var len = state.length;\n  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length)\n      // didn't get any data, stop spinning.\n      break;else len = state.length;\n  }\n  state.readingMore = false;\n}\n\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function (n) {\n  this.emit('error', new Error('not implemented'));\n};\n\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n\n  var doEnd = (!pipeOpts || pipeOpts.end !== false);\n\n  var endFn = doEnd ? onend : cleanup;\n  if (state.endEmitted) nextTick(endFn);else src.once('end', endFn);\n\n  dest.on('unpipe', onunpipe);\n  function onunpipe(readable) {\n    debug('onunpipe');\n    if (readable === src) {\n      cleanup();\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  }\n\n  // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n\n  var cleanedUp = false;\n  function cleanup() {\n    debug('cleanup');\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', cleanup);\n    src.removeListener('data', ondata);\n\n    cleanedUp = true;\n\n    // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n\n  // If the user pushes more data while we're writing to dest then we'll end up\n  // in ondata again. However, we only want to increase awaitDrain once because\n  // dest will only emit one 'drain' event for the multiple writes.\n  // => Introduce a guard on increasing awaitDrain.\n  var increasedAwaitDrain = false;\n  src.on('data', ondata);\n  function ondata(chunk) {\n    debug('ondata');\n    increasedAwaitDrain = false;\n    var ret = dest.write(chunk);\n    if (false === ret && !increasedAwaitDrain) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      // => Check whether `dest` is still a piping destination.\n      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n        debug('false write response, pause', src._readableState.awaitDrain);\n        src._readableState.awaitDrain++;\n        increasedAwaitDrain = true;\n      }\n      src.pause();\n    }\n  }\n\n  // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (listenerCount(dest, 'error') === 0) dest.emit('error', er);\n  }\n\n  // Make sure our error handler is attached before userland ones.\n  prependListener(dest, 'error', onerror);\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n  dest.once('close', onclose);\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  }\n\n  // tell the dest that it's being piped to\n  dest.emit('pipe', src);\n\n  // start the flow if it hasn't been started already.\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function () {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n    if (state.awaitDrain === 0 && src.listeners('data').length) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n\n  // if we're not piping anywhere, then do nothing.\n  if (state.pipesCount === 0) return this;\n\n  // just one destination.  most common case.\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n\n    if (!dest) dest = state.pipes;\n\n    // got a match.\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this);\n    return this;\n  }\n\n  // slow case. multiple pipe destinations.\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var _i = 0; _i < len; _i++) {\n      dests[_i].emit('unpipe', this);\n    }return this;\n  }\n\n  // try to find the right one.\n  var i = indexOf(state.pipes, dest);\n  if (i === -1) return this;\n\n  state.pipes.splice(i, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n\n  dest.emit('unpipe', this);\n\n  return this;\n};\n\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function (ev, fn) {\n  var res = EventEmitter.prototype.on.call(this, ev, fn);\n\n  if (ev === 'data') {\n    // Start flowing on next tick if stream isn't explicitly paused\n    if (this._readableState.flowing !== false) this.resume();\n  } else if (ev === 'readable') {\n    var state = this._readableState;\n    if (!state.endEmitted && !state.readableListening) {\n      state.readableListening = state.needReadable = true;\n      state.emittedReadable = false;\n      if (!state.reading) {\n        nextTick(nReadingNextTick, this);\n      } else if (state.length) {\n        emitReadable(this, state);\n      }\n    }\n  }\n\n  return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\n\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n}\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n  if (!state.flowing) {\n    debug('resume');\n    state.flowing = true;\n    resume(this, state);\n  }\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    nextTick(resume_, stream, state);\n  }\n}\n\nfunction resume_(stream, state) {\n  if (!state.reading) {\n    debug('resume read 0');\n    stream.read(0);\n  }\n\n  state.resumeScheduled = false;\n  state.awaitDrain = 0;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\n\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n  if (false !== this._readableState.flowing) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n  while (state.flowing && stream.read() !== null) {}\n}\n\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function (stream) {\n  var state = this._readableState;\n  var paused = false;\n\n  var self = this;\n  stream.on('end', function () {\n    debug('wrapped end');\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) self.push(chunk);\n    }\n\n    self.push(null);\n  });\n\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk);\n\n    // don't skip over falsy values in objectMode\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n\n    var ret = self.push(chunk);\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  });\n\n  // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function (method) {\n        return function () {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  }\n\n  // proxy certain important events.\n  var events = ['error', 'close', 'destroy', 'pause', 'resume'];\n  forEach(events, function (ev) {\n    stream.on(ev, self.emit.bind(self, ev));\n  });\n\n  // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n  self._read = function (n) {\n    debug('wrapped _read', n);\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return self;\n};\n\n// exposed for testing purposes only.\nReadable._fromList = fromList;\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromList(n, state) {\n  // nothing buffered\n  if (state.length === 0) return null;\n\n  var ret;\n  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {\n    // read it all, truncate the list\n    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);\n    state.buffer.clear();\n  } else {\n    // read part of list\n    ret = fromListPartial(n, state.buffer, state.decoder);\n  }\n\n  return ret;\n}\n\n// Extracts only enough buffered data to satisfy the amount requested.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromListPartial(n, list, hasStrings) {\n  var ret;\n  if (n < list.head.data.length) {\n    // slice is the same for buffers and strings\n    ret = list.head.data.slice(0, n);\n    list.head.data = list.head.data.slice(n);\n  } else if (n === list.head.data.length) {\n    // first chunk is a perfect match\n    ret = list.shift();\n  } else {\n    // result spans more than one buffer\n    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);\n  }\n  return ret;\n}\n\n// Copies a specified amount of characters from the list of buffered data\n// chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBufferString(n, list) {\n  var p = list.head;\n  var c = 1;\n  var ret = p.data;\n  n -= ret.length;\n  while (p = p.next) {\n    var str = p.data;\n    var nb = n > str.length ? str.length : n;\n    if (nb === str.length) ret += str;else ret += str.slice(0, n);\n    n -= nb;\n    if (n === 0) {\n      if (nb === str.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = str.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\n// Copies a specified amount of bytes from the list of buffered data chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBuffer(n, list) {\n  var ret = Buffer.allocUnsafe(n);\n  var p = list.head;\n  var c = 1;\n  p.data.copy(ret);\n  n -= p.data.length;\n  while (p = p.next) {\n    var buf = p.data;\n    var nb = n > buf.length ? buf.length : n;\n    buf.copy(ret, ret.length - n, 0, nb);\n    n -= nb;\n    if (n === 0) {\n      if (nb === buf.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = buf.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n\n  // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n  if (state.length > 0) throw new Error('\"endReadable()\" called on non-empty stream');\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    nextTick(endReadableNT, state, stream);\n  }\n}\n\nfunction endReadableNT(state, stream) {\n  // Check that we didn't get one last unshift.\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n  }\n}\n\nfunction forEach(xs, f) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    f(xs[i], i);\n  }\n}\n\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n  return -1;\n}\n","// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n\n\nimport {inherits, deprecate} from 'util';\nimport {Buffer} from 'buffer';\nWritable.WritableState = WritableState;\nimport {EventEmitter} from 'events';\nimport {Duplex} from './duplex';\nimport {nextTick} from 'process';\ninherits(Writable, EventEmitter);\n\nfunction nop() {}\n\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n}\n\nfunction WritableState(options, stream) {\n  Object.defineProperty(this, 'buffer', {\n    get: deprecate(function () {\n      return this.getBuffer();\n    }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')\n  });\n  options = options || {};\n\n  // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!options.objectMode;\n\n  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;\n\n  // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n  var hwm = options.highWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = ~ ~this.highWaterMark;\n\n  this.needDrain = false;\n  // at the start of calling end()\n  this.ending = false;\n  // when end() has been called, and returned\n  this.ended = false;\n  // when 'finish' is emitted\n  this.finished = false;\n\n  // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n  this.length = 0;\n\n  // a flag to see when we're in the middle of a write.\n  this.writing = false;\n\n  // when true all writes will be buffered until .uncork() call\n  this.corked = 0;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n  this.bufferProcessing = false;\n\n  // the callback that's passed to _write(chunk,cb)\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  };\n\n  // the callback that the user supplies to write(chunk,encoding,cb)\n  this.writecb = null;\n\n  // the amount that is being written when _write is called.\n  this.writelen = 0;\n\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null;\n\n  // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n  this.pendingcb = 0;\n\n  // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n  this.prefinished = false;\n\n  // True if the error was already emitted and should not be thrown again\n  this.errorEmitted = false;\n\n  // count buffered requests\n  this.bufferedRequestCount = 0;\n\n  // allocate the first CorkedRequest, there is always\n  // one allocated and free to use, and we maintain at most two\n  this.corkedRequestsFree = new CorkedRequest(this);\n}\n\nWritableState.prototype.getBuffer = function writableStateGetBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n  return out;\n};\n\nexport default Writable;\nexport function Writable(options) {\n\n  // Writable ctor is applied to Duplexes, though they're not\n  // instanceof Writable, they're instanceof Readable.\n  if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);\n\n  this._writableState = new WritableState(options, this);\n\n  // legacy.\n  this.writable = true;\n\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n\n    if (typeof options.writev === 'function') this._writev = options.writev;\n  }\n\n  EventEmitter.call(this);\n}\n\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function () {\n  this.emit('error', new Error('Cannot pipe, not readable'));\n};\n\nfunction writeAfterEnd(stream, cb) {\n  var er = new Error('write after end');\n  // TODO: defer error events consistently everywhere, not just the cb\n  stream.emit('error', er);\n  nextTick(cb, er);\n}\n\n// If we get something that is not a buffer, string, null, or undefined,\n// and we're not in objectMode, then that's an error.\n// Otherwise stream chunks are all considered to be of length=1, and the\n// watermarks determine how many objects to keep in the buffer, rather than\n// how many bytes or characters.\nfunction validChunk(stream, state, chunk, cb) {\n  var valid = true;\n  var er = false;\n  // Always throw error if a null is written\n  // if we are not in object mode then throw\n  // if it is not a buffer, string, or undefined.\n  if (chunk === null) {\n    er = new TypeError('May not write null values to stream');\n  } else if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  if (er) {\n    stream.emit('error', er);\n    nextTick(cb, er);\n    valid = false;\n  }\n  return valid;\n}\n\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (Buffer.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n\n  if (typeof cb !== 'function') cb = nop;\n\n  if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, chunk, encoding, cb);\n  }\n\n  return ret;\n};\n\nWritable.prototype.cork = function () {\n  var state = this._writableState;\n\n  state.corked++;\n};\n\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n\n    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n  }\n};\n\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);\n  this._writableState.defaultEncoding = encoding;\n  return this;\n};\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = Buffer.from(chunk, encoding);\n  }\n  return chunk;\n}\n\n// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, chunk, encoding, cb) {\n  chunk = decodeChunk(state, chunk, encoding);\n\n  if (Buffer.isBuffer(chunk)) encoding = 'buffer';\n  var len = state.objectMode ? 1 : chunk.length;\n\n  state.length += len;\n\n  var ret = state.length < state.highWaterMark;\n  // we must ensure that previous needDrain will not be reset to false.\n  if (!ret) state.needDrain = true;\n\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n  if (sync) nextTick(cb, er);else cb(er);\n\n  stream._writableState.errorEmitted = true;\n  stream.emit('error', er);\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n\n  onwriteStateUpdate(state);\n\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(state);\n\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      /*<replacement>*/\n        nextTick(afterWrite, stream, state, finished, cb);\n      /*</replacement>*/\n    } else {\n        afterWrite(stream, state, finished, cb);\n      }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n}\n\n// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n}\n\n// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n\n    var count = 0;\n    while (entry) {\n      buffer[count] = entry;\n      entry = entry.next;\n      count += 1;\n    }\n\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish);\n\n    // doWrite is almost always async, defer these to save a bit of time\n    // as the hot path ends with doWrite\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n    if (holder.next) {\n      state.corkedRequestsFree = holder.next;\n      holder.next = null;\n    } else {\n      state.corkedRequestsFree = new CorkedRequest(state);\n    }\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n      if (state.writing) {\n        break;\n      }\n    }\n\n    if (entry === null) state.lastBufferedRequest = null;\n  }\n\n  state.bufferedRequestCount = 0;\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new Error('not implemented'));\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);\n\n  // .end() fully uncorks\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  }\n\n  // ignore unnecessary end() calls.\n  if (!state.ending && !state.finished) endWritable(this, state, cb);\n};\n\nfunction needFinish(state) {\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\n\nfunction prefinish(stream, state) {\n  if (!state.prefinished) {\n    state.prefinished = true;\n    stream.emit('prefinish');\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n  if (need) {\n    if (state.pendingcb === 0) {\n      prefinish(stream, state);\n      state.finished = true;\n      stream.emit('finish');\n    } else {\n      prefinish(stream, state);\n    }\n  }\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n  if (cb) {\n    if (state.finished) nextTick(cb);else stream.once('finish', cb);\n  }\n  state.ended = true;\n  stream.writable = false;\n}\n\n// It seems a linked list but it is not\n// there will be only 2 of these for each stream\nfunction CorkedRequest(state) {\n  var _this = this;\n\n  this.next = null;\n  this.entry = null;\n\n  this.finish = function (err) {\n    var entry = _this.entry;\n    _this.entry = null;\n    while (entry) {\n      var cb = entry.callback;\n      state.pendingcb--;\n      cb(err);\n      entry = entry.next;\n    }\n    if (state.corkedRequestsFree) {\n      state.corkedRequestsFree.next = _this;\n    } else {\n      state.corkedRequestsFree = _this;\n    }\n  };\n}\n","\nimport {inherits} from 'util';\nimport {nextTick} from 'process';\nimport {Readable} from './readable';\nimport {Writable} from './writable';\n\n\ninherits(Duplex, Readable);\n\nvar keys = Object.keys(Writable.prototype);\nfor (var v = 0; v < keys.length; v++) {\n  var method = keys[v];\n  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n}\nexport default Duplex;\nexport function Duplex(options) {\n  if (!(this instanceof Duplex)) return new Duplex(options);\n\n  Readable.call(this, options);\n  Writable.call(this, options);\n\n  if (options && options.readable === false) this.readable = false;\n\n  if (options && options.writable === false) this.writable = false;\n\n  this.allowHalfOpen = true;\n  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;\n\n  this.once('end', onend);\n}\n\n// the no-half-open enforcer\nfunction onend() {\n  // if we allow half-open state, or if the writable side ended,\n  // then we're ok.\n  if (this.allowHalfOpen || this._writableState.ended) return;\n\n  // no more data can be written.\n  // But allow more writes to happen in this tick.\n  nextTick(onEndNT, this);\n}\n\nfunction onEndNT(self) {\n  self.end();\n}\n","// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n\n\nimport {Duplex} from './duplex';\n\n\nimport {inherits} from 'util';\ninherits(Transform, Duplex);\n\nfunction TransformState(stream) {\n  this.afterTransform = function (er, data) {\n    return afterTransform(stream, er, data);\n  };\n\n  this.needTransform = false;\n  this.transforming = false;\n  this.writecb = null;\n  this.writechunk = null;\n  this.writeencoding = null;\n}\n\nfunction afterTransform(stream, er, data) {\n  var ts = stream._transformState;\n  ts.transforming = false;\n\n  var cb = ts.writecb;\n\n  if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));\n\n  ts.writechunk = null;\n  ts.writecb = null;\n\n  if (data !== null && data !== undefined) stream.push(data);\n\n  cb(er);\n\n  var rs = stream._readableState;\n  rs.reading = false;\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    stream._read(rs.highWaterMark);\n  }\n}\nexport default Transform;\nexport function Transform(options) {\n  if (!(this instanceof Transform)) return new Transform(options);\n\n  Duplex.call(this, options);\n\n  this._transformState = new TransformState(this);\n\n  // when the writable side finishes, then flush out anything remaining.\n  var stream = this;\n\n  // start out asking for a readable event once data is transformed.\n  this._readableState.needReadable = true;\n\n  // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n  this._readableState.sync = false;\n\n  if (options) {\n    if (typeof options.transform === 'function') this._transform = options.transform;\n\n    if (typeof options.flush === 'function') this._flush = options.flush;\n  }\n\n  this.once('prefinish', function () {\n    if (typeof this._flush === 'function') this._flush(function (er) {\n      done(stream, er);\n    });else done(stream);\n  });\n}\n\nTransform.prototype.push = function (chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n};\n\n// This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\nTransform.prototype._transform = function (chunk, encoding, cb) {\n  throw new Error('Not implemented');\n};\n\nTransform.prototype._write = function (chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n  }\n};\n\n// Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\nTransform.prototype._read = function (n) {\n  var ts = this._transformState;\n\n  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {\n    ts.transforming = true;\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\nfunction done(stream, er) {\n  if (er) return stream.emit('error', er);\n\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n  var ws = stream._writableState;\n  var ts = stream._transformState;\n\n  if (ws.length) throw new Error('Calling transform done when ws.length != 0');\n\n  if (ts.transforming) throw new Error('Calling transform done when still transforming');\n\n  return stream.push(null);\n}\n","\nimport {Transform} from './transform';\n\nimport {inherits} from 'util';\ninherits(PassThrough, Transform);\nexport default PassThrough;\nexport function PassThrough(options) {\n  if (!(this instanceof PassThrough)) return new PassThrough(options);\n\n  Transform.call(this, options);\n}\n\nPassThrough.prototype._transform = function (chunk, encoding, cb) {\n  cb(null, chunk);\n};\n","import EE from 'events';\nimport {inherits} from 'util';\n\nimport {Duplex} from './readable-stream/duplex.js';\nimport {Readable} from './readable-stream/readable.js';\nimport {Writable} from './readable-stream/writable.js';\nimport {Transform} from './readable-stream/transform.js';\nimport {PassThrough} from './readable-stream/passthrough.js';\ninherits(Stream, EE);\nStream.Readable = Readable;\nStream.Writable = Writable;\nStream.Duplex = Duplex;\nStream.Transform = Transform;\nStream.PassThrough = PassThrough;\n\n// Backwards-compat with node 0.4.x\nStream.Stream = Stream;\n\nexport default Stream;\nexport {Readable,Writable,Duplex,Transform,PassThrough,Stream}\n\n// old-style streams.  Note that the pipe method (the only relevant\n// part of this class) is overridden in the Readable class.\n\nfunction Stream() {\n  EE.call(this);\n}\n\nStream.prototype.pipe = function(dest, options) {\n  var source = this;\n\n  function ondata(chunk) {\n    if (dest.writable) {\n      if (false === dest.write(chunk) && source.pause) {\n        source.pause();\n      }\n    }\n  }\n\n  source.on('data', ondata);\n\n  function ondrain() {\n    if (source.readable && source.resume) {\n      source.resume();\n    }\n  }\n\n  dest.on('drain', ondrain);\n\n  // If the 'end' option is not supplied, dest.end() will be called when\n  // source gets the 'end' or 'close' events.  Only dest.end() once.\n  if (!dest._isStdio && (!options || options.end !== false)) {\n    source.on('end', onend);\n    source.on('close', onclose);\n  }\n\n  var didOnEnd = false;\n  function onend() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    dest.end();\n  }\n\n\n  function onclose() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    if (typeof dest.destroy === 'function') dest.destroy();\n  }\n\n  // don't leave dangling pipes when there are errors.\n  function onerror(er) {\n    cleanup();\n    if (EE.listenerCount(this, 'error') === 0) {\n      throw er; // Unhandled stream error in pipe.\n    }\n  }\n\n  source.on('error', onerror);\n  dest.on('error', onerror);\n\n  // remove all the event listeners that were added.\n  function cleanup() {\n    source.removeListener('data', ondata);\n    dest.removeListener('drain', ondrain);\n\n    source.removeListener('end', onend);\n    source.removeListener('close', onclose);\n\n    source.removeListener('error', onerror);\n    dest.removeListener('error', onerror);\n\n    source.removeListener('end', cleanup);\n    source.removeListener('close', cleanup);\n\n    dest.removeListener('close', cleanup);\n  }\n\n  source.on('end', cleanup);\n  source.on('close', cleanup);\n\n  dest.on('close', cleanup);\n\n  dest.emit('pipe', source);\n\n  // Allow for unix-like usage: A.pipe(B).pipe(C)\n  return dest;\n};\n","var inverseXML = getInverseObj(require(\"../maps/xml.json\")),\n    xmlReplacer = getInverseReplacer(inverseXML);\n\nexports.XML = getInverse(inverseXML, xmlReplacer);\n\nvar inverseHTML = getInverseObj(require(\"../maps/entities.json\")),\n    htmlReplacer = getInverseReplacer(inverseHTML);\n\nexports.HTML = getInverse(inverseHTML, htmlReplacer);\n\nfunction getInverseObj(obj) {\n    return Object.keys(obj)\n        .sort()\n        .reduce(function(inverse, name) {\n            inverse[obj[name]] = \"&\" + name + \";\";\n            return inverse;\n        }, {});\n}\n\nfunction getInverseReplacer(inverse) {\n    var single = [],\n        multiple = [];\n\n    Object.keys(inverse).forEach(function(k) {\n        if (k.length === 1) {\n            single.push(\"\\\\\" + k);\n        } else {\n            multiple.push(k);\n        }\n    });\n\n    //TODO add ranges\n    multiple.unshift(\"[\" + single.join(\"\") + \"]\");\n\n    return new RegExp(multiple.join(\"|\"), \"g\");\n}\n\nvar re_nonASCII = /[^\\0-\\x7F]/g,\n    re_astralSymbols = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n\nfunction singleCharReplacer(c) {\n    return (\n        \"&#x\" +\n        c\n            .charCodeAt(0)\n            .toString(16)\n            .toUpperCase() +\n        \";\"\n    );\n}\n\nfunction astralReplacer(c) {\n    // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n    var high = c.charCodeAt(0);\n    var low = c.charCodeAt(1);\n    var codePoint = (high - 0xd800) * 0x400 + low - 0xdc00 + 0x10000;\n    return \"&#x\" + codePoint.toString(16).toUpperCase() + \";\";\n}\n\nfunction getInverse(inverse, re) {\n    function func(name) {\n        return inverse[name];\n    }\n\n    return function(data) {\n        return data\n            .replace(re, func)\n            .replace(re_astralSymbols, astralReplacer)\n            .replace(re_nonASCII, singleCharReplacer);\n    };\n}\n\nvar re_xmlChars = getInverseReplacer(inverseXML);\n\nfunction escapeXML(data) {\n    return data\n        .replace(re_xmlChars, singleCharReplacer)\n        .replace(re_astralSymbols, astralReplacer)\n        .replace(re_nonASCII, singleCharReplacer);\n}\n\nexports.escape = escapeXML;\n","var entityMap = require(\"../maps/entities.json\"),\n    legacyMap = require(\"../maps/legacy.json\"),\n    xmlMap = require(\"../maps/xml.json\"),\n    decodeCodePoint = require(\"./decode_codepoint.js\");\n\nvar decodeXMLStrict = getStrictDecoder(xmlMap),\n    decodeHTMLStrict = getStrictDecoder(entityMap);\n\nfunction getStrictDecoder(map) {\n    var keys = Object.keys(map).join(\"|\"),\n        replace = getReplacer(map);\n\n    keys += \"|#[xX][\\\\da-fA-F]+|#\\\\d+\";\n\n    var re = new RegExp(\"&(?:\" + keys + \");\", \"g\");\n\n    return function(str) {\n        return String(str).replace(re, replace);\n    };\n}\n\nvar decodeHTML = (function() {\n    var legacy = Object.keys(legacyMap).sort(sorter);\n\n    var keys = Object.keys(entityMap).sort(sorter);\n\n    for (var i = 0, j = 0; i < keys.length; i++) {\n        if (legacy[j] === keys[i]) {\n            keys[i] += \";?\";\n            j++;\n        } else {\n            keys[i] += \";\";\n        }\n    }\n\n    var re = new RegExp(\"&(?:\" + keys.join(\"|\") + \"|#[xX][\\\\da-fA-F]+;?|#\\\\d+;?)\", \"g\"),\n        replace = getReplacer(entityMap);\n\n    function replacer(str) {\n        if (str.substr(-1) !== \";\") str += \";\";\n        return replace(str);\n    }\n\n    //TODO consider creating a merged map\n    return function(str) {\n        return String(str).replace(re, replacer);\n    };\n})();\n\nfunction sorter(a, b) {\n    return a < b ? 1 : -1;\n}\n\nfunction getReplacer(map) {\n    return function replace(str) {\n        if (str.charAt(1) === \"#\") {\n            if (str.charAt(2) === \"X\" || str.charAt(2) === \"x\") {\n                return decodeCodePoint(parseInt(str.substr(3), 16));\n            }\n            return decodeCodePoint(parseInt(str.substr(2), 10));\n        }\n        return map[str.slice(1, -1)];\n    };\n}\n\nmodule.exports = {\n    XML: decodeXMLStrict,\n    HTML: decodeHTML,\n    HTMLStrict: decodeHTMLStrict\n};\n","var ElementType = require(\"domelementtype\"),\n    getOuterHTML = require(\"dom-serializer\"),\n    isTag = ElementType.isTag;\n\nmodule.exports = {\n\tgetInnerHTML: getInnerHTML,\n\tgetOuterHTML: getOuterHTML,\n\tgetText: getText\n};\n\nfunction getInnerHTML(elem, opts){\n\treturn elem.children ? elem.children.map(function(elem){\n\t\treturn getOuterHTML(elem, opts);\n\t}).join(\"\") : \"\";\n}\n\nfunction getText(elem){\n\tif(Array.isArray(elem)) return elem.map(getText).join(\"\");\n\tif(isTag(elem)) return elem.name === \"br\" ? \"\\n\" : getText(elem.children);\n\tif(elem.type === ElementType.CDATA) return getText(elem.children);\n\tif(elem.type === ElementType.Text) return elem.data;\n\treturn \"\";\n}\n","var isTag = require(\"domelementtype\").isTag;\n\nmodule.exports = {\n\tfilter: filter,\n\tfind: find,\n\tfindOneChild: findOneChild,\n\tfindOne: findOne,\n\texistsOne: existsOne,\n\tfindAll: findAll\n};\n\nfunction filter(test, element, recurse, limit){\n\tif(!Array.isArray(element)) element = [element];\n\n\tif(typeof limit !== \"number\" || !isFinite(limit)){\n\t\tlimit = Infinity;\n\t}\n\treturn find(test, element, recurse !== false, limit);\n}\n\nfunction find(test, elems, recurse, limit){\n\tvar result = [], childs;\n\n\tfor(var i = 0, j = elems.length; i < j; i++){\n\t\tif(test(elems[i])){\n\t\t\tresult.push(elems[i]);\n\t\t\tif(--limit <= 0) break;\n\t\t}\n\n\t\tchilds = elems[i].children;\n\t\tif(recurse && childs && childs.length > 0){\n\t\t\tchilds = find(test, childs, recurse, limit);\n\t\t\tresult = result.concat(childs);\n\t\t\tlimit -= childs.length;\n\t\t\tif(limit <= 0) break;\n\t\t}\n\t}\n\n\treturn result;\n}\n\nfunction findOneChild(test, elems){\n\tfor(var i = 0, l = elems.length; i < l; i++){\n\t\tif(test(elems[i])) return elems[i];\n\t}\n\n\treturn null;\n}\n\nfunction findOne(test, elems){\n\tvar elem = null;\n\n\tfor(var i = 0, l = elems.length; i < l && !elem; i++){\n\t\tif(!isTag(elems[i])){\n\t\t\tcontinue;\n\t\t} else if(test(elems[i])){\n\t\t\telem = elems[i];\n\t\t} else if(elems[i].children.length > 0){\n\t\t\telem = findOne(test, elems[i].children);\n\t\t}\n\t}\n\n\treturn elem;\n}\n\nfunction existsOne(test, elems){\n\tfor(var i = 0, l = elems.length; i < l; i++){\n\t\tif(\n\t\t\tisTag(elems[i]) && (\n\t\t\t\ttest(elems[i]) || (\n\t\t\t\t\telems[i].children.length > 0 &&\n\t\t\t\t\texistsOne(test, elems[i].children)\n\t\t\t\t)\n\t\t\t)\n\t\t){\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\nfunction findAll(test, rootElems){\n\tvar result = [];\n\tvar stack = rootElems.slice();\n\twhile(stack.length){\n\t\tvar elem = stack.shift();\n\t\tif(!isTag(elem)) continue;\n\t\tif (elem.children && elem.children.length > 0) {\n\t\t\tstack.unshift.apply(stack, elem.children);\n\t\t}\n\t\tif(test(elem)) result.push(elem);\n\t}\n\treturn result;\n}\n","\"use strict\";\n\nmodule.exports = parse;\n\nvar re_name = /^(?:\\\\.|[\\w\\-\\u00c0-\\uFFFF])+/,\n    re_escape = /\\\\([\\da-f]{1,6}\\s?|(\\s)|.)/ig,\n    //modified version of https://github.com/jquery/sizzle/blob/master/src/sizzle.js#L87\n    re_attr = /^\\s*((?:\\\\.|[\\w\\u00c0-\\uFFFF\\-])+)\\s*(?:(\\S?)=\\s*(?:(['\"])([^]*?)\\3|(#?(?:\\\\.|[\\w\\u00c0-\\uFFFF\\-])*)|)|)\\s*(i)?\\]/;\n\nvar actionTypes = {\n\t__proto__: null,\n\t\"undefined\": \"exists\",\n\t\"\":  \"equals\",\n\t\"~\": \"element\",\n\t\"^\": \"start\",\n\t\"$\": \"end\",\n\t\"*\": \"any\",\n\t\"!\": \"not\",\n\t\"|\": \"hyphen\"\n};\n\nvar simpleSelectors = {\n\t__proto__: null,\n\t\">\": \"child\",\n\t\"<\": \"parent\",\n\t\"~\": \"sibling\",\n\t\"+\": \"adjacent\"\n};\n\nvar attribSelectors = {\n\t__proto__: null,\n\t\"#\": [\"id\", \"equals\"],\n\t\".\": [\"class\", \"element\"]\n};\n\n//pseudos, whose data-property is parsed as well\nvar unpackPseudos = {\n\t__proto__: null,\n\t\"has\": true,\n\t\"not\": true,\n\t\"matches\": true\n};\n\nvar stripQuotesFromPseudos = {\n\t__proto__: null,\n\t\"contains\": true,\n\t\"icontains\": true\n};\n\nvar quotes = {\n\t__proto__: null,\n\t\"\\\"\": true,\n\t\"'\": true\n};\n\n//unescape function taken from https://github.com/jquery/sizzle/blob/master/src/sizzle.js#L139\nfunction funescape( _, escaped, escapedWhitespace ) {\n\tvar high = \"0x\" + escaped - 0x10000;\n\t// NaN means non-codepoint\n\t// Support: Firefox\n\t// Workaround erroneous numeric interpretation of +\"0x\"\n\treturn high !== high || escapedWhitespace ?\n\t\tescaped :\n\t\t// BMP codepoint\n\t\thigh < 0 ?\n\t\t\tString.fromCharCode( high + 0x10000 ) :\n\t\t\t// Supplemental Plane codepoint (surrogate pair)\n\t\t\tString.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\n}\n\nfunction unescapeCSS(str){\n\treturn str.replace(re_escape, funescape);\n}\n\nfunction isWhitespace(c){\n\treturn c === \" \" || c === \"\\n\" || c === \"\\t\" || c === \"\\f\" || c === \"\\r\";\n}\n\nfunction parse(selector, options){\n\tvar subselects = [];\n\n\tselector = parseSelector(subselects, selector + \"\", options);\n\n\tif(selector !== \"\"){\n\t\tthrow new SyntaxError(\"Unmatched selector: \" + selector);\n\t}\n\n\treturn subselects;\n}\n\nfunction parseSelector(subselects, selector, options){\n\tvar tokens = [],\n\t\tsawWS = false,\n\t\tdata, firstChar, name, quot;\n\n\tfunction getName(){\n\t\tvar sub = selector.match(re_name)[0];\n\t\tselector = selector.substr(sub.length);\n\t\treturn unescapeCSS(sub);\n\t}\n\n\tfunction stripWhitespace(start){\n\t\twhile(isWhitespace(selector.charAt(start))) start++;\n\t\tselector = selector.substr(start);\n\t}\n\n\tfunction isEscaped(pos) {\n\t\tvar slashCount = 0;\n\n\t\twhile (selector.charAt(--pos) === \"\\\\\") slashCount++;\n\t\treturn (slashCount & 1) === 1;\n\t}\n\n\tstripWhitespace(0);\n\n\twhile(selector !== \"\"){\n\t\tfirstChar = selector.charAt(0);\n\n\t\tif(isWhitespace(firstChar)){\n\t\t\tsawWS = true;\n\t\t\tstripWhitespace(1);\n\t\t} else if(firstChar in simpleSelectors){\n\t\t\ttokens.push({type: simpleSelectors[firstChar]});\n\t\t\tsawWS = false;\n\n\t\t\tstripWhitespace(1);\n\t\t} else if(firstChar === \",\"){\n\t\t\tif(tokens.length === 0){\n\t\t\t\tthrow new SyntaxError(\"empty sub-selector\");\n\t\t\t}\n\t\t\tsubselects.push(tokens);\n\t\t\ttokens = [];\n\t\t\tsawWS = false;\n\t\t\tstripWhitespace(1);\n\t\t} else {\n\t\t\tif(sawWS){\n\t\t\t\tif(tokens.length > 0){\n\t\t\t\t\ttokens.push({type: \"descendant\"});\n\t\t\t\t}\n\t\t\t\tsawWS = false;\n\t\t\t}\n\n\t\t\tif(firstChar === \"*\"){\n\t\t\t\tselector = selector.substr(1);\n\t\t\t\ttokens.push({type: \"universal\"});\n\t\t\t} else if(firstChar in attribSelectors){\n\t\t\t\tselector = selector.substr(1);\n\t\t\t\ttokens.push({\n\t\t\t\t\ttype: \"attribute\",\n\t\t\t\t\tname: attribSelectors[firstChar][0],\n\t\t\t\t\taction: attribSelectors[firstChar][1],\n\t\t\t\t\tvalue: getName(),\n\t\t\t\t\tignoreCase: false\n\t\t\t\t});\n\t\t\t} else if(firstChar === \"[\"){\n\t\t\t\tselector = selector.substr(1);\n\t\t\t\tdata = selector.match(re_attr);\n\t\t\t\tif(!data){\n\t\t\t\t\tthrow new SyntaxError(\"Malformed attribute selector: \" + selector);\n\t\t\t\t}\n\t\t\t\tselector = selector.substr(data[0].length);\n\t\t\t\tname = unescapeCSS(data[1]);\n\n\t\t\t\tif(\n\t\t\t\t\t!options || (\n\t\t\t\t\t\t\"lowerCaseAttributeNames\" in options ?\n\t\t\t\t\t\t\toptions.lowerCaseAttributeNames :\n\t\t\t\t\t\t\t!options.xmlMode\n\t\t\t\t\t)\n\t\t\t\t){\n\t\t\t\t\tname = name.toLowerCase();\n\t\t\t\t}\n\n\t\t\t\ttokens.push({\n\t\t\t\t\ttype: \"attribute\",\n\t\t\t\t\tname: name,\n\t\t\t\t\taction: actionTypes[data[2]],\n\t\t\t\t\tvalue: unescapeCSS(data[4] || data[5] || \"\"),\n\t\t\t\t\tignoreCase: !!data[6]\n\t\t\t\t});\n\n\t\t\t} else if(firstChar === \":\"){\n\t\t\t\tif(selector.charAt(1) === \":\"){\n\t\t\t\t\tselector = selector.substr(2);\n\t\t\t\t\ttokens.push({type: \"pseudo-element\", name: getName().toLowerCase()});\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tselector = selector.substr(1);\n\n\t\t\t\tname = getName().toLowerCase();\n\t\t\t\tdata = null;\n\n\t\t\t\tif(selector.charAt(0) === \"(\"){\n\t\t\t\t\tif(name in unpackPseudos){\n\t\t\t\t\t\tquot = selector.charAt(1);\n\t\t\t\t\t\tvar quoted = quot in quotes;\n\n\t\t\t\t\t\tselector = selector.substr(quoted + 1);\n\n\t\t\t\t\t\tdata = [];\n\t\t\t\t\t\tselector = parseSelector(data, selector, options);\n\n\t\t\t\t\t\tif(quoted){\n\t\t\t\t\t\t\tif(selector.charAt(0) !== quot){\n\t\t\t\t\t\t\t\tthrow new SyntaxError(\"unmatched quotes in :\" + name);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tselector = selector.substr(1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif(selector.charAt(0) !== \")\"){\n\t\t\t\t\t\t\tthrow new SyntaxError(\"missing closing parenthesis in :\" + name + \" \" + selector);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tselector = selector.substr(1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar pos = 1, counter = 1;\n\n\t\t\t\t\t\tfor(; counter > 0 && pos < selector.length; pos++){\n\t\t\t\t\t\t\tif(selector.charAt(pos) === \"(\" && !isEscaped(pos)) counter++;\n\t\t\t\t\t\t\telse if(selector.charAt(pos) === \")\" && !isEscaped(pos)) counter--;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif(counter){\n\t\t\t\t\t\t\tthrow new SyntaxError(\"parenthesis not matched\");\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdata = selector.substr(1, pos - 2);\n\t\t\t\t\t\tselector = selector.substr(pos);\n\n\t\t\t\t\t\tif(name in stripQuotesFromPseudos){\n\t\t\t\t\t\t\tquot = data.charAt(0);\n\n\t\t\t\t\t\t\tif(quot === data.slice(-1) && quot in quotes){\n\t\t\t\t\t\t\t\tdata = data.slice(1, -1);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tdata = unescapeCSS(data);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttokens.push({type: \"pseudo\", name: name, data: data});\n\t\t\t} else if(re_name.test(selector)){\n\t\t\t\tname = getName();\n\n\t\t\t\tif(!options || (\"lowerCaseTags\" in options ? options.lowerCaseTags : !options.xmlMode)){\n\t\t\t\t\tname = name.toLowerCase();\n\t\t\t\t}\n\n\t\t\t\ttokens.push({type: \"tag\", name: name});\n\t\t\t} else {\n\t\t\t\tif(tokens.length && tokens[tokens.length - 1].type === \"descendant\"){\n\t\t\t\t\ttokens.pop();\n\t\t\t\t}\n\t\t\t\taddToken(subselects, tokens);\n\t\t\t\treturn selector;\n\t\t\t}\n\t\t}\n\t}\n\n\taddToken(subselects, tokens);\n\n\treturn selector;\n}\n\nfunction addToken(subselects, tokens){\n\tif(subselects.length > 0 && tokens.length === 0){\n\t\tthrow new SyntaxError(\"empty sub-selector\");\n\t}\n\n\tsubselects.push(tokens);\n}\n","module.exports = sortByProcedure;\n\n/*\n\tsort the parts of the passed selector,\n\tas there is potential for optimization\n\t(some types of selectors are faster than others)\n*/\n\nvar procedure = require(\"./procedure.json\");\n\nvar attributes = {\n    __proto__: null,\n    exists: 10,\n    equals: 8,\n    not: 7,\n    start: 6,\n    end: 6,\n    any: 5,\n    hyphen: 4,\n    element: 4\n};\n\nfunction sortByProcedure(arr) {\n    var procs = arr.map(getProcedure);\n    for (var i = 1; i < arr.length; i++) {\n        var procNew = procs[i];\n\n        if (procNew < 0) continue;\n\n        for (var j = i - 1; j >= 0 && procNew < procs[j]; j--) {\n            var token = arr[j + 1];\n            arr[j + 1] = arr[j];\n            arr[j] = token;\n            procs[j + 1] = procs[j];\n            procs[j] = procNew;\n        }\n    }\n}\n\nfunction getProcedure(token) {\n    var proc = procedure[token.type];\n\n    if (proc === procedure.attribute) {\n        proc = attributes[token.action];\n\n        if (proc === attributes.equals && token.name === \"id\") {\n            //prefer ID selectors (eg. #ID)\n            proc = 9;\n        }\n\n        if (token.ignoreCase) {\n            //ignoreCase adds some overhead, prefer \"normal\" token\n            //this is a binary operation, to ensure it's still an int\n            proc >>= 1;\n        }\n    } else if (proc === procedure.pseudo) {\n        if (!token.data) {\n            proc = 3;\n        } else if (token.name === \"has\" || token.name === \"contains\") {\n            proc = 0; //expensive in any case\n        } else if (token.name === \"matches\" || token.name === \"not\") {\n            proc = 0;\n            for (var i = 0; i < token.data.length; i++) {\n                //TODO better handling of complex selectors\n                if (token.data[i].length !== 1) continue;\n                var cur = getProcedure(token.data[i][0]);\n                //avoid executing :has or :contains\n                if (cur === 0) {\n                    proc = 0;\n                    break;\n                }\n                if (cur > proc) proc = cur;\n            }\n            if (token.data.length > 1 && proc > 0) proc -= 1;\n        } else {\n            proc = 1;\n        }\n    }\n    return proc;\n}\n","/*\n\tpseudo selectors\n\n\t---\n\n\tthey are available in two forms:\n\t* filters called when the selector\n\t  is compiled and return a function\n\t  that needs to return next()\n\t* pseudos get called on execution\n\t  they need to return a boolean\n*/\n\nvar getNCheck = require(\"nth-check\");\nvar BaseFuncs = require(\"boolbase\");\nvar attributes = require(\"./attributes.js\");\nvar trueFunc = BaseFuncs.trueFunc;\nvar falseFunc = BaseFuncs.falseFunc;\n\nvar checkAttrib = attributes.rules.equals;\n\nfunction getAttribFunc(name, value) {\n    var data = { name: name, value: value };\n    return function attribFunc(next, rule, options) {\n        return checkAttrib(next, data, options);\n    };\n}\n\nfunction getChildFunc(next, adapter) {\n    return function(elem) {\n        return !!adapter.getParent(elem) && next(elem);\n    };\n}\n\nvar filters = {\n    contains: function(next, text, options) {\n        var adapter = options.adapter;\n\n        return function contains(elem) {\n            return next(elem) && adapter.getText(elem).indexOf(text) >= 0;\n        };\n    },\n    icontains: function(next, text, options) {\n        var itext = text.toLowerCase();\n        var adapter = options.adapter;\n\n        return function icontains(elem) {\n            return (\n                next(elem) &&\n                adapter\n                    .getText(elem)\n                    .toLowerCase()\n                    .indexOf(itext) >= 0\n            );\n        };\n    },\n\n    //location specific methods\n    \"nth-child\": function(next, rule, options) {\n        var func = getNCheck(rule);\n        var adapter = options.adapter;\n\n        if (func === falseFunc) return func;\n        if (func === trueFunc) return getChildFunc(next, adapter);\n\n        return function nthChild(elem) {\n            var siblings = adapter.getSiblings(elem);\n\n            for (var i = 0, pos = 0; i < siblings.length; i++) {\n                if (adapter.isTag(siblings[i])) {\n                    if (siblings[i] === elem) break;\n                    else pos++;\n                }\n            }\n\n            return func(pos) && next(elem);\n        };\n    },\n    \"nth-last-child\": function(next, rule, options) {\n        var func = getNCheck(rule);\n        var adapter = options.adapter;\n\n        if (func === falseFunc) return func;\n        if (func === trueFunc) return getChildFunc(next, adapter);\n\n        return function nthLastChild(elem) {\n            var siblings = adapter.getSiblings(elem);\n\n            for (var pos = 0, i = siblings.length - 1; i >= 0; i--) {\n                if (adapter.isTag(siblings[i])) {\n                    if (siblings[i] === elem) break;\n                    else pos++;\n                }\n            }\n\n            return func(pos) && next(elem);\n        };\n    },\n    \"nth-of-type\": function(next, rule, options) {\n        var func = getNCheck(rule);\n        var adapter = options.adapter;\n\n        if (func === falseFunc) return func;\n        if (func === trueFunc) return getChildFunc(next, adapter);\n\n        return function nthOfType(elem) {\n            var siblings = adapter.getSiblings(elem);\n\n            for (var pos = 0, i = 0; i < siblings.length; i++) {\n                if (adapter.isTag(siblings[i])) {\n                    if (siblings[i] === elem) break;\n                    if (adapter.getName(siblings[i]) === adapter.getName(elem)) pos++;\n                }\n            }\n\n            return func(pos) && next(elem);\n        };\n    },\n    \"nth-last-of-type\": function(next, rule, options) {\n        var func = getNCheck(rule);\n        var adapter = options.adapter;\n\n        if (func === falseFunc) return func;\n        if (func === trueFunc) return getChildFunc(next, adapter);\n\n        return function nthLastOfType(elem) {\n            var siblings = adapter.getSiblings(elem);\n\n            for (var pos = 0, i = siblings.length - 1; i >= 0; i--) {\n                if (adapter.isTag(siblings[i])) {\n                    if (siblings[i] === elem) break;\n                    if (adapter.getName(siblings[i]) === adapter.getName(elem)) pos++;\n                }\n            }\n\n            return func(pos) && next(elem);\n        };\n    },\n\n    //TODO determine the actual root element\n    root: function(next, rule, options) {\n        var adapter = options.adapter;\n\n        return function(elem) {\n            return !adapter.getParent(elem) && next(elem);\n        };\n    },\n\n    scope: function(next, rule, options, context) {\n        var adapter = options.adapter;\n\n        if (!context || context.length === 0) {\n            //equivalent to :root\n            return filters.root(next, rule, options);\n        }\n\n        function equals(a, b) {\n            if (typeof adapter.equals === \"function\") return adapter.equals(a, b);\n\n            return a === b;\n        }\n\n        if (context.length === 1) {\n            //NOTE: can't be unpacked, as :has uses this for side-effects\n            return function(elem) {\n                return equals(context[0], elem) && next(elem);\n            };\n        }\n\n        return function(elem) {\n            return context.indexOf(elem) >= 0 && next(elem);\n        };\n    },\n\n    //jQuery extensions (others follow as pseudos)\n    checkbox: getAttribFunc(\"type\", \"checkbox\"),\n    file: getAttribFunc(\"type\", \"file\"),\n    password: getAttribFunc(\"type\", \"password\"),\n    radio: getAttribFunc(\"type\", \"radio\"),\n    reset: getAttribFunc(\"type\", \"reset\"),\n    image: getAttribFunc(\"type\", \"image\"),\n    submit: getAttribFunc(\"type\", \"submit\")\n};\n\n//helper methods\nfunction getFirstElement(elems, adapter) {\n    for (var i = 0; elems && i < elems.length; i++) {\n        if (adapter.isTag(elems[i])) return elems[i];\n    }\n}\n\n//while filters are precompiled, pseudos get called when they are needed\nvar pseudos = {\n    empty: function(elem, adapter) {\n        return !adapter.getChildren(elem).some(function(elem) {\n            return adapter.isTag(elem) || elem.type === \"text\";\n        });\n    },\n\n    \"first-child\": function(elem, adapter) {\n        return getFirstElement(adapter.getSiblings(elem), adapter) === elem;\n    },\n    \"last-child\": function(elem, adapter) {\n        var siblings = adapter.getSiblings(elem);\n\n        for (var i = siblings.length - 1; i >= 0; i--) {\n            if (siblings[i] === elem) return true;\n            if (adapter.isTag(siblings[i])) break;\n        }\n\n        return false;\n    },\n    \"first-of-type\": function(elem, adapter) {\n        var siblings = adapter.getSiblings(elem);\n\n        for (var i = 0; i < siblings.length; i++) {\n            if (adapter.isTag(siblings[i])) {\n                if (siblings[i] === elem) return true;\n                if (adapter.getName(siblings[i]) === adapter.getName(elem)) break;\n            }\n        }\n\n        return false;\n    },\n    \"last-of-type\": function(elem, adapter) {\n        var siblings = adapter.getSiblings(elem);\n\n        for (var i = siblings.length - 1; i >= 0; i--) {\n            if (adapter.isTag(siblings[i])) {\n                if (siblings[i] === elem) return true;\n                if (adapter.getName(siblings[i]) === adapter.getName(elem)) break;\n            }\n        }\n\n        return false;\n    },\n    \"only-of-type\": function(elem, adapter) {\n        var siblings = adapter.getSiblings(elem);\n\n        for (var i = 0, j = siblings.length; i < j; i++) {\n            if (adapter.isTag(siblings[i])) {\n                if (siblings[i] === elem) continue;\n                if (adapter.getName(siblings[i]) === adapter.getName(elem)) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    },\n    \"only-child\": function(elem, adapter) {\n        var siblings = adapter.getSiblings(elem);\n\n        for (var i = 0; i < siblings.length; i++) {\n            if (adapter.isTag(siblings[i]) && siblings[i] !== elem) return false;\n        }\n\n        return true;\n    },\n\n    //:matches(a, area, link)[href]\n    link: function(elem, adapter) {\n        return adapter.hasAttrib(elem, \"href\");\n    },\n    visited: falseFunc, //Valid implementation\n    //TODO: :any-link once the name is finalized (as an alias of :link)\n\n    //forms\n    //to consider: :target\n\n    //:matches([selected], select:not([multiple]):not(> option[selected]) > option:first-of-type)\n    selected: function(elem, adapter) {\n        if (adapter.hasAttrib(elem, \"selected\")) return true;\n        else if (adapter.getName(elem) !== \"option\") return false;\n\n        //the first <option> in a <select> is also selected\n        var parent = adapter.getParent(elem);\n\n        if (!parent || adapter.getName(parent) !== \"select\" || adapter.hasAttrib(parent, \"multiple\")) {\n            return false;\n        }\n\n        var siblings = adapter.getChildren(parent);\n        var sawElem = false;\n\n        for (var i = 0; i < siblings.length; i++) {\n            if (adapter.isTag(siblings[i])) {\n                if (siblings[i] === elem) {\n                    sawElem = true;\n                } else if (!sawElem) {\n                    return false;\n                } else if (adapter.hasAttrib(siblings[i], \"selected\")) {\n                    return false;\n                }\n            }\n        }\n\n        return sawElem;\n    },\n    //https://html.spec.whatwg.org/multipage/scripting.html#disabled-elements\n    //:matches(\n    //  :matches(button, input, select, textarea, menuitem, optgroup, option)[disabled],\n    //  optgroup[disabled] > option),\n    // fieldset[disabled] * //TODO not child of first <legend>\n    //)\n    disabled: function(elem, adapter) {\n        return adapter.hasAttrib(elem, \"disabled\");\n    },\n    enabled: function(elem, adapter) {\n        return !adapter.hasAttrib(elem, \"disabled\");\n    },\n    //:matches(:matches(:radio, :checkbox)[checked], :selected) (TODO menuitem)\n    checked: function(elem, adapter) {\n        return adapter.hasAttrib(elem, \"checked\") || pseudos.selected(elem, adapter);\n    },\n    //:matches(input, select, textarea)[required]\n    required: function(elem, adapter) {\n        return adapter.hasAttrib(elem, \"required\");\n    },\n    //:matches(input, select, textarea):not([required])\n    optional: function(elem, adapter) {\n        return !adapter.hasAttrib(elem, \"required\");\n    },\n\n    //jQuery extensions\n\n    //:not(:empty)\n    parent: function(elem, adapter) {\n        return !pseudos.empty(elem, adapter);\n    },\n    //:matches(h1, h2, h3, h4, h5, h6)\n    header: namePseudo([\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"]),\n\n    //:matches(button, input[type=button])\n    button: function(elem, adapter) {\n        var name = adapter.getName(elem);\n        return (\n            name === \"button\" || (name === \"input\" && adapter.getAttributeValue(elem, \"type\") === \"button\")\n        );\n    },\n    //:matches(input, textarea, select, button)\n    input: namePseudo([\"input\", \"textarea\", \"select\", \"button\"]),\n    //input:matches(:not([type!='']), [type='text' i])\n    text: function(elem, adapter) {\n        var attr;\n        return (\n            adapter.getName(elem) === \"input\" &&\n            (!(attr = adapter.getAttributeValue(elem, \"type\")) || attr.toLowerCase() === \"text\")\n        );\n    }\n};\n\nfunction namePseudo(names) {\n    if (typeof Set !== \"undefined\") {\n        // eslint-disable-next-line no-undef\n        var nameSet = new Set(names);\n\n        return function(elem, adapter) {\n            return nameSet.has(adapter.getName(elem));\n        };\n    }\n\n    return function(elem, adapter) {\n        return names.indexOf(adapter.getName(elem)) >= 0;\n    };\n}\n\nfunction verifyArgs(func, name, subselect) {\n    if (subselect === null) {\n        if (func.length > 2 && name !== \"scope\") {\n            throw new Error(\"pseudo-selector :\" + name + \" requires an argument\");\n        }\n    } else {\n        if (func.length === 2) {\n            throw new Error(\"pseudo-selector :\" + name + \" doesn't have any arguments\");\n        }\n    }\n}\n\n//FIXME this feels hacky\nvar re_CSS3 = /^(?:(?:nth|last|first|only)-(?:child|of-type)|root|empty|(?:en|dis)abled|checked|not)$/;\n\nmodule.exports = {\n    compile: function(next, data, options, context) {\n        var name = data.name;\n        var subselect = data.data;\n        var adapter = options.adapter;\n\n        if (options && options.strict && !re_CSS3.test(name)) {\n            throw new Error(\":\" + name + \" isn't part of CSS3\");\n        }\n\n        if (typeof filters[name] === \"function\") {\n            return filters[name](next, subselect, options, context);\n        } else if (typeof pseudos[name] === \"function\") {\n            var func = pseudos[name];\n            verifyArgs(func, name, subselect);\n\n            if (func === falseFunc) {\n                return func;\n            }\n\n            if (next === trueFunc) {\n                return function pseudoRoot(elem) {\n                    return func(elem, adapter, subselect);\n                };\n            }\n\n            return function pseudoArgs(elem) {\n                return func(elem, adapter, subselect) && next(elem);\n            };\n        } else {\n            throw new Error(\"unmatched pseudo-class :\" + name);\n        }\n    },\n    filters: filters,\n    pseudos: pseudos\n};\n","/*\n\tcompiles a selector to an executable function\n*/\n\nmodule.exports = compile;\n\nvar parse = require(\"css-what\");\nvar BaseFuncs = require(\"boolbase\");\nvar sortRules = require(\"./sort.js\");\nvar procedure = require(\"./procedure.json\");\nvar Rules = require(\"./general.js\");\nvar Pseudos = require(\"./pseudos.js\");\nvar trueFunc = BaseFuncs.trueFunc;\nvar falseFunc = BaseFuncs.falseFunc;\n\nvar filters = Pseudos.filters;\n\nfunction compile(selector, options, context) {\n    var next = compileUnsafe(selector, options, context);\n    return wrap(next, options);\n}\n\nfunction wrap(next, options) {\n    var adapter = options.adapter;\n\n    return function base(elem) {\n        return adapter.isTag(elem) && next(elem);\n    };\n}\n\nfunction compileUnsafe(selector, options, context) {\n    var token = parse(selector, options);\n    return compileToken(token, options, context);\n}\n\nfunction includesScopePseudo(t) {\n    return (\n        t.type === \"pseudo\" &&\n        (t.name === \"scope\" ||\n            (Array.isArray(t.data) &&\n                t.data.some(function(data) {\n                    return data.some(includesScopePseudo);\n                })))\n    );\n}\n\nvar DESCENDANT_TOKEN = { type: \"descendant\" };\nvar FLEXIBLE_DESCENDANT_TOKEN = { type: \"_flexibleDescendant\" };\nvar SCOPE_TOKEN = { type: \"pseudo\", name: \"scope\" };\nvar PLACEHOLDER_ELEMENT = {};\n\n//CSS 4 Spec (Draft): 3.3.1. Absolutizing a Scope-relative Selector\n//http://www.w3.org/TR/selectors4/#absolutizing\nfunction absolutize(token, options, context) {\n    var adapter = options.adapter;\n\n    //TODO better check if context is document\n    var hasContext =\n        !!context &&\n        !!context.length &&\n        context.every(function(e) {\n            return e === PLACEHOLDER_ELEMENT || !!adapter.getParent(e);\n        });\n\n    token.forEach(function(t) {\n        if (t.length > 0 && isTraversal(t[0]) && t[0].type !== \"descendant\") {\n            //don't return in else branch\n        } else if (hasContext && !includesScopePseudo(t)) {\n            t.unshift(DESCENDANT_TOKEN);\n        } else {\n            return;\n        }\n\n        t.unshift(SCOPE_TOKEN);\n    });\n}\n\nfunction compileToken(token, options, context) {\n    token = token.filter(function(t) {\n        return t.length > 0;\n    });\n\n    token.forEach(sortRules);\n\n    var isArrayContext = Array.isArray(context);\n\n    context = (options && options.context) || context;\n\n    if (context && !isArrayContext) context = [context];\n\n    absolutize(token, options, context);\n\n    var shouldTestNextSiblings = false;\n\n    var query = token\n        .map(function(rules) {\n            if (rules[0] && rules[1] && rules[0].name === \"scope\") {\n                var ruleType = rules[1].type;\n                if (isArrayContext && ruleType === \"descendant\") {\n                    rules[1] = FLEXIBLE_DESCENDANT_TOKEN;\n                } else if (ruleType === \"adjacent\" || ruleType === \"sibling\") {\n                    shouldTestNextSiblings = true;\n                }\n            }\n            return compileRules(rules, options, context);\n        })\n        .reduce(reduceRules, falseFunc);\n\n    query.shouldTestNextSiblings = shouldTestNextSiblings;\n\n    return query;\n}\n\nfunction isTraversal(t) {\n    return procedure[t.type] < 0;\n}\n\nfunction compileRules(rules, options, context) {\n    return rules.reduce(function(func, rule) {\n        if (func === falseFunc) return func;\n\n        if (!(rule.type in Rules)) {\n            throw new Error(\"Rule type \" + rule.type + \" is not supported by css-select\");\n        }\n\n        return Rules[rule.type](func, rule, options, context);\n    }, (options && options.rootFunc) || trueFunc);\n}\n\nfunction reduceRules(a, b) {\n    if (b === falseFunc || a === trueFunc) {\n        return a;\n    }\n    if (a === falseFunc || b === trueFunc) {\n        return b;\n    }\n\n    return function combine(elem) {\n        return a(elem) || b(elem);\n    };\n}\n\nfunction containsTraversal(t) {\n    return t.some(isTraversal);\n}\n\n//:not, :has and :matches have to compile selectors\n//doing this in lib/pseudos.js would lead to circular dependencies,\n//so we add them here\nfilters.not = function(next, token, options, context) {\n    var opts = {\n        xmlMode: !!(options && options.xmlMode),\n        strict: !!(options && options.strict),\n        adapter: options.adapter\n    };\n\n    if (opts.strict) {\n        if (token.length > 1 || token.some(containsTraversal)) {\n            throw new Error(\"complex selectors in :not aren't allowed in strict mode\");\n        }\n    }\n\n    var func = compileToken(token, opts, context);\n\n    if (func === falseFunc) return next;\n    if (func === trueFunc) return falseFunc;\n\n    return function not(elem) {\n        return !func(elem) && next(elem);\n    };\n};\n\nfilters.has = function(next, token, options) {\n    var adapter = options.adapter;\n    var opts = {\n        xmlMode: !!(options && options.xmlMode),\n        strict: !!(options && options.strict),\n        adapter: adapter\n    };\n\n    //FIXME: Uses an array as a pointer to the current element (side effects)\n    var context = token.some(containsTraversal) ? [PLACEHOLDER_ELEMENT] : null;\n\n    var func = compileToken(token, opts, context);\n\n    if (func === falseFunc) return falseFunc;\n    if (func === trueFunc) {\n        return function hasChild(elem) {\n            return adapter.getChildren(elem).some(adapter.isTag) && next(elem);\n        };\n    }\n\n    func = wrap(func, options);\n\n    if (context) {\n        return function has(elem) {\n            return next(elem) && ((context[0] = elem), adapter.existsOne(func, adapter.getChildren(elem)));\n        };\n    }\n\n    return function has(elem) {\n        return next(elem) && adapter.existsOne(func, adapter.getChildren(elem));\n    };\n};\n\nfilters.matches = function(next, token, options, context) {\n    var opts = {\n        xmlMode: !!(options && options.xmlMode),\n        strict: !!(options && options.strict),\n        rootFunc: next,\n        adapter: options.adapter\n    };\n\n    return compileToken(token, opts, context);\n};\n\ncompile.compileToken = compileToken;\ncompile.compileUnsafe = compileUnsafe;\ncompile.Pseudos = Pseudos;\n","\"use strict\";\n\nmodule.exports = CSSselect;\n\nvar DomUtils = require(\"domutils\");\nvar falseFunc = require(\"boolbase\").falseFunc;\nvar compileRaw = require(\"./lib/compile.js\");\n\nfunction wrapCompile(func) {\n    return function addAdapter(selector, options, context) {\n        options = options || {};\n        options.adapter = options.adapter || DomUtils;\n\n        return func(selector, options, context);\n    };\n}\n\nvar compile = wrapCompile(compileRaw);\nvar compileUnsafe = wrapCompile(compileRaw.compileUnsafe);\n\nfunction getSelectorFunc(searchFunc) {\n    return function select(query, elems, options) {\n        options = options || {};\n        options.adapter = options.adapter || DomUtils;\n\n        if (typeof query !== \"function\") {\n            query = compileUnsafe(query, options, elems);\n        }\n        if (query.shouldTestNextSiblings) {\n            elems = appendNextSiblings((options && options.context) || elems, options.adapter);\n        }\n        if (!Array.isArray(elems)) elems = options.adapter.getChildren(elems);\n        else elems = options.adapter.removeSubsets(elems);\n        return searchFunc(query, elems, options);\n    };\n}\n\nfunction getNextSiblings(elem, adapter) {\n    var siblings = adapter.getSiblings(elem);\n    if (!Array.isArray(siblings)) return [];\n    siblings = siblings.slice(0);\n    while (siblings.shift() !== elem);\n    return siblings;\n}\n\nfunction appendNextSiblings(elems, adapter) {\n    // Order matters because jQuery seems to check the children before the siblings\n    if (!Array.isArray(elems)) elems = [elems];\n    var newElems = elems.slice(0);\n\n    for (var i = 0, len = elems.length; i < len; i++) {\n        var nextSiblings = getNextSiblings(newElems[i], adapter);\n        newElems.push.apply(newElems, nextSiblings);\n    }\n    return newElems;\n}\n\nvar selectAll = getSelectorFunc(function selectAll(query, elems, options) {\n    return query === falseFunc || !elems || elems.length === 0 ? [] : options.adapter.findAll(query, elems);\n});\n\nvar selectOne = getSelectorFunc(function selectOne(query, elems, options) {\n    return query === falseFunc || !elems || elems.length === 0 ? null : options.adapter.findOne(query, elems);\n});\n\nfunction is(elem, query, options) {\n    options = options || {};\n    options.adapter = options.adapter || DomUtils;\n    return (typeof query === \"function\" ? query : compile(query, options))(elem);\n}\n\n/*\n\tthe exported interface\n*/\nfunction CSSselect(query, elems, options) {\n    return selectAll(query, elems, options);\n}\n\nCSSselect.compile = compile;\nCSSselect.filters = compileRaw.Pseudos.filters;\nCSSselect.pseudos = compileRaw.Pseudos.pseudos;\n\nCSSselect.selectAll = selectAll;\nCSSselect.selectOne = selectOne;\n\nCSSselect.is = is;\n\n//legacy methods (might be removed)\nCSSselect.parse = compile;\nCSSselect.iterate = selectAll;\n\n//hooks\nCSSselect._compileUnsafe = compileUnsafe;\nCSSselect._compileToken = compileRaw.compileToken;\n","'use strict'\n\nmodule.exports = adapterFactory;\n\nfunction adapterFactory(implementation){\n\tensureImplementation(implementation);\n\n\tvar adapter = {}\n\n\tvar baseAdapter = {\n\t\tremoveSubsets: function (nodes){\n\t\t\treturn removeSubsets(adapter, nodes);\n\t\t},\n\t\texistsOne: function(test, elems){\n\t\t\treturn existsOne(adapter, test, elems);\n\t\t},\n\t\tgetSiblings: function(elem){\n\t\t\treturn getSiblings(adapter, elem);\n\t\t},\n\t\thasAttrib: function(elem, name){\n\t\t\treturn hasAttrib(adapter, elem, name);\n\t\t},\n\t\tfindOne: function(test, arr){\n\t\t\treturn findOne(adapter, test, arr);\n\t\t},\n\t\tfindAll: function(test, elems){\n\t\t\treturn findAll(adapter, test, elems)\n\t\t}\n\t};\n\n\tObject.assign(adapter, baseAdapter, implementation);\n\n\treturn adapter;\n}\n\nvar expectImplemented = [\n\t\"isTag\", \"getAttributeValue\", \"getChildren\", \"getName\", \"getParent\",\n\t\"getText\"\n];\n\nfunction ensureImplementation(implementation){\n\tif(!implementation)\tthrow new TypeError(\"Expected implementation\")\n\n\tvar notImplemented = expectImplemented.filter(function(fname){\n\t\treturn typeof implementation[fname] !== \"function\";\n\t});\n\n\tif(notImplemented.length){\n\t\tvar notList = \"(\" + notImplemented.join(\", \") + \")\";\n\t\tvar message = \"Expected functions \" + notList + \" to be implemented\";\n\t\tthrow new Error(message);\n\t}\n}\n\nfunction removeSubsets(adapter, nodes){\n\tvar idx = nodes.length, node, ancestor, replace;\n\n\t// Check if each node (or one of its ancestors) is already contained in the\n\t// array.\n\twhile(--idx > -1){\n\t\tnode = ancestor = nodes[idx];\n\n\t\t// Temporarily remove the node under consideration\n\t\tnodes[idx] = null;\n\t\treplace = true;\n\n\t\twhile(ancestor){\n\t\t\tif(nodes.indexOf(ancestor) > -1){\n\t\t\t\treplace = false;\n\t\t\t\tnodes.splice(idx, 1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tancestor = adapter.getParent(ancestor)\n\t\t}\n\n\t\t// If the node has been found to be unique, re-insert it.\n\t\tif(replace){\n\t\t\tnodes[idx] = node;\n\t\t}\n\t}\n\n\treturn nodes;\n}\n\nfunction existsOne(adapter, test, elems){\n\treturn elems.some(function(elem){\n\t\treturn adapter.isTag(elem) ?\n\t\t\ttest(elem) || adapter.existsOne(test, adapter.getChildren(elem)) :\n\t\t\tfalse;\n\t});\n}\n\nfunction getSiblings(adapter, elem){\n\tvar parent = adapter.getParent(elem);\n\treturn parent && adapter.getChildren(parent);\n}\n\n\nfunction hasAttrib(adapter, elem, name){\n\treturn adapter.getAttributeValue(elem,name) !== undefined\n}\n\nfunction findOne(adapter, test, arr){\n\tvar elem = null;\n\n\tfor(var i = 0, l = arr.length; i < l && !elem; i++){\n\t\tif(test(arr[i])){\n\t\t\telem = arr[i];\n\t\t} else {\n\t\t\tvar childs = adapter.getChildren(arr[i]);\n\t\t\tif(childs && childs.length > 0){\n\t\t\t\telem = adapter.findOne(test, childs);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn elem;\n}\n\nfunction findAll(adapter, test, elems){\n\tvar result = [];\n\n\tfor(var i = 0, j = elems.length; i < j; i++){\n\t\tif(!adapter.isTag(elems[i])) continue;\n\t\tif(test(elems[i])) result.push(elems[i]);\n\t\tvar childs = adapter.getChildren(elems[i]);\n\t\tif(childs) result = result.concat(adapter.findAll(test, childs));\n\t}\n\n\treturn result;\n}\n","'use strict';\n\n//\n//            item        item        item        item\n//          /------\\    /------\\    /------\\    /------\\\n//          | data |    | data |    | data |    | data |\n//  null <--+-prev |<---+-prev |<---+-prev |<---+-prev |\n//          | next-+--->| next-+--->| next-+--->| next-+--> null\n//          \\------/    \\------/    \\------/    \\------/\n//             ^                                    ^\n//             |                list                |\n//             |              /------\\              |\n//             \\--------------+-head |              |\n//                            | tail-+--------------/\n//                            \\------/\n//\n\nfunction createItem(data) {\n    return {\n        prev: null,\n        next: null,\n        data: data\n    };\n}\n\nfunction allocateCursor(node, prev, next) {\n    var cursor;\n\n    if (cursors !== null) {\n        cursor = cursors;\n        cursors = cursors.cursor;\n        cursor.prev = prev;\n        cursor.next = next;\n        cursor.cursor = node.cursor;\n    } else {\n        cursor = {\n            prev: prev,\n            next: next,\n            cursor: node.cursor\n        };\n    }\n\n    node.cursor = cursor;\n\n    return cursor;\n}\n\nfunction releaseCursor(node) {\n    var cursor = node.cursor;\n\n    node.cursor = cursor.cursor;\n    cursor.prev = null;\n    cursor.next = null;\n    cursor.cursor = cursors;\n    cursors = cursor;\n}\n\nvar cursors = null;\nvar List = function() {\n    this.cursor = null;\n    this.head = null;\n    this.tail = null;\n};\n\nList.createItem = createItem;\nList.prototype.createItem = createItem;\n\nList.prototype.updateCursors = function(prevOld, prevNew, nextOld, nextNew) {\n    var cursor = this.cursor;\n\n    while (cursor !== null) {\n        if (cursor.prev === prevOld) {\n            cursor.prev = prevNew;\n        }\n\n        if (cursor.next === nextOld) {\n            cursor.next = nextNew;\n        }\n\n        cursor = cursor.cursor;\n    }\n};\n\nList.prototype.getSize = function() {\n    var size = 0;\n    var cursor = this.head;\n\n    while (cursor) {\n        size++;\n        cursor = cursor.next;\n    }\n\n    return size;\n};\n\nList.prototype.fromArray = function(array) {\n    var cursor = null;\n\n    this.head = null;\n\n    for (var i = 0; i < array.length; i++) {\n        var item = createItem(array[i]);\n\n        if (cursor !== null) {\n            cursor.next = item;\n        } else {\n            this.head = item;\n        }\n\n        item.prev = cursor;\n        cursor = item;\n    }\n\n    this.tail = cursor;\n\n    return this;\n};\n\nList.prototype.toArray = function() {\n    var cursor = this.head;\n    var result = [];\n\n    while (cursor) {\n        result.push(cursor.data);\n        cursor = cursor.next;\n    }\n\n    return result;\n};\n\nList.prototype.toJSON = List.prototype.toArray;\n\nList.prototype.isEmpty = function() {\n    return this.head === null;\n};\n\nList.prototype.first = function() {\n    return this.head && this.head.data;\n};\n\nList.prototype.last = function() {\n    return this.tail && this.tail.data;\n};\n\nList.prototype.each = function(fn, context) {\n    var item;\n\n    if (context === undefined) {\n        context = this;\n    }\n\n    // push cursor\n    var cursor = allocateCursor(this, null, this.head);\n\n    while (cursor.next !== null) {\n        item = cursor.next;\n        cursor.next = item.next;\n\n        fn.call(context, item.data, item, this);\n    }\n\n    // pop cursor\n    releaseCursor(this);\n};\n\nList.prototype.forEach = List.prototype.each;\n\nList.prototype.eachRight = function(fn, context) {\n    var item;\n\n    if (context === undefined) {\n        context = this;\n    }\n\n    // push cursor\n    var cursor = allocateCursor(this, this.tail, null);\n\n    while (cursor.prev !== null) {\n        item = cursor.prev;\n        cursor.prev = item.prev;\n\n        fn.call(context, item.data, item, this);\n    }\n\n    // pop cursor\n    releaseCursor(this);\n};\n\nList.prototype.forEachRight = List.prototype.eachRight;\n\nList.prototype.nextUntil = function(start, fn, context) {\n    if (start === null) {\n        return;\n    }\n\n    var item;\n\n    if (context === undefined) {\n        context = this;\n    }\n\n    // push cursor\n    var cursor = allocateCursor(this, null, start);\n\n    while (cursor.next !== null) {\n        item = cursor.next;\n        cursor.next = item.next;\n\n        if (fn.call(context, item.data, item, this)) {\n            break;\n        }\n    }\n\n    // pop cursor\n    releaseCursor(this);\n};\n\nList.prototype.prevUntil = function(start, fn, context) {\n    if (start === null) {\n        return;\n    }\n\n    var item;\n\n    if (context === undefined) {\n        context = this;\n    }\n\n    // push cursor\n    var cursor = allocateCursor(this, start, null);\n\n    while (cursor.prev !== null) {\n        item = cursor.prev;\n        cursor.prev = item.prev;\n\n        if (fn.call(context, item.data, item, this)) {\n            break;\n        }\n    }\n\n    // pop cursor\n    releaseCursor(this);\n};\n\nList.prototype.some = function(fn, context) {\n    var cursor = this.head;\n\n    if (context === undefined) {\n        context = this;\n    }\n\n    while (cursor !== null) {\n        if (fn.call(context, cursor.data, cursor, this)) {\n            return true;\n        }\n\n        cursor = cursor.next;\n    }\n\n    return false;\n};\n\nList.prototype.map = function(fn, context) {\n    var result = new List();\n    var cursor = this.head;\n\n    if (context === undefined) {\n        context = this;\n    }\n\n    while (cursor !== null) {\n        result.appendData(fn.call(context, cursor.data, cursor, this));\n        cursor = cursor.next;\n    }\n\n    return result;\n};\n\nList.prototype.filter = function(fn, context) {\n    var result = new List();\n    var cursor = this.head;\n\n    if (context === undefined) {\n        context = this;\n    }\n\n    while (cursor !== null) {\n        if (fn.call(context, cursor.data, cursor, this)) {\n            result.appendData(cursor.data);\n        }\n        cursor = cursor.next;\n    }\n\n    return result;\n};\n\nList.prototype.clear = function() {\n    this.head = null;\n    this.tail = null;\n};\n\nList.prototype.copy = function() {\n    var result = new List();\n    var cursor = this.head;\n\n    while (cursor !== null) {\n        result.insert(createItem(cursor.data));\n        cursor = cursor.next;\n    }\n\n    return result;\n};\n\nList.prototype.prepend = function(item) {\n    //      head\n    //    ^\n    // item\n    this.updateCursors(null, item, this.head, item);\n\n    // insert to the beginning of the list\n    if (this.head !== null) {\n        // new item <- first item\n        this.head.prev = item;\n\n        // new item -> first item\n        item.next = this.head;\n    } else {\n        // if list has no head, then it also has no tail\n        // in this case tail points to the new item\n        this.tail = item;\n    }\n\n    // head always points to new item\n    this.head = item;\n\n    return this;\n};\n\nList.prototype.prependData = function(data) {\n    return this.prepend(createItem(data));\n};\n\nList.prototype.append = function(item) {\n    return this.insert(item);\n};\n\nList.prototype.appendData = function(data) {\n    return this.insert(createItem(data));\n};\n\nList.prototype.insert = function(item, before) {\n    if (before !== undefined && before !== null) {\n        // prev   before\n        //      ^\n        //     item\n        this.updateCursors(before.prev, item, before, item);\n\n        if (before.prev === null) {\n            // insert to the beginning of list\n            if (this.head !== before) {\n                throw new Error('before doesn\\'t belong to list');\n            }\n\n            // since head points to before therefore list doesn't empty\n            // no need to check tail\n            this.head = item;\n            before.prev = item;\n            item.next = before;\n\n            this.updateCursors(null, item);\n        } else {\n\n            // insert between two items\n            before.prev.next = item;\n            item.prev = before.prev;\n\n            before.prev = item;\n            item.next = before;\n        }\n    } else {\n        // tail\n        //      ^\n        //      item\n        this.updateCursors(this.tail, item, null, item);\n\n        // insert to the ending of the list\n        if (this.tail !== null) {\n            // last item -> new item\n            this.tail.next = item;\n\n            // last item <- new item\n            item.prev = this.tail;\n        } else {\n            // if list has no tail, then it also has no head\n            // in this case head points to new item\n            this.head = item;\n        }\n\n        // tail always points to new item\n        this.tail = item;\n    }\n\n    return this;\n};\n\nList.prototype.insertData = function(data, before) {\n    return this.insert(createItem(data), before);\n};\n\nList.prototype.remove = function(item) {\n    //      item\n    //       ^\n    // prev     next\n    this.updateCursors(item, item.prev, item, item.next);\n\n    if (item.prev !== null) {\n        item.prev.next = item.next;\n    } else {\n        if (this.head !== item) {\n            throw new Error('item doesn\\'t belong to list');\n        }\n\n        this.head = item.next;\n    }\n\n    if (item.next !== null) {\n        item.next.prev = item.prev;\n    } else {\n        if (this.tail !== item) {\n            throw new Error('item doesn\\'t belong to list');\n        }\n\n        this.tail = item.prev;\n    }\n\n    item.prev = null;\n    item.next = null;\n\n    return item;\n};\n\nList.prototype.push = function(data) {\n    this.insert(createItem(data));\n};\n\nList.prototype.pop = function() {\n    if (this.tail !== null) {\n        return this.remove(this.tail);\n    }\n};\n\nList.prototype.unshift = function(data) {\n    this.prepend(createItem(data));\n};\n\nList.prototype.shift = function() {\n    if (this.head !== null) {\n        return this.remove(this.head);\n    }\n};\n\nList.prototype.prependList = function(list) {\n    return this.insertList(list, this.head);\n};\n\nList.prototype.appendList = function(list) {\n    return this.insertList(list);\n};\n\nList.prototype.insertList = function(list, before) {\n    // ignore empty lists\n    if (list.head === null) {\n        return this;\n    }\n\n    if (before !== undefined && before !== null) {\n        this.updateCursors(before.prev, list.tail, before, list.head);\n\n        // insert in the middle of dist list\n        if (before.prev !== null) {\n            // before.prev <-> list.head\n            before.prev.next = list.head;\n            list.head.prev = before.prev;\n        } else {\n            this.head = list.head;\n        }\n\n        before.prev = list.tail;\n        list.tail.next = before;\n    } else {\n        this.updateCursors(this.tail, list.tail, null, list.head);\n\n        // insert to end of the list\n        if (this.tail !== null) {\n            // if destination list has a tail, then it also has a head,\n            // but head doesn't change\n\n            // dest tail -> source head\n            this.tail.next = list.head;\n\n            // dest tail <- source head\n            list.head.prev = this.tail;\n        } else {\n            // if list has no a tail, then it also has no a head\n            // in this case points head to new item\n            this.head = list.head;\n        }\n\n        // tail always start point to new item\n        this.tail = list.tail;\n    }\n\n    list.head = null;\n    list.tail = null;\n\n    return this;\n};\n\nList.prototype.replace = function(oldItem, newItemOrList) {\n    if ('head' in newItemOrList) {\n        this.insertList(newItemOrList, oldItem);\n    } else {\n        this.insert(newItemOrList, oldItem);\n    }\n\n    this.remove(oldItem);\n};\n\nmodule.exports = List;\n","'use strict';\n\nvar createCustomError = require('../utils/createCustomError');\nvar MAX_LINE_LENGTH = 100;\nvar OFFSET_CORRECTION = 60;\nvar TAB_REPLACEMENT = '    ';\n\nfunction sourceFragment(error, extraLines) {\n    function processLines(start, end) {\n        return lines.slice(start, end).map(function(line, idx) {\n            var num = String(start + idx + 1);\n\n            while (num.length < maxNumLength) {\n                num = ' ' + num;\n            }\n\n            return num + ' |' + line;\n        }).join('\\n');\n    }\n\n    var lines = error.source.split(/\\r\\n?|\\n|\\f/);\n    var line = error.line;\n    var column = error.column;\n    var startLine = Math.max(1, line - extraLines) - 1;\n    var endLine = Math.min(line + extraLines, lines.length + 1);\n    var maxNumLength = Math.max(4, String(endLine).length) + 1;\n    var cutLeft = 0;\n\n    // column correction according to replaced tab before column\n    column += (TAB_REPLACEMENT.length - 1) * (lines[line - 1].substr(0, column - 1).match(/\\t/g) || []).length;\n\n    if (column > MAX_LINE_LENGTH) {\n        cutLeft = column - OFFSET_CORRECTION + 3;\n        column = OFFSET_CORRECTION - 2;\n    }\n\n    for (var i = startLine; i <= endLine; i++) {\n        if (i >= 0 && i < lines.length) {\n            lines[i] = lines[i].replace(/\\t/g, TAB_REPLACEMENT);\n            lines[i] =\n                (cutLeft > 0 && lines[i].length > cutLeft ? '\\u2026' : '') +\n                lines[i].substr(cutLeft, MAX_LINE_LENGTH - 2) +\n                (lines[i].length > cutLeft + MAX_LINE_LENGTH - 1 ? '\\u2026' : '');\n        }\n    }\n\n    return [\n        processLines(startLine, line),\n        new Array(column + maxNumLength + 2).join('-') + '^',\n        processLines(line, endLine)\n    ].filter(Boolean).join('\\n');\n}\n\nvar CssSyntaxError = function(message, source, offset, line, column) {\n    var error = createCustomError('CssSyntaxError', message);\n\n    error.source = source;\n    error.offset = offset;\n    error.line = line;\n    error.column = column;\n\n    error.sourceFragment = function(extraLines) {\n        return sourceFragment(error, isNaN(extraLines) ? 0 : extraLines);\n    };\n    Object.defineProperty(error, 'formattedMessage', {\n        get: function() {\n            return (\n                'Parse error: ' + error.message + '\\n' +\n                sourceFragment(error, 2)\n            );\n        }\n    });\n\n    // for backward capability\n    error.parseError = {\n        offset: offset,\n        line: line,\n        column: column\n    };\n\n    return error;\n};\n\nmodule.exports = CssSyntaxError;\n","'use strict';\n\nvar constants = require('./const');\nvar PUNCTUATION = constants.PUNCTUATION;\nvar STOP_URL_RAW = constants.STOP_URL_RAW;\nvar TYPE = constants.TYPE;\nvar FULLSTOP = TYPE.FullStop;\nvar PLUSSIGN = TYPE.PlusSign;\nvar HYPHENMINUS = TYPE.HyphenMinus;\nvar PUNCTUATOR = TYPE.Punctuator;\nvar TAB = 9;\nvar N = 10;\nvar F = 12;\nvar R = 13;\nvar SPACE = 32;\nvar BACK_SLASH = 92;\nvar E = 101; // 'e'.charCodeAt(0)\n\nfunction firstCharOffset(source) {\n    // detect BOM (https://en.wikipedia.org/wiki/Byte_order_mark)\n    if (source.charCodeAt(0) === 0xFEFF ||  // UTF-16BE\n        source.charCodeAt(0) === 0xFFFE) {  // UTF-16LE\n        return 1;\n    }\n\n    return 0;\n}\n\nfunction isHex(code) {\n    return (code >= 48 && code <= 57) || // 0 .. 9\n           (code >= 65 && code <= 70) || // A .. F\n           (code >= 97 && code <= 102);  // a .. f\n}\n\nfunction isNumber(code) {\n    return code >= 48 && code <= 57;\n}\n\nfunction isWhiteSpace(code) {\n    return code === SPACE || code === TAB || isNewline(code);\n}\n\nfunction isNewline(code) {\n    return code === R || code === N || code === F;\n}\n\nfunction getNewlineLength(source, offset, code) {\n    if (isNewline(code)) {\n        if (code === R && offset + 1 < source.length && source.charCodeAt(offset + 1) === N) {\n            return 2;\n        }\n\n        return 1;\n    }\n\n    return 0;\n}\n\nfunction cmpChar(testStr, offset, referenceCode) {\n    var code = testStr.charCodeAt(offset);\n\n    // code.toLowerCase() for A..Z\n    if (code >= 65 && code <= 90) {\n        code = code | 32;\n    }\n\n    return code === referenceCode;\n}\n\nfunction cmpStr(testStr, start, end, referenceStr) {\n    if (end - start !== referenceStr.length) {\n        return false;\n    }\n\n    if (start < 0 || end > testStr.length) {\n        return false;\n    }\n\n    for (var i = start; i < end; i++) {\n        var testCode = testStr.charCodeAt(i);\n        var refCode = referenceStr.charCodeAt(i - start);\n\n        // testCode.toLowerCase() for A..Z\n        if (testCode >= 65 && testCode <= 90) {\n            testCode = testCode | 32;\n        }\n\n        if (testCode !== refCode) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction findWhiteSpaceStart(source, offset) {\n    while (offset >= 0 && isWhiteSpace(source.charCodeAt(offset))) {\n        offset--;\n    }\n\n    return offset + 1;\n}\n\nfunction findWhiteSpaceEnd(source, offset) {\n    while (offset < source.length && isWhiteSpace(source.charCodeAt(offset))) {\n        offset++;\n    }\n\n    return offset;\n}\n\nfunction findCommentEnd(source, offset) {\n    var commentEnd = source.indexOf('*/', offset);\n\n    if (commentEnd === -1) {\n        return source.length;\n    }\n\n    return commentEnd + 2;\n}\n\nfunction findStringEnd(source, offset, quote) {\n    for (; offset < source.length; offset++) {\n        var code = source.charCodeAt(offset);\n\n        // TODO: bad string\n        if (code === BACK_SLASH) {\n            offset++;\n        } else if (code === quote) {\n            offset++;\n            break;\n        }\n    }\n\n    return offset;\n}\n\nfunction findDecimalNumberEnd(source, offset) {\n    while (offset < source.length && isNumber(source.charCodeAt(offset))) {\n        offset++;\n    }\n\n    return offset;\n}\n\nfunction findNumberEnd(source, offset, allowFraction) {\n    var code;\n\n    offset = findDecimalNumberEnd(source, offset);\n\n    // fraction: .\\d+\n    if (allowFraction && offset + 1 < source.length && source.charCodeAt(offset) === FULLSTOP) {\n        code = source.charCodeAt(offset + 1);\n\n        if (isNumber(code)) {\n            offset = findDecimalNumberEnd(source, offset + 1);\n        }\n    }\n\n    // exponent: e[+-]\\d+\n    if (offset + 1 < source.length) {\n        if ((source.charCodeAt(offset) | 32) === E) { // case insensitive check for `e`\n            code = source.charCodeAt(offset + 1);\n\n            if (code === PLUSSIGN || code === HYPHENMINUS) {\n                if (offset + 2 < source.length) {\n                    code = source.charCodeAt(offset + 2);\n                }\n            }\n\n            if (isNumber(code)) {\n                offset = findDecimalNumberEnd(source, offset + 2);\n            }\n        }\n    }\n\n    return offset;\n}\n\n// skip escaped unicode sequence that can ends with space\n// [0-9a-f]{1,6}(\\r\\n|[ \\n\\r\\t\\f])?\nfunction findEscapeEnd(source, offset) {\n    for (var i = 0; i < 7 && offset + i < source.length; i++) {\n        var code = source.charCodeAt(offset + i);\n\n        if (i !== 6 && isHex(code)) {\n            continue;\n        }\n\n        if (i > 0) {\n            offset += i - 1 + getNewlineLength(source, offset + i, code);\n            if (code === SPACE || code === TAB) {\n                offset++;\n            }\n        }\n\n        break;\n    }\n\n    return offset;\n}\n\nfunction findIdentifierEnd(source, offset) {\n    for (; offset < source.length; offset++) {\n        var code = source.charCodeAt(offset);\n\n        if (code === BACK_SLASH) {\n            offset = findEscapeEnd(source, offset + 1);\n        } else if (code < 0x80 && PUNCTUATION[code] === PUNCTUATOR) {\n            break;\n        }\n    }\n\n    return offset;\n}\n\nfunction findUrlRawEnd(source, offset) {\n    for (; offset < source.length; offset++) {\n        var code = source.charCodeAt(offset);\n\n        if (code === BACK_SLASH) {\n            offset = findEscapeEnd(source, offset + 1);\n        } else if (code < 0x80 && STOP_URL_RAW[code] === 1) {\n            break;\n        }\n    }\n\n    return offset;\n}\n\nmodule.exports = {\n    firstCharOffset: firstCharOffset,\n\n    isHex: isHex,\n    isNumber: isNumber,\n    isWhiteSpace: isWhiteSpace,\n    isNewline: isNewline,\n    getNewlineLength: getNewlineLength,\n\n    cmpChar: cmpChar,\n    cmpStr: cmpStr,\n\n    findWhiteSpaceStart: findWhiteSpaceStart,\n    findWhiteSpaceEnd: findWhiteSpaceEnd,\n    findCommentEnd: findCommentEnd,\n    findStringEnd: findStringEnd,\n    findDecimalNumberEnd: findDecimalNumberEnd,\n    findNumberEnd: findNumberEnd,\n    findEscapeEnd: findEscapeEnd,\n    findIdentifierEnd: findIdentifierEnd,\n    findUrlRawEnd: findUrlRawEnd\n};\n","'use strict';\n\nvar CssSyntaxError = require('./error');\n\nvar constants = require('./const');\nvar TYPE = constants.TYPE;\nvar NAME = constants.NAME;\nvar SYMBOL_TYPE = constants.SYMBOL_TYPE;\n\nvar utils = require('./utils');\nvar firstCharOffset = utils.firstCharOffset;\nvar cmpStr = utils.cmpStr;\nvar isNumber = utils.isNumber;\nvar findWhiteSpaceStart = utils.findWhiteSpaceStart;\nvar findWhiteSpaceEnd = utils.findWhiteSpaceEnd;\nvar findCommentEnd = utils.findCommentEnd;\nvar findStringEnd = utils.findStringEnd;\nvar findNumberEnd = utils.findNumberEnd;\nvar findIdentifierEnd = utils.findIdentifierEnd;\nvar findUrlRawEnd = utils.findUrlRawEnd;\n\nvar NULL = 0;\nvar WHITESPACE = TYPE.WhiteSpace;\nvar IDENTIFIER = TYPE.Identifier;\nvar NUMBER = TYPE.Number;\nvar STRING = TYPE.String;\nvar COMMENT = TYPE.Comment;\nvar PUNCTUATOR = TYPE.Punctuator;\nvar CDO = TYPE.CDO;\nvar CDC = TYPE.CDC;\nvar ATRULE = TYPE.Atrule;\nvar FUNCTION = TYPE.Function;\nvar URL = TYPE.Url;\nvar RAW = TYPE.Raw;\n\nvar N = 10;\nvar F = 12;\nvar R = 13;\nvar STAR = TYPE.Asterisk;\nvar SLASH = TYPE.Solidus;\nvar FULLSTOP = TYPE.FullStop;\nvar PLUSSIGN = TYPE.PlusSign;\nvar HYPHENMINUS = TYPE.HyphenMinus;\nvar GREATERTHANSIGN = TYPE.GreaterThanSign;\nvar LESSTHANSIGN = TYPE.LessThanSign;\nvar EXCLAMATIONMARK = TYPE.ExclamationMark;\nvar COMMERCIALAT = TYPE.CommercialAt;\nvar QUOTATIONMARK = TYPE.QuotationMark;\nvar APOSTROPHE = TYPE.Apostrophe;\nvar LEFTPARENTHESIS = TYPE.LeftParenthesis;\nvar RIGHTPARENTHESIS = TYPE.RightParenthesis;\nvar LEFTCURLYBRACKET = TYPE.LeftCurlyBracket;\nvar RIGHTCURLYBRACKET = TYPE.RightCurlyBracket;\nvar LEFTSQUAREBRACKET = TYPE.LeftSquareBracket;\nvar RIGHTSQUAREBRACKET = TYPE.RightSquareBracket;\n\nvar MIN_BUFFER_SIZE = 16 * 1024;\nvar OFFSET_MASK = 0x00FFFFFF;\nvar TYPE_SHIFT = 24;\nvar SafeUint32Array = typeof Uint32Array !== 'undefined' ? Uint32Array : Array; // fallback on Array when TypedArray is not supported\n\nfunction computeLinesAndColumns(tokenizer, source) {\n    var sourceLength = source.length;\n    var start = firstCharOffset(source);\n    var lines = tokenizer.lines;\n    var line = tokenizer.startLine;\n    var columns = tokenizer.columns;\n    var column = tokenizer.startColumn;\n\n    if (lines === null || lines.length < sourceLength + 1) {\n        lines = new SafeUint32Array(Math.max(sourceLength + 1024, MIN_BUFFER_SIZE));\n        columns = new SafeUint32Array(lines.length);\n    }\n\n    for (var i = start; i < sourceLength; i++) {\n        var code = source.charCodeAt(i);\n\n        lines[i] = line;\n        columns[i] = column++;\n\n        if (code === N || code === R || code === F) {\n            if (code === R && i + 1 < sourceLength && source.charCodeAt(i + 1) === N) {\n                i++;\n                lines[i] = line;\n                columns[i] = column;\n            }\n\n            line++;\n            column = 1;\n        }\n    }\n\n    lines[i] = line;\n    columns[i] = column;\n\n    tokenizer.linesAnsColumnsComputed = true;\n    tokenizer.lines = lines;\n    tokenizer.columns = columns;\n}\n\nfunction tokenLayout(tokenizer, source, startPos) {\n    var sourceLength = source.length;\n    var offsetAndType = tokenizer.offsetAndType;\n    var balance = tokenizer.balance;\n    var tokenCount = 0;\n    var prevType = 0;\n    var offset = startPos;\n    var anchor = 0;\n    var balanceCloseCode = 0;\n    var balanceStart = 0;\n    var balancePrev = 0;\n\n    if (offsetAndType === null || offsetAndType.length < sourceLength + 1) {\n        offsetAndType = new SafeUint32Array(sourceLength + 1024);\n        balance = new SafeUint32Array(sourceLength + 1024);\n    }\n\n    while (offset < sourceLength) {\n        var code = source.charCodeAt(offset);\n        var type = code < 0x80 ? SYMBOL_TYPE[code] : IDENTIFIER;\n\n        balance[tokenCount] = sourceLength;\n\n        switch (type) {\n            case WHITESPACE:\n                offset = findWhiteSpaceEnd(source, offset + 1);\n                break;\n\n            case PUNCTUATOR:\n                switch (code) {\n                    case balanceCloseCode:\n                        balancePrev = balanceStart & OFFSET_MASK;\n                        balanceStart = balance[balancePrev];\n                        balanceCloseCode = balanceStart >> TYPE_SHIFT;\n                        balance[tokenCount] = balancePrev;\n                        balance[balancePrev++] = tokenCount;\n                        for (; balancePrev < tokenCount; balancePrev++) {\n                            if (balance[balancePrev] === sourceLength) {\n                                balance[balancePrev] = tokenCount;\n                            }\n                        }\n                        break;\n\n                    case LEFTSQUAREBRACKET:\n                        balance[tokenCount] = balanceStart;\n                        balanceCloseCode = RIGHTSQUAREBRACKET;\n                        balanceStart = (balanceCloseCode << TYPE_SHIFT) | tokenCount;\n                        break;\n\n                    case LEFTCURLYBRACKET:\n                        balance[tokenCount] = balanceStart;\n                        balanceCloseCode = RIGHTCURLYBRACKET;\n                        balanceStart = (balanceCloseCode << TYPE_SHIFT) | tokenCount;\n                        break;\n\n                    case LEFTPARENTHESIS:\n                        balance[tokenCount] = balanceStart;\n                        balanceCloseCode = RIGHTPARENTHESIS;\n                        balanceStart = (balanceCloseCode << TYPE_SHIFT) | tokenCount;\n                        break;\n                }\n\n                // /*\n                if (code === STAR && prevType === SLASH) {\n                    type = COMMENT;\n                    offset = findCommentEnd(source, offset + 1);\n                    tokenCount--; // rewrite prev token\n                    break;\n                }\n\n                // edge case for -.123 and +.123\n                if (code === FULLSTOP && (prevType === PLUSSIGN || prevType === HYPHENMINUS)) {\n                    if (offset + 1 < sourceLength && isNumber(source.charCodeAt(offset + 1))) {\n                        type = NUMBER;\n                        offset = findNumberEnd(source, offset + 2, false);\n                        tokenCount--; // rewrite prev token\n                        break;\n                    }\n                }\n\n                // <!--\n                if (code === EXCLAMATIONMARK && prevType === LESSTHANSIGN) {\n                    if (offset + 2 < sourceLength &&\n                        source.charCodeAt(offset + 1) === HYPHENMINUS &&\n                        source.charCodeAt(offset + 2) === HYPHENMINUS) {\n                        type = CDO;\n                        offset = offset + 3;\n                        tokenCount--; // rewrite prev token\n                        break;\n                    }\n                }\n\n                // -->\n                if (code === HYPHENMINUS && prevType === HYPHENMINUS) {\n                    if (offset + 1 < sourceLength && source.charCodeAt(offset + 1) === GREATERTHANSIGN) {\n                        type = CDC;\n                        offset = offset + 2;\n                        tokenCount--; // rewrite prev token\n                        break;\n                    }\n                }\n\n                // ident(\n                if (code === LEFTPARENTHESIS && prevType === IDENTIFIER) {\n                    offset = offset + 1;\n                    tokenCount--; // rewrite prev token\n                    balance[tokenCount] = balance[tokenCount + 1];\n                    balanceStart--;\n\n                    // 4 char length identifier and equal to `url(` (case insensitive)\n                    if (offset - anchor === 4 && cmpStr(source, anchor, offset, 'url(')) {\n                        // special case for url() because it can contain any symbols sequence with few exceptions\n                        anchor = findWhiteSpaceEnd(source, offset);\n                        code = source.charCodeAt(anchor);\n                        if (code !== LEFTPARENTHESIS &&\n                            code !== RIGHTPARENTHESIS &&\n                            code !== QUOTATIONMARK &&\n                            code !== APOSTROPHE) {\n                            // url(\n                            offsetAndType[tokenCount++] = (URL << TYPE_SHIFT) | offset;\n                            balance[tokenCount] = sourceLength;\n\n                            // ws*\n                            if (anchor !== offset) {\n                                offsetAndType[tokenCount++] = (WHITESPACE << TYPE_SHIFT) | anchor;\n                                balance[tokenCount] = sourceLength;\n                            }\n\n                            // raw\n                            type = RAW;\n                            offset = findUrlRawEnd(source, anchor);\n                        } else {\n                            type = URL;\n                        }\n                    } else {\n                        type = FUNCTION;\n                    }\n                    break;\n                }\n\n                type = code;\n                offset = offset + 1;\n                break;\n\n            case NUMBER:\n                offset = findNumberEnd(source, offset + 1, prevType !== FULLSTOP);\n\n                // merge number with a preceding dot, dash or plus\n                if (prevType === FULLSTOP ||\n                    prevType === HYPHENMINUS ||\n                    prevType === PLUSSIGN) {\n                    tokenCount--; // rewrite prev token\n                }\n\n                break;\n\n            case STRING:\n                offset = findStringEnd(source, offset + 1, code);\n                break;\n\n            default:\n                anchor = offset;\n                offset = findIdentifierEnd(source, offset);\n\n                // merge identifier with a preceding dash\n                if (prevType === HYPHENMINUS) {\n                    // rewrite prev token\n                    tokenCount--;\n                    // restore prev prev token type\n                    // for case @-prefix-ident\n                    prevType = tokenCount === 0 ? 0 : offsetAndType[tokenCount - 1] >> TYPE_SHIFT;\n                }\n\n                if (prevType === COMMERCIALAT) {\n                    // rewrite prev token and change type to <at-keyword-token>\n                    tokenCount--;\n                    type = ATRULE;\n                }\n        }\n\n        offsetAndType[tokenCount++] = (type << TYPE_SHIFT) | offset;\n        prevType = type;\n    }\n\n    // finalize arrays\n    offsetAndType[tokenCount] = offset;\n    balance[tokenCount] = sourceLength;\n    balance[sourceLength] = sourceLength; // prevents false positive balance match with any token\n    while (balanceStart !== 0) {\n        balancePrev = balanceStart & OFFSET_MASK;\n        balanceStart = balance[balancePrev];\n        balance[balancePrev] = sourceLength;\n    }\n\n    tokenizer.offsetAndType = offsetAndType;\n    tokenizer.tokenCount = tokenCount;\n    tokenizer.balance = balance;\n}\n\n//\n// tokenizer\n//\n\nvar Tokenizer = function(source, startOffset, startLine, startColumn) {\n    this.offsetAndType = null;\n    this.balance = null;\n    this.lines = null;\n    this.columns = null;\n\n    this.setSource(source, startOffset, startLine, startColumn);\n};\n\nTokenizer.prototype = {\n    setSource: function(source, startOffset, startLine, startColumn) {\n        var safeSource = String(source || '');\n        var start = firstCharOffset(safeSource);\n\n        this.source = safeSource;\n        this.firstCharOffset = start;\n        this.startOffset = typeof startOffset === 'undefined' ? 0 : startOffset;\n        this.startLine = typeof startLine === 'undefined' ? 1 : startLine;\n        this.startColumn = typeof startColumn === 'undefined' ? 1 : startColumn;\n        this.linesAnsColumnsComputed = false;\n\n        this.eof = false;\n        this.currentToken = -1;\n        this.tokenType = 0;\n        this.tokenStart = start;\n        this.tokenEnd = start;\n\n        tokenLayout(this, safeSource, start);\n        this.next();\n    },\n\n    lookupType: function(offset) {\n        offset += this.currentToken;\n\n        if (offset < this.tokenCount) {\n            return this.offsetAndType[offset] >> TYPE_SHIFT;\n        }\n\n        return NULL;\n    },\n    lookupNonWSType: function(offset) {\n        offset += this.currentToken;\n\n        for (var type; offset < this.tokenCount; offset++) {\n            type = this.offsetAndType[offset] >> TYPE_SHIFT;\n\n            if (type !== WHITESPACE) {\n                return type;\n            }\n        }\n\n        return NULL;\n    },\n    lookupValue: function(offset, referenceStr) {\n        offset += this.currentToken;\n\n        if (offset < this.tokenCount) {\n            return cmpStr(\n                this.source,\n                this.offsetAndType[offset - 1] & OFFSET_MASK,\n                this.offsetAndType[offset] & OFFSET_MASK,\n                referenceStr\n            );\n        }\n\n        return false;\n    },\n    getTokenStart: function(tokenNum) {\n        if (tokenNum === this.currentToken) {\n            return this.tokenStart;\n        }\n\n        if (tokenNum > 0) {\n            return tokenNum < this.tokenCount\n                ? this.offsetAndType[tokenNum - 1] & OFFSET_MASK\n                : this.offsetAndType[this.tokenCount] & OFFSET_MASK;\n        }\n\n        return this.firstCharOffset;\n    },\n    getOffsetExcludeWS: function() {\n        if (this.currentToken > 0) {\n            if ((this.offsetAndType[this.currentToken - 1] >> TYPE_SHIFT) === WHITESPACE) {\n                return this.currentToken > 1\n                    ? this.offsetAndType[this.currentToken - 2] & OFFSET_MASK\n                    : this.firstCharOffset;\n            }\n        }\n        return this.tokenStart;\n    },\n    getRawLength: function(startToken, endTokenType1, endTokenType2, includeTokenType2) {\n        var cursor = startToken;\n        var balanceEnd;\n\n        loop:\n        for (; cursor < this.tokenCount; cursor++) {\n            balanceEnd = this.balance[cursor];\n\n            // belance end points to offset before start\n            if (balanceEnd < startToken) {\n                break loop;\n            }\n\n            // check token is stop type\n            switch (this.offsetAndType[cursor] >> TYPE_SHIFT) {\n                case endTokenType1:\n                    break loop;\n\n                case endTokenType2:\n                    if (includeTokenType2) {\n                        cursor++;\n                    }\n                    break loop;\n\n                default:\n                    // fast forward to the end of balanced block\n                    if (this.balance[balanceEnd] === cursor) {\n                        cursor = balanceEnd;\n                    }\n            }\n\n        }\n\n        return cursor - this.currentToken;\n    },\n    isBalanceEdge: function(pos) {\n        var balanceStart = this.balance[this.currentToken];\n        return balanceStart < pos;\n    },\n\n    getTokenValue: function() {\n        return this.source.substring(this.tokenStart, this.tokenEnd);\n    },\n    substrToCursor: function(start) {\n        return this.source.substring(start, this.tokenStart);\n    },\n\n    skipWS: function() {\n        for (var i = this.currentToken, skipTokenCount = 0; i < this.tokenCount; i++, skipTokenCount++) {\n            if ((this.offsetAndType[i] >> TYPE_SHIFT) !== WHITESPACE) {\n                break;\n            }\n        }\n\n        if (skipTokenCount > 0) {\n            this.skip(skipTokenCount);\n        }\n    },\n    skipSC: function() {\n        while (this.tokenType === WHITESPACE || this.tokenType === COMMENT) {\n            this.next();\n        }\n    },\n    skip: function(tokenCount) {\n        var next = this.currentToken + tokenCount;\n\n        if (next < this.tokenCount) {\n            this.currentToken = next;\n            this.tokenStart = this.offsetAndType[next - 1] & OFFSET_MASK;\n            next = this.offsetAndType[next];\n            this.tokenType = next >> TYPE_SHIFT;\n            this.tokenEnd = next & OFFSET_MASK;\n        } else {\n            this.currentToken = this.tokenCount;\n            this.next();\n        }\n    },\n    next: function() {\n        var next = this.currentToken + 1;\n\n        if (next < this.tokenCount) {\n            this.currentToken = next;\n            this.tokenStart = this.tokenEnd;\n            next = this.offsetAndType[next];\n            this.tokenType = next >> TYPE_SHIFT;\n            this.tokenEnd = next & OFFSET_MASK;\n        } else {\n            this.currentToken = this.tokenCount;\n            this.eof = true;\n            this.tokenType = NULL;\n            this.tokenStart = this.tokenEnd = this.source.length;\n        }\n    },\n\n    eat: function(tokenType) {\n        if (this.tokenType !== tokenType) {\n            var offset = this.tokenStart;\n            var message = NAME[tokenType] + ' is expected';\n\n            // tweak message and offset\n            if (tokenType === IDENTIFIER) {\n                // when identifier is expected but there is a function or url\n                if (this.tokenType === FUNCTION || this.tokenType === URL) {\n                    offset = this.tokenEnd - 1;\n                    message += ' but function found';\n                }\n            } else {\n                // when test type is part of another token show error for current position + 1\n                // e.g. eat(HYPHENMINUS) will fail on \"-foo\", but pointing on \"-\" is odd\n                if (this.source.charCodeAt(this.tokenStart) === tokenType) {\n                    offset = offset + 1;\n                }\n            }\n\n            this.error(message, offset);\n        }\n\n        this.next();\n    },\n    eatNonWS: function(tokenType) {\n        this.skipWS();\n        this.eat(tokenType);\n    },\n\n    consume: function(tokenType) {\n        var value = this.getTokenValue();\n\n        this.eat(tokenType);\n\n        return value;\n    },\n    consumeFunctionName: function() {\n        var name = this.source.substring(this.tokenStart, this.tokenEnd - 1);\n\n        this.eat(FUNCTION);\n\n        return name;\n    },\n    consumeNonWS: function(tokenType) {\n        this.skipWS();\n\n        return this.consume(tokenType);\n    },\n\n    expectIdentifier: function(name) {\n        if (this.tokenType !== IDENTIFIER || cmpStr(this.source, this.tokenStart, this.tokenEnd, name) === false) {\n            this.error('Identifier `' + name + '` is expected');\n        }\n\n        this.next();\n    },\n\n    getLocation: function(offset, filename) {\n        if (!this.linesAnsColumnsComputed) {\n            computeLinesAndColumns(this, this.source);\n        }\n\n        return {\n            source: filename,\n            offset: this.startOffset + offset,\n            line: this.lines[offset],\n            column: this.columns[offset]\n        };\n    },\n\n    getLocationRange: function(start, end, filename) {\n        if (!this.linesAnsColumnsComputed) {\n            computeLinesAndColumns(this, this.source);\n        }\n\n        return {\n            source: filename,\n            start: {\n                offset: this.startOffset + start,\n                line: this.lines[start],\n                column: this.columns[start]\n            },\n            end: {\n                offset: this.startOffset + end,\n                line: this.lines[end],\n                column: this.columns[end]\n            }\n        };\n    },\n\n    error: function(message, offset) {\n        var location = typeof offset !== 'undefined' && offset < this.source.length\n            ? this.getLocation(offset)\n            : this.eof\n                ? this.getLocation(findWhiteSpaceStart(this.source, this.source.length - 1))\n                : this.getLocation(this.tokenStart);\n\n        throw new CssSyntaxError(\n            message || 'Unexpected input',\n            this.source,\n            location.offset,\n            location.line,\n            location.column\n        );\n    },\n\n    dump: function() {\n        var offset = 0;\n\n        return Array.prototype.slice.call(this.offsetAndType, 0, this.tokenCount).map(function(item, idx) {\n            var start = offset;\n            var end = item & OFFSET_MASK;\n\n            offset = end;\n\n            return {\n                idx: idx,\n                type: NAME[item >> TYPE_SHIFT],\n                chunk: this.source.substring(start, end),\n                balance: this.balance[idx]\n            };\n        }, this);\n    }\n};\n\n// extend with error class\nTokenizer.CssSyntaxError = CssSyntaxError;\n\n// extend tokenizer with constants\nObject.keys(constants).forEach(function(key) {\n    Tokenizer[key] = constants[key];\n});\n\n// extend tokenizer with static methods from utils\nObject.keys(utils).forEach(function(key) {\n    Tokenizer[key] = utils[key];\n});\n\n// warm up tokenizer to elimitate code branches that never execute\n// fix soft deoptimizations (insufficient type feedback)\nnew Tokenizer('\\n\\r\\r\\n\\f<!---->//\"\"\\'\\'/*\\r\\n\\f*/1a;.\\\\31\\t\\+2{url(a);func();+1.2e3 -.4e-5 .6e+7}').getLocation();\n\nmodule.exports = Tokenizer;\n","'use strict';\n\nfunction isNodeType(node, type) {\n    return node && node.type === type;\n}\n\nfunction serializeMultiplier(multiplier) {\n    if (multiplier.min === 0 && multiplier.max === 0) {\n        return '*';\n    }\n\n    if (multiplier.min === 0 && multiplier.max === 1) {\n        return '?';\n    }\n\n    if (multiplier.min === 1 && multiplier.max === 0) {\n        return multiplier.comma ? '#' : '+';\n    }\n\n    if (multiplier.min === 1 && multiplier.max === 1) {\n        return '';\n    }\n\n    return (\n        (multiplier.comma ? '#' : '') +\n        '{' + multiplier.min + (multiplier.min !== multiplier.max ? ',' + (multiplier.max !== 0 ? multiplier.max : '') : '') + '}'\n    );\n}\n\nfunction generateSequence(node, forceBraces, decorate) {\n    var result = '';\n\n    if (node.explicit || forceBraces) {\n        result += '[' + (!isNodeType(node.terms[0], 'Comma') ? ' ' : '');\n    }\n\n    result += node.terms.map(function(term) {\n        return generate(term, forceBraces, decorate);\n    }).join(node.combinator === ' ' ? ' ' : ' ' + node.combinator + ' ');\n\n    if (node.explicit || forceBraces) {\n        result += ' ]';\n    }\n\n    return result;\n}\n\nfunction generateParentheses(group, forceBraces, decorate) {\n    if (!group.terms.length) {\n        return '()';\n    }\n\n    return '( ' + generateSequence(group, forceBraces, decorate) + ' )';\n}\n\nfunction generate(node, forceBraces, decorate) {\n    var result;\n\n    switch (node.type) {\n        case 'Group':\n            result =\n                generateSequence(node, forceBraces, decorate) +\n                (node.disallowEmpty ? '!' : '') +\n                serializeMultiplier(node.multiplier);\n            break;\n\n        case 'Keyword':\n            result = node.name;\n            break;\n\n        case 'Function':\n            result = node.name + generateParentheses(node.children, forceBraces, decorate);\n            break;\n\n        case 'Parentheses': // replace for seq('(' seq(...node.children) ')')\n            result = generateParentheses(node.children, forceBraces, decorate);\n            break;\n\n        case 'Type':\n            result = '<' + node.name + '>';\n            break;\n\n        case 'Property':\n            result = '<\\'' + node.name + '\\'>';\n            break;\n\n        case 'Combinator': // remove?\n        case 'Slash':      // replace for String? '/'\n        case 'Percent':    // replace for String? '%'\n        case 'String':\n        case 'Comma':\n            result = node.value;\n            break;\n\n        default:\n            throw new Error('Unknown node type `' + node.type + '`');\n    }\n\n    if (typeof decorate === 'function') {\n        result = decorate(result, node);\n    }\n\n    return result;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar createCustomError = require('../utils/createCustomError');\nvar generateGrammar = require('./grammar/generate');\n\nfunction getLocation(node, point) {\n    var loc = node && node.loc && node.loc[point];\n\n    return loc\n        ? { offset: loc.offset,\n            line: loc.line,\n            column: loc.column }\n        : null;\n}\n\nvar SyntaxReferenceError = function(type, referenceName) {\n    var error = createCustomError(\n        'SyntaxReferenceError',\n        type + (referenceName ? ' `' + referenceName + '`' : '')\n    );\n\n    error.reference = referenceName;\n\n    return error;\n};\n\nvar MatchError = function(message, lexer, syntax, value, badNode) {\n    var error = createCustomError('SyntaxMatchError', message);\n    var errorOffset = -1;\n    var start = getLocation(badNode, 'start');\n    var end = getLocation(badNode, 'end');\n    var css = lexer.syntax.generate(value, {\n        decorator: function(handlers) {\n            var bufferOffset = 0;\n\n            var handlersChunk = handlers.chunk;\n            handlers.chunk = function(chunk) {\n                bufferOffset += chunk.length;\n                handlersChunk(chunk);\n            };\n\n            var handlersNode = handlers.node;\n            handlers.node = function(node) {\n                if (node === badNode) {\n                    errorOffset = bufferOffset;\n                }\n\n                handlersNode.call(this, node);\n            };\n\n            return handlers;\n        }\n    });\n\n    if (errorOffset === -1) {\n        errorOffset = css.length;\n    }\n\n    error.rawMessage = message;\n    error.syntax = syntax ? generateGrammar(syntax) : '<generic>';\n    error.css = css;\n    error.mismatchOffset = errorOffset;\n    error.loc = {\n        source: badNode && badNode.loc && badNode.loc.source || '<unknown>',\n        start: start,\n        end: end\n    };\n    error.line = start ? start.line : undefined;\n    error.column = start ? start.column : undefined;\n    error.offset = start ? start.offset : undefined;\n    error.message = message + '\\n' +\n        '  syntax: ' + error.syntax + '\\n' +\n        '   value: ' + (error.css || '<empty string>') + '\\n' +\n        '  --------' + new Array(error.mismatchOffset + 1).join('-') + '^';\n\n    return error;\n};\n\nmodule.exports = {\n    SyntaxReferenceError: SyntaxReferenceError,\n    MatchError: MatchError\n};\n","'use strict';\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar keywords = Object.create(null);\nvar properties = Object.create(null);\nvar HYPHENMINUS = 45; // '-'.charCodeAt()\n\nfunction isCustomProperty(str, offset) {\n    offset = offset || 0;\n\n    return str.length - offset >= 2 &&\n           str.charCodeAt(offset) === HYPHENMINUS &&\n           str.charCodeAt(offset + 1) === HYPHENMINUS;\n}\n\nfunction getVendorPrefix(str, offset) {\n    offset = offset || 0;\n\n    // verdor prefix should be at least 3 chars length\n    if (str.length - offset >= 3) {\n        // vendor prefix starts with hyper minus following non-hyper minus\n        if (str.charCodeAt(offset) === HYPHENMINUS &&\n            str.charCodeAt(offset + 1) !== HYPHENMINUS) {\n            // vendor prefix should contain a hyper minus at the ending\n            var secondDashIndex = str.indexOf('-', offset + 2);\n\n            if (secondDashIndex !== -1) {\n                return str.substring(offset, secondDashIndex + 1);\n            }\n        }\n    }\n\n    return '';\n}\n\nfunction getKeywordDescriptor(keyword) {\n    if (hasOwnProperty.call(keywords, keyword)) {\n        return keywords[keyword];\n    }\n\n    var name = keyword.toLowerCase();\n\n    if (hasOwnProperty.call(keywords, name)) {\n        return keywords[keyword] = keywords[name];\n    }\n\n    var custom = isCustomProperty(name, 0);\n    var vendor = !custom ? getVendorPrefix(name, 0) : '';\n\n    return keywords[keyword] = Object.freeze({\n        basename: name.substr(vendor.length),\n        name: name,\n        vendor: vendor,\n        prefix: vendor,\n        custom: custom\n    });\n}\n\nfunction getPropertyDescriptor(property) {\n    if (hasOwnProperty.call(properties, property)) {\n        return properties[property];\n    }\n\n    var name = property;\n    var hack = property[0];\n\n    if (hack === '/') {\n        hack = property[1] === '/' ? '//' : '/';\n    } else if (hack !== '_' &&\n               hack !== '*' &&\n               hack !== '$' &&\n               hack !== '#' &&\n               hack !== '+') {\n        hack = '';\n    }\n\n    var custom = isCustomProperty(name, hack.length);\n\n    // re-use result when possible (the same as for lower case)\n    if (!custom) {\n        name = name.toLowerCase();\n        if (hasOwnProperty.call(properties, name)) {\n            return properties[property] = properties[name];\n        }\n    }\n\n    var vendor = !custom ? getVendorPrefix(name, hack.length) : '';\n    var prefix = name.substr(0, hack.length + vendor.length);\n\n    return properties[property] = Object.freeze({\n        basename: name.substr(prefix.length),\n        name: name.substr(hack.length),\n        hack: hack,\n        vendor: vendor,\n        prefix: prefix,\n        custom: custom\n    });\n}\n\nmodule.exports = {\n    keyword: getKeywordDescriptor,\n    property: getPropertyDescriptor,\n    isCustomProperty: isCustomProperty,\n    vendorPrefix: getVendorPrefix\n};\n","'use strict';\n\nvar names = require('../utils/names.js');\n\n// https://www.w3.org/TR/css-values-3/#lengths\nvar LENGTH = {\n    // absolute length units\n    'px': true,\n    'mm': true,\n    'cm': true,\n    'in': true,\n    'pt': true,\n    'pc': true,\n    'q': true,\n\n    // relative length units\n    'em': true,\n    'ex': true,\n    'ch': true,\n    'rem': true,\n\n    // viewport-percentage lengths\n    'vh': true,\n    'vw': true,\n    'vmin': true,\n    'vmax': true,\n    'vm': true\n};\n\nvar ANGLE = {\n    'deg': true,\n    'grad': true,\n    'rad': true,\n    'turn': true\n};\n\nvar TIME = {\n    's': true,\n    'ms': true\n};\n\nvar FREQUENCY = {\n    'hz': true,\n    'khz': true\n};\n\n// https://www.w3.org/TR/css-values-3/#resolution (https://drafts.csswg.org/css-values/#resolution)\nvar RESOLUTION = {\n    'dpi': true,\n    'dpcm': true,\n    'dppx': true,\n    'x': true      // https://github.com/w3c/csswg-drafts/issues/461\n};\n\n// https://drafts.csswg.org/css-grid/#fr-unit\nvar FLEX = {\n    'fr': true\n};\n\n// https://www.w3.org/TR/css3-speech/#mixing-props-voice-volume\nvar DECIBEL = {\n    'db': true\n};\n\n// https://www.w3.org/TR/css3-speech/#voice-props-voice-pitch\nvar SEMITONES = {\n    'st': true\n};\n\n// can be used wherever <length>, <frequency>, <angle>, <time>, <percentage>, <number>, or <integer> values are allowed\n// https://drafts.csswg.org/css-values/#calc-notation\nfunction isCalc(node) {\n    if (node.data.type !== 'Function') {\n        return false;\n    }\n\n    var keyword = names.keyword(node.data.name);\n\n    // check the function name\n    return (\n        keyword.name === 'calc' ||\n        keyword.name === '-moz-calc' ||\n        keyword.name === '-webkit-calc'\n    );\n}\n\nfunction astNode(type) {\n    return function(node) {\n        return node.data.type === type;\n    };\n}\n\nfunction dimension(type) {\n    return function(node) {\n        return isCalc(node) ||\n               (node.data.type === 'Dimension' && type.hasOwnProperty(node.data.unit.toLowerCase()));\n    };\n}\n\nfunction zeroUnitlessDimension(type) {\n    return function(node) {\n        return isCalc(node) ||\n               (node.data.type === 'Dimension' && type.hasOwnProperty(node.data.unit.toLowerCase())) ||\n               (node.data.type === 'Number' && Number(node.data.value) === 0);\n    };\n}\n\nfunction attr(node) {\n    return node.data.type === 'Function' && node.data.name.toLowerCase() === 'attr';\n}\n\nfunction number(node) {\n    return isCalc(node) || node.data.type === 'Number';\n}\n\nfunction numberZeroOne(node) {\n    if (isCalc(node) || node.data.type === 'Number') {\n        var value = Number(node.data.value);\n\n        return value >= 0 && value <= 1;\n    }\n\n    return false;\n}\n\nfunction numberOneOrGreater(node) {\n    if (isCalc(node) || node.data.type === 'Number') {\n        return Number(node.data.value) >= 1;\n    }\n\n    return false;\n}\n\n// TODO: fail on 10e-2\nfunction integer(node) {\n    return isCalc(node) ||\n           (node.data.type === 'Number' && node.data.value.indexOf('.') === -1);\n}\n\n// TODO: fail on 10e-2\nfunction positiveInteger(node) {\n    return isCalc(node) ||\n           (node.data.type === 'Number' && node.data.value.indexOf('.') === -1 && node.data.value.charAt(0) !== '-');\n}\n\nfunction percentage(node) {\n    return isCalc(node) ||\n           node.data.type === 'Percentage';\n}\n\nfunction hexColor(node) {\n    if (node.data.type !== 'HexColor') {\n        return false;\n    }\n\n    var hex = node.data.value;\n\n    return /^[0-9a-fA-F]{3,8}$/.test(hex) &&\n           (hex.length === 3 || hex.length === 4 || hex.length === 6 || hex.length === 8);\n}\n\nfunction expression(node) {\n    return node.data.type === 'Function' && node.data.name.toLowerCase() === 'expression';\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/CSS/custom-ident\n// https://drafts.csswg.org/css-values-4/#identifier-value\nfunction customIdent(node) {\n    if (node.data.type !== 'Identifier') {\n        return false;\n    }\n\n    var name = node.data.name.toLowerCase();\n\n    // § 3.2. Author-defined Identifiers: the <custom-ident> type\n    // The CSS-wide keywords are not valid <custom-ident>s\n    if (name === 'unset' || name === 'initial' || name === 'inherit') {\n        return false;\n    }\n\n    // The default keyword is reserved and is also not a valid <custom-ident>\n    if (name === 'default') {\n        return false;\n    }\n\n    // TODO: ignore property specific keywords (as described https://developer.mozilla.org/en-US/docs/Web/CSS/custom-ident)\n\n    return true;\n}\n\nmodule.exports = {\n    'angle': zeroUnitlessDimension(ANGLE),\n    'attr()': attr,\n    'custom-ident': customIdent,\n    'decibel': dimension(DECIBEL),\n    'dimension': astNode('Dimension'),\n    'frequency': dimension(FREQUENCY),\n    'flex': dimension(FLEX),\n    'hex-color': hexColor,\n    'id-selector': astNode('IdSelector'), // element( <id-selector> )\n    'ident': astNode('Identifier'),\n    'integer': integer,\n    'length': zeroUnitlessDimension(LENGTH),\n    'number': number,\n    'number-zero-one': numberZeroOne,\n    'number-one-or-greater': numberOneOrGreater,\n    'percentage': percentage,\n    'positive-integer': positiveInteger,\n    'resolution': dimension(RESOLUTION),\n    'semitones': dimension(SEMITONES),\n    'string': astNode('String'),\n    'time': dimension(TIME),\n    'unicode-range': astNode('UnicodeRange'),\n    'url': astNode('Url'),\n\n    // old IE stuff\n    'progid': astNode('Raw'),\n    'expression': expression\n};\n","'use strict';\n\nvar SyntaxParseError = require('./error').SyntaxParseError;\n\nvar TAB = 9;\nvar N = 10;\nvar F = 12;\nvar R = 13;\nvar SPACE = 32;\nvar EXCLAMATIONMARK = 33;    // !\nvar NUMBERSIGN = 35;         // #\nvar PERCENTSIGN = 37;        // %\nvar AMPERSAND = 38;          // &\nvar APOSTROPHE = 39;         // '\nvar LEFTPARENTHESIS = 40;    // (\nvar RIGHTPARENTHESIS = 41;   // )\nvar ASTERISK = 42;           // *\nvar PLUSSIGN = 43;           // +\nvar COMMA = 44;              // ,\nvar SOLIDUS = 47;            // /\nvar LESSTHANSIGN = 60;       // <\nvar GREATERTHANSIGN = 62;    // >\nvar QUESTIONMARK = 63;       // ?\nvar LEFTSQUAREBRACKET = 91;  // [\nvar RIGHTSQUAREBRACKET = 93; // ]\nvar LEFTCURLYBRACKET = 123;  // {\nvar VERTICALLINE = 124;      // |\nvar RIGHTCURLYBRACKET = 125; // }\nvar COMBINATOR_PRECEDENCE = {\n    ' ': 1,\n    '&&': 2,\n    '||': 3,\n    '|': 4\n};\nvar MULTIPLIER_DEFAULT = {\n    comma: false,\n    min: 1,\n    max: 1\n};\nvar MULTIPLIER_ZERO_OR_MORE = {\n    comma: false,\n    min: 0,\n    max: 0\n};\nvar MULTIPLIER_ONE_OR_MORE = {\n    comma: false,\n    min: 1,\n    max: 0\n};\nvar MULTIPLIER_ONE_OR_MORE_COMMA_SEPARATED = {\n    comma: true,\n    min: 1,\n    max: 0\n};\nvar MULTIPLIER_ZERO_OR_ONE = {\n    comma: false,\n    min: 0,\n    max: 1\n};\nvar NAME_CHAR = (function() {\n    var array = typeof Uint32Array === 'function' ? new Uint32Array(128) : new Array(128);\n    for (var i = 0; i < 128; i++) {\n        array[i] = /[a-zA-Z0-9\\-]/.test(String.fromCharCode(i)) ? 1 : 0;\n    }\n    return array;\n})();\n\nvar Tokenizer = function(str) {\n    this.str = str;\n    this.pos = 0;\n};\nTokenizer.prototype = {\n    charCode: function() {\n        return this.pos < this.str.length ? this.str.charCodeAt(this.pos) : 0;\n    },\n    nextCharCode: function() {\n        return this.pos + 1 < this.str.length ? this.str.charCodeAt(this.pos + 1) : 0;\n    },\n    substringToPos: function(end) {\n        return this.str.substring(this.pos, this.pos = end);\n    },\n    eat: function(code) {\n        if (this.charCode() !== code) {\n            error(this, this.pos, 'Expect `' + String.fromCharCode(code) + '`');\n        }\n\n        this.pos++;\n    }\n};\n\nfunction scanSpaces(tokenizer) {\n    var end = tokenizer.pos + 1;\n\n    for (; end < tokenizer.str.length; end++) {\n        var code = tokenizer.str.charCodeAt(end);\n        if (code !== R && code !== N && code !== F && code !== SPACE && code !== TAB) {\n            break;\n        }\n    }\n\n    return tokenizer.substringToPos(end);\n}\n\nfunction scanWord(tokenizer) {\n    var end = tokenizer.pos;\n\n    for (; end < tokenizer.str.length; end++) {\n        var code = tokenizer.str.charCodeAt(end);\n        if (code >= 128 || NAME_CHAR[code] === 0) {\n            break;\n        }\n    }\n\n    if (tokenizer.pos === end) {\n        error(tokenizer, tokenizer.pos, 'Expect a keyword');\n    }\n\n    return tokenizer.substringToPos(end);\n}\n\nfunction scanNumber(tokenizer) {\n    var end = tokenizer.pos;\n\n    for (; end < tokenizer.str.length; end++) {\n        var code = tokenizer.str.charCodeAt(end);\n        if (code < 48 || code > 57) {\n            break;\n        }\n    }\n\n    if (tokenizer.pos === end) {\n        error(tokenizer, tokenizer.pos, 'Expect a number');\n    }\n\n    return tokenizer.substringToPos(end);\n}\n\nfunction scanString(tokenizer) {\n    var end = tokenizer.str.indexOf('\\'', tokenizer.pos + 1);\n\n    if (end === -1) {\n        error(tokenizer, tokenizer.str.length, 'Expect a quote');\n    }\n\n    return tokenizer.substringToPos(end + 1);\n}\n\nfunction readMultiplierRange(tokenizer, comma) {\n    var min = null;\n    var max = null;\n\n    tokenizer.eat(LEFTCURLYBRACKET);\n\n    min = scanNumber(tokenizer);\n\n    if (tokenizer.charCode() === COMMA) {\n        tokenizer.pos++;\n        if (tokenizer.charCode() !== RIGHTCURLYBRACKET) {\n            max = scanNumber(tokenizer);\n        }\n    } else {\n        max = min;\n    }\n\n    tokenizer.eat(RIGHTCURLYBRACKET);\n\n    return {\n        comma: comma,\n        min: Number(min),\n        max: max ? Number(max) : 0\n    };\n}\n\nfunction readMultiplier(tokenizer) {\n    switch (tokenizer.charCode()) {\n        case ASTERISK:\n            tokenizer.pos++;\n            return MULTIPLIER_ZERO_OR_MORE;\n\n        case PLUSSIGN:\n            tokenizer.pos++;\n            return MULTIPLIER_ONE_OR_MORE;\n\n        case QUESTIONMARK:\n            tokenizer.pos++;\n            return MULTIPLIER_ZERO_OR_ONE;\n\n        case NUMBERSIGN:\n            tokenizer.pos++;\n\n            if (tokenizer.charCode() !== LEFTCURLYBRACKET) {\n                return MULTIPLIER_ONE_OR_MORE_COMMA_SEPARATED;\n            }\n\n            return readMultiplierRange(tokenizer, true);\n\n        case LEFTCURLYBRACKET:\n            return readMultiplierRange(tokenizer, false);\n    }\n\n    return MULTIPLIER_DEFAULT;\n}\n\nfunction maybeMultiplied(tokenizer, node) {\n    var multiplier = readMultiplier(tokenizer);\n\n    if (multiplier !== MULTIPLIER_DEFAULT) {\n        return {\n            type: 'Group',\n            terms: [node],\n            combinator: '|',  // `|` combinator is simplest in implementation (and therefore faster)\n            disallowEmpty: false,\n            multiplier: multiplier,\n            explicit: false\n        };\n    }\n\n    return node;\n}\n\nfunction readProperty(tokenizer) {\n    var name;\n\n    tokenizer.eat(LESSTHANSIGN);\n    tokenizer.eat(APOSTROPHE);\n\n    name = scanWord(tokenizer);\n\n    tokenizer.eat(APOSTROPHE);\n    tokenizer.eat(GREATERTHANSIGN);\n\n    return maybeMultiplied(tokenizer, {\n        type: 'Property',\n        name: name\n    });\n}\n\nfunction readType(tokenizer) {\n    var name;\n\n    tokenizer.eat(LESSTHANSIGN);\n    name = scanWord(tokenizer);\n\n    if (tokenizer.charCode() === LEFTPARENTHESIS &&\n        tokenizer.nextCharCode() === RIGHTPARENTHESIS) {\n        tokenizer.pos += 2;\n        name += '()';\n    }\n\n    tokenizer.eat(GREATERTHANSIGN);\n\n    return maybeMultiplied(tokenizer, {\n        type: 'Type',\n        name: name\n    });\n}\n\nfunction readKeywordOrFunction(tokenizer) {\n    var children = null;\n    var name;\n\n    name = scanWord(tokenizer);\n\n    if (tokenizer.charCode() === LEFTPARENTHESIS) {\n        tokenizer.pos++;\n        children = readImplicitGroup(tokenizer);\n        tokenizer.eat(RIGHTPARENTHESIS);\n\n        return maybeMultiplied(tokenizer, {\n            type: 'Function',\n            name: name,\n            children: children\n        });\n    }\n\n    return maybeMultiplied(tokenizer, {\n        type: 'Keyword',\n        name: name\n    });\n}\n\nfunction regroupTerms(terms, combinators) {\n    function createGroup(terms, combinator) {\n        return {\n            type: 'Group',\n            terms: terms,\n            combinator: combinator,\n            disallowEmpty: false,\n            multiplier: MULTIPLIER_DEFAULT,\n            explicit: false\n        };\n    }\n\n    combinators = Object.keys(combinators).sort(function(a, b) {\n        return COMBINATOR_PRECEDENCE[a] - COMBINATOR_PRECEDENCE[b];\n    });\n\n    while (combinators.length > 0) {\n        var combinator = combinators.shift();\n        for (var i = 0, subgroupStart = 0; i < terms.length; i++) {\n            var term = terms[i];\n            if (term.type === 'Combinator') {\n                if (term.value === combinator) {\n                    if (subgroupStart === -1) {\n                        subgroupStart = i - 1;\n                    }\n                    terms.splice(i, 1);\n                    i--;\n                } else {\n                    if (subgroupStart !== -1 && i - subgroupStart > 1) {\n                        terms.splice(\n                            subgroupStart,\n                            i - subgroupStart,\n                            createGroup(terms.slice(subgroupStart, i), combinator)\n                        );\n                        i = subgroupStart + 1;\n                    }\n                    subgroupStart = -1;\n                }\n            }\n        }\n\n        if (subgroupStart !== -1 && combinators.length) {\n            terms.splice(\n                subgroupStart,\n                i - subgroupStart,\n                createGroup(terms.slice(subgroupStart, i), combinator)\n            );\n        }\n    }\n\n    return combinator;\n}\n\nfunction readImplicitGroup(tokenizer) {\n    var terms = [];\n    var combinators = {};\n    var token;\n    var prevToken = null;\n    var prevTokenPos = tokenizer.pos;\n\n    while (token = peek(tokenizer)) {\n        if (token.type !== 'Spaces') {\n            if (token.type === 'Combinator') {\n                // check for combinator in group beginning and double combinator sequence\n                if (prevToken === null || prevToken.type === 'Combinator') {\n                    error(tokenizer, prevTokenPos, 'Unexpected combinator');\n                }\n\n                combinators[token.value] = true;\n            } else if (prevToken !== null && prevToken.type !== 'Combinator') {\n                combinators[' '] = true;  // a b\n                terms.push({\n                    type: 'Combinator',\n                    value: ' '\n                });\n            }\n\n            terms.push(token);\n            prevToken = token;\n            prevTokenPos = tokenizer.pos;\n        }\n    }\n\n    // check for combinator in group ending\n    if (prevToken !== null && prevToken.type === 'Combinator') {\n        error(tokenizer, tokenizer.pos - prevTokenPos, 'Unexpected combinator');\n    }\n\n    return {\n        type: 'Group',\n        terms: terms,\n        combinator: regroupTerms(terms, combinators) || ' ',\n        disallowEmpty: false,\n        multiplier: MULTIPLIER_DEFAULT,\n        explicit: false\n    };\n}\n\nfunction readGroup(tokenizer) {\n    var result;\n\n    tokenizer.eat(LEFTSQUAREBRACKET);\n    result = readImplicitGroup(tokenizer);\n    tokenizer.eat(RIGHTSQUAREBRACKET);\n\n    result.explicit = true;\n    result.multiplier = readMultiplier(tokenizer);\n\n    if (tokenizer.charCode() === EXCLAMATIONMARK) {\n        tokenizer.pos++;\n        result.disallowEmpty = true;\n    }\n\n    return result;\n}\n\nfunction peek(tokenizer) {\n    var code = tokenizer.charCode();\n\n    if (code < 128 && NAME_CHAR[code] === 1) {\n        return readKeywordOrFunction(tokenizer);\n    }\n\n    switch (code) {\n        case LEFTSQUAREBRACKET:\n            return readGroup(tokenizer);\n\n        case LESSTHANSIGN:\n            if (tokenizer.nextCharCode() === APOSTROPHE) {\n                return readProperty(tokenizer);\n            } else {\n                return readType(tokenizer);\n            }\n\n        case VERTICALLINE:\n            return {\n                type: 'Combinator',\n                value: tokenizer.substringToPos(tokenizer.nextCharCode() === VERTICALLINE ? tokenizer.pos + 2 : tokenizer.pos + 1)\n            };\n\n        case AMPERSAND:\n            tokenizer.pos++;\n            tokenizer.eat(AMPERSAND);\n            return {\n                type: 'Combinator',\n                value: '&&'\n            };\n\n        case COMMA:\n            tokenizer.pos++;\n            return {\n                type: 'Comma',\n                value: ','\n            };\n\n        case SOLIDUS:\n            tokenizer.pos++;\n            return {\n                type: 'Slash',\n                value: '/'\n            };\n\n        case PERCENTSIGN:  // looks like exception, needs for attr()'s <type-or-unit>\n            tokenizer.pos++;\n            return {\n                type: 'Percent',\n                value: '%'\n            };\n\n        case LEFTPARENTHESIS:\n            tokenizer.pos++;\n            var children = readImplicitGroup(tokenizer);\n            tokenizer.eat(RIGHTPARENTHESIS);\n\n            return {\n                type: 'Parentheses',\n                children: children\n            };\n\n        case APOSTROPHE:\n            return {\n                type: 'String',\n                value: scanString(tokenizer)\n            };\n\n        case SPACE:\n        case TAB:\n        case N:\n        case R:\n        case F:\n            return {\n                type: 'Spaces',\n                value: scanSpaces(tokenizer)\n            };\n    }\n}\n\nfunction error(tokenizer, pos, msg) {\n    throw new SyntaxParseError(msg || 'Unexpected input', tokenizer.str, pos);\n}\n\nfunction parse(str) {\n    var tokenizer = new Tokenizer(str);\n    var result = readImplicitGroup(tokenizer);\n\n    if (tokenizer.pos !== str.length) {\n        error(tokenizer, tokenizer.pos);\n    }\n\n    // reduce redundant groups with single group term\n    if (result.terms.length === 1 && result.terms[0].type === 'Group') {\n        result = result.terms[0];\n    }\n\n    return result;\n}\n\n// warm up parse to elimitate code branches that never execute\n// fix soft deoptimizations (insufficient type feedback)\nparse('[a&&<b>#|<\\'c\\'>*||e(){2,} f{2} /,(% g#{1,2})]!');\n\nmodule.exports = parse;\n","'use strict';\n\nvar noop = function() {};\n\nfunction ensureFunction(value) {\n    return typeof value === 'function' ? value : noop;\n}\n\nmodule.exports = function(node, fn, context) {\n    function walk(node) {\n        enter.call(context, node);\n\n        switch (node.type) {\n            case 'Group':\n                node.terms.forEach(walk);\n                break;\n\n            case 'Function':\n            case 'Parentheses':\n                walk(node.children);\n                break;\n\n            case 'Keyword':\n            case 'Type':\n            case 'Property':\n            case 'Combinator':\n            case 'Comma':\n            case 'Slash':\n            case 'String':\n            case 'Percent':\n                break;\n\n            default:\n                throw new Error('Unknown type: ' + node.type);\n        }\n\n        leave.call(context, node);\n    }\n\n    var enter = noop;\n    var leave = noop;\n\n    if (typeof fn === 'function') {\n        enter = fn;\n    } else if (fn) {\n        enter = ensureFunction(fn.enter);\n        leave = ensureFunction(fn.leave);\n    }\n\n    if (enter === noop && leave === noop) {\n        throw new Error('Neither `enter` nor `leave` walker handler is set or both aren\\'t a function');\n    }\n\n    walk(node, context);\n};\n","'use strict';\n\nvar names = require('../utils/names');\nvar MULTIPLIER_DEFAULT = {\n    comma: false,\n    min: 1,\n    max: 1\n};\n\nfunction skipSpaces(node) {\n    while (node !== null && (node.data.type === 'WhiteSpace' || node.data.type === 'Comment')) {\n        node = node.next;\n    }\n\n    return node;\n}\n\nfunction putResult(buffer, match) {\n    var type = match.type || match.syntax.type;\n\n    // ignore groups\n    if (type === 'Group') {\n        buffer.push.apply(buffer, match.match);\n    } else {\n        buffer.push(match);\n    }\n}\n\nfunction matchToJSON() {\n    return {\n        type: this.syntax.type,\n        name: this.syntax.name,\n        match: this.match,\n        node: this.node\n    };\n}\n\nfunction buildMatchNode(badNode, lastNode, next, match) {\n    if (badNode) {\n        return {\n            badNode: badNode,\n            lastNode: null,\n            next: null,\n            match: null\n        };\n    }\n\n    return {\n        badNode: null,\n        lastNode: lastNode,\n        next: next,\n        match: match\n    };\n}\n\nfunction matchGroup(lexer, syntaxNode, node) {\n    var result = [];\n    var buffer;\n    var multiplier = syntaxNode.multiplier || MULTIPLIER_DEFAULT;\n    var min = multiplier.min;\n    var max = multiplier.max === 0 ? Infinity : multiplier.max;\n    var lastCommaTermCount;\n    var lastComma;\n    var matchCount = 0;\n    var lastNode = null;\n    var badNode = null;\n\n    mismatch:\n    while (matchCount < max) {\n        node = skipSpaces(node);\n        buffer = [];\n\n        switch (syntaxNode.combinator) {\n            case '|':\n                for (var i = 0; i < syntaxNode.terms.length; i++) {\n                    var term = syntaxNode.terms[i];\n                    var res = matchSyntax(lexer, term, node);\n\n                    if (res.match) {\n                        putResult(buffer, res.match);\n                        node = res.next;\n                        break;  // continue matching\n                    } else if (res.badNode) {\n                        badNode = res.badNode;\n                        break mismatch;\n                    } else if (res.lastNode) {\n                        lastNode = res.lastNode;\n                    }\n                }\n\n                if (buffer.length === 0) {\n                    break mismatch; // nothing found -> stop matching\n                }\n\n                break;\n\n            case ' ':\n                var beforeMatchNode = node;\n                var lastMatchedTerm = null;\n                var hasTailMatch = false;\n                var commaMissed = false;\n\n                for (var i = 0; i < syntaxNode.terms.length; i++) {\n                    var term = syntaxNode.terms[i];\n                    var res = matchSyntax(lexer, term, node);\n\n                    if (res.match) {\n                        if (term.type === 'Comma' && i !== 0 && !hasTailMatch) {\n                            // recover cursor to state before last match and stop matching\n                            lastNode = node && node.data;\n                            node = beforeMatchNode;\n                            break mismatch;\n                        }\n\n                        // non-empty match (res.next will refer to another node)\n                        if (res.next !== node) {\n                            // match should be preceded by a comma\n                            if (commaMissed) {\n                                lastNode = node && node.data;\n                                node = beforeMatchNode;\n                                break mismatch;\n                            }\n\n                            hasTailMatch = term.type !== 'Comma';\n                            lastMatchedTerm = term;\n                        }\n\n                        putResult(buffer, res.match);\n                        node = skipSpaces(res.next);\n                    } else if (res.badNode) {\n                        badNode = res.badNode;\n                        break mismatch;\n                    } else {\n                        if (res.lastNode) {\n                            lastNode = res.lastNode;\n                        }\n\n                        // it's ok when comma doesn't match when no matches yet\n                        // but only if comma is not first or last term\n                        if (term.type === 'Comma' && i !== 0 && i !== syntaxNode.terms.length - 1) {\n                            if (hasTailMatch) {\n                                commaMissed = true;\n                            }\n                            continue;\n                        }\n\n                        // recover cursor to state before last match and stop matching\n                        lastNode = res.lastNode || (node && node.data);\n                        node = beforeMatchNode;\n                        break mismatch;\n                    }\n                }\n\n                // don't allow empty match when [ ]!\n                if (!lastMatchedTerm && syntaxNode.disallowEmpty) {\n                    // empty match but shouldn't\n                    // recover cursor to state before last match and stop matching\n                    lastNode = node && node.data;\n                    node = beforeMatchNode;\n                    break mismatch;\n                }\n\n                // don't allow comma at the end but only if last term isn't a comma\n                if (lastMatchedTerm && lastMatchedTerm.type === 'Comma' && term.type !== 'Comma') {\n                    lastNode = node && node.data;\n                    node = beforeMatchNode;\n                    break mismatch;\n                }\n\n                break;\n\n            case '&&':\n                var beforeMatchNode = node;\n                var lastMatchedTerm = null;\n                var terms = syntaxNode.terms.slice();\n\n                while (terms.length) {\n                    var wasMatch = false;\n                    var emptyMatched = 0;\n\n                    for (var i = 0; i < terms.length; i++) {\n                        var term = terms[i];\n                        var res = matchSyntax(lexer, term, node);\n\n                        if (res.match) {\n                            // non-empty match (res.next will refer to another node)\n                            if (res.next !== node) {\n                                lastMatchedTerm = term;\n                            } else {\n                                emptyMatched++;\n                                continue;\n                            }\n\n                            wasMatch = true;\n                            terms.splice(i--, 1);\n                            putResult(buffer, res.match);\n                            node = skipSpaces(res.next);\n                            break;\n                        } else if (res.badNode) {\n                            badNode = res.badNode;\n                            break mismatch;\n                        } else if (res.lastNode) {\n                            lastNode = res.lastNode;\n                        }\n                    }\n\n                    if (!wasMatch) {\n                        // terms left, but they all are optional\n                        if (emptyMatched === terms.length) {\n                            break;\n                        }\n\n                        // not ok\n                        lastNode = node && node.data;\n                        node = beforeMatchNode;\n                        break mismatch;\n                    }\n                }\n\n                if (!lastMatchedTerm && syntaxNode.disallowEmpty) { // don't allow empty match when [ ]!\n                    // empty match but shouldn't\n                    // recover cursor to state before last match and stop matching\n                    lastNode = node && node.data;\n                    node = beforeMatchNode;\n                    break mismatch;\n                }\n\n                break;\n\n            case '||':\n                var beforeMatchNode = node;\n                var lastMatchedTerm = null;\n                var terms = syntaxNode.terms.slice();\n\n                while (terms.length) {\n                    var wasMatch = false;\n                    var emptyMatched = 0;\n\n                    for (var i = 0; i < terms.length; i++) {\n                        var term = terms[i];\n                        var res = matchSyntax(lexer, term, node);\n\n                        if (res.match) {\n                            // non-empty match (res.next will refer to another node)\n                            if (res.next !== node) {\n                                lastMatchedTerm = term;\n                            } else {\n                                emptyMatched++;\n                                continue;\n                            }\n\n                            wasMatch = true;\n                            terms.splice(i--, 1);\n                            putResult(buffer, res.match);\n                            node = skipSpaces(res.next);\n                            break;\n                        } else if (res.badNode) {\n                            badNode = res.badNode;\n                            break mismatch;\n                        } else if (res.lastNode) {\n                            lastNode = res.lastNode;\n                        }\n                    }\n\n                    if (!wasMatch) {\n                        break;\n                    }\n                }\n\n                // don't allow empty match\n                if (!lastMatchedTerm && (emptyMatched !== terms.length || syntaxNode.disallowEmpty)) {\n                    // empty match but shouldn't\n                    // recover cursor to state before last match and stop matching\n                    lastNode = node && node.data;\n                    node = beforeMatchNode;\n                    break mismatch;\n                }\n\n                break;\n        }\n\n        // flush buffer\n        result.push.apply(result, buffer);\n        matchCount++;\n\n        if (!node) {\n            break;\n        }\n\n        if (multiplier.comma) {\n            if (lastComma && lastCommaTermCount === result.length) {\n                // nothing match after comma\n                break mismatch;\n            }\n\n            node = skipSpaces(node);\n            if (node !== null && node.data.type === 'Operator' && node.data.value === ',') {\n                result.push({\n                    syntax: syntaxNode,\n                    match: [{\n                        type: 'ASTNode',\n                        node: node.data,\n                        childrenMatch: null\n                    }]\n                });\n                lastCommaTermCount = result.length;\n                lastComma = node;\n                node = node.next;\n            } else {\n                lastNode = node !== null ? node.data : null;\n                break mismatch;\n            }\n        }\n    }\n\n    // console.log(syntaxNode.type, badNode, lastNode);\n\n    if (lastComma && lastCommaTermCount === result.length) {\n        // nothing match after comma\n        node = lastComma;\n        result.pop();\n    }\n\n    return buildMatchNode(badNode, lastNode, node, matchCount < min ? null : {\n        syntax: syntaxNode,\n        match: result,\n        toJSON: matchToJSON\n    });\n}\n\nfunction matchSyntax(lexer, syntaxNode, node) {\n    var badNode = null;\n    var lastNode = null;\n    var match = null;\n\n    switch (syntaxNode.type) {\n        case 'Group':\n            return matchGroup(lexer, syntaxNode, node);\n\n        case 'Function':\n            // expect a function node\n            if (!node || node.data.type !== 'Function') {\n                break;\n            }\n\n            var keyword = names.keyword(node.data.name);\n            var name = syntaxNode.name.toLowerCase();\n\n            // check function name with vendor consideration\n            if (name !== keyword.name) {\n                break;\n            }\n\n            var res = matchSyntax(lexer, syntaxNode.children, node.data.children.head);\n            if (!res.match || res.next) {\n                badNode = res.badNode || res.lastNode || (res.next ? res.next.data : null) || node.data;\n                break;\n            }\n\n            match = [{\n                type: 'ASTNode',\n                node: node.data,\n                childrenMatch: res.match.match\n            }];\n\n            // Use node.next instead of res.next here since syntax is matching\n            // for internal list and it should be completelly matched (res.next is null at this point).\n            // Therefore function is matched and we are going to next node\n            node = node.next;\n            break;\n\n        case 'Parentheses':\n            if (!node || node.data.type !== 'Parentheses') {\n                break;\n            }\n\n            var res = matchSyntax(lexer, syntaxNode.children, node.data.children.head);\n            if (!res.match || res.next) {\n                badNode = res.badNode || res.lastNode || (res.next ? res.next.data : null) || node.data;  // TODO: case when res.next === null\n                break;\n            }\n\n            match = [{\n                type: 'ASTNode',\n                node: node.data,\n                childrenMatch: res.match.match\n            }];\n\n            node = res.next;\n            break;\n\n        case 'Type':\n            var typeSyntax = lexer.getType(syntaxNode.name);\n            if (!typeSyntax) {\n                throw new Error('Unknown syntax type `' + syntaxNode.name + '`');\n            }\n\n            var res = typeSyntax.match(node);\n            if (!res.match) {\n                badNode = res && res.badNode; // TODO: case when res.next === null\n                lastNode = (res && res.lastNode) || (node && node.data);\n                break;\n            }\n\n            node = res.next;\n            putResult(match = [], res.match);\n            if (match.length === 0) {\n                match = null;\n            }\n            break;\n\n        case 'Property':\n            var propertySyntax = lexer.getProperty(syntaxNode.name);\n            if (!propertySyntax) {\n                throw new Error('Unknown property `' + syntaxNode.name + '`');\n            }\n\n            var res = propertySyntax.match(node);\n            if (!res.match) {\n                badNode = res && res.badNode; // TODO: case when res.next === null\n                lastNode = (res && res.lastNode) || (node && node.data);\n                break;\n            }\n\n            node = res.next;\n            putResult(match = [], res.match);\n            if (match.length === 0) {\n                match = null;\n            }\n            break;\n\n        case 'Keyword':\n            if (!node) {\n                break;\n            }\n\n            if (node.data.type === 'Identifier') {\n                var keyword = names.keyword(node.data.name);\n                var keywordName = keyword.name;\n                var name = syntaxNode.name.toLowerCase();\n\n                // drop \\0 and \\9 hack from keyword name\n                if (keywordName.indexOf('\\\\') !== -1) {\n                    keywordName = keywordName.replace(/\\\\[09].*$/, '');\n                }\n\n                if (name !== keywordName) {\n                    break;\n                }\n            } else {\n                // keyword may to be a number (e.g. font-weight: 400 )\n                if (node.data.type !== 'Number' || node.data.value !== syntaxNode.name) {\n                    break;\n                }\n            }\n\n            match = [{\n                type: 'ASTNode',\n                node: node.data,\n                childrenMatch: null\n            }];\n            node = node.next;\n            break;\n\n        case 'Slash':\n        case 'Comma':\n            if (!node || node.data.type !== 'Operator' || node.data.value !== syntaxNode.value) {\n                break;\n            }\n\n            match = [{\n                type: 'ASTNode',\n                node: node.data,\n                childrenMatch: null\n            }];\n            node = node.next;\n            break;\n\n        case 'String':\n            if (!node || node.data.type !== 'String') {\n                break;\n            }\n\n            match = [{\n                type: 'ASTNode',\n                node: node.data,\n                childrenMatch: null\n            }];\n            node = node.next;\n            break;\n\n        case 'ASTNode':\n            if (node && syntaxNode.match(node)) {\n                match = {\n                    type: 'ASTNode',\n                    node: node.data,\n                    childrenMatch: null\n                };\n                node = node.next;\n            }\n            return buildMatchNode(badNode, lastNode, node, match);\n\n        default:\n            throw new Error('Not implemented yet node type: ' + syntaxNode.type);\n    }\n\n    return buildMatchNode(badNode, lastNode, node, match === null ? null : {\n        syntax: syntaxNode,\n        match: match,\n        toJSON: matchToJSON\n    });\n\n};\n\nmodule.exports = matchSyntax;\n","function getTrace(node) {\n    function hasMatch(matchNode) {\n        if (matchNode.type === 'ASTNode') {\n            if (matchNode.node === node) {\n                result = [];\n                return true;\n            }\n\n            if (matchNode.childrenMatch) {\n                // use for-loop for better perfomance\n                for (var i = 0; i < matchNode.childrenMatch.length; i++) {\n                    if (hasMatch(matchNode.childrenMatch[i])) {\n                        return true;\n                    }\n                }\n            }\n        } else {\n            // use for-loop for better perfomance\n            for (var i = 0; i < matchNode.match.length; i++) {\n                if (hasMatch(matchNode.match[i])) {\n                    if (matchNode.syntax.type === 'Type' ||\n                        matchNode.syntax.type === 'Property' ||\n                        matchNode.syntax.type === 'Keyword') {\n                        result.unshift(matchNode.syntax);\n                    }\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    var result = null;\n\n    if (this.matched !== null) {\n        hasMatch(this.matched);\n    }\n\n    return result;\n}\n\nfunction testNode(match, node, fn) {\n    var trace = getTrace.call(match, node);\n\n    if (trace === null) {\n        return false;\n    }\n\n    return trace.some(fn);\n}\n\nfunction isType(node, type) {\n    return testNode(this, node, function(matchNode) {\n        return matchNode.type === 'Type' && matchNode.name === type;\n    });\n}\n\nfunction isProperty(node, property) {\n    return testNode(this, node, function(matchNode) {\n        return matchNode.type === 'Property' && matchNode.name === property;\n    });\n}\n\nfunction isKeyword(node) {\n    return testNode(this, node, function(matchNode) {\n        return matchNode.type === 'Keyword';\n    });\n}\n\nmodule.exports = {\n    getTrace: getTrace,\n    isType: isType,\n    isProperty: isProperty,\n    isKeyword: isKeyword\n};\n","var List = require('../utils/list');\n\nfunction getFirstMatchNode(matchNode) {\n    if (matchNode.type === 'ASTNode') {\n        return matchNode.node;\n    }\n\n    return getFirstMatchNode(matchNode.match[0]);\n}\n\nfunction getLastMatchNode(matchNode) {\n    if (matchNode.type === 'ASTNode') {\n        return matchNode.node;\n    }\n\n    return getLastMatchNode(matchNode.match[matchNode.match.length - 1]);\n}\n\nfunction matchFragments(lexer, ast, match, type, name) {\n    function findFragments(matchNode) {\n        if (matchNode.type === 'ASTNode') {\n            return;\n        }\n\n        if (matchNode.syntax.type === type &&\n            matchNode.syntax.name === name) {\n            var start = getFirstMatchNode(matchNode);\n            var end = getLastMatchNode(matchNode);\n\n            lexer.syntax.walk(ast, function(node, item, list) {\n                if (node === start) {\n                    var nodes = new List();\n\n                    do {\n                        nodes.appendData(item.data);\n\n                        if (item.data === end) {\n                            break;\n                        }\n\n                        item = item.next;\n                    } while (item !== null);\n\n                    fragments.push({\n                        parent: list,\n                        nodes: nodes\n                    });\n                }\n            });\n        }\n\n        matchNode.match.forEach(findFragments);\n    }\n\n    var fragments = [];\n\n    if (match.matched !== null) {\n        findFragments(match.matched);\n    }\n\n    return fragments;\n}\n\nmodule.exports = {\n    matchFragments: matchFragments\n};\n","var List = require('../utils/list');\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction isValidNumber(value) {\n    // Number.isInteger(value) && value >= 0\n    return (\n        typeof value === 'number' &&\n        isFinite(value) &&\n        Math.floor(value) === value &&\n        value >= 0\n    );\n}\n\nfunction isValidLocation(loc) {\n    return (\n        Boolean(loc) &&\n        isValidNumber(loc.offset) &&\n        isValidNumber(loc.line) &&\n        isValidNumber(loc.column)\n    );\n}\n\nfunction createNodeStructureChecker(type, fields) {\n    return function checkNode(node, warn) {\n        if (!node || node.constructor !== Object) {\n            return warn(node, 'Type of node should be an Object');\n        }\n\n        for (var key in node) {\n            var valid = true;\n\n            if (hasOwnProperty.call(node, key) === false) {\n                continue;\n            }\n\n            if (key === 'type') {\n                if (node.type !== type) {\n                    warn(node, 'Wrong node type `' + node.type + '`, expected `' + type + '`');\n                }\n            } else if (key === 'loc') {\n                if (node.loc === null) {\n                    continue;\n                } else if (node.loc && node.loc.constructor === Object) {\n                    if (typeof node.loc.source !== 'string') {\n                        key += '.source';\n                    } else if (!isValidLocation(node.loc.start)) {\n                        key += '.start';\n                    } else if (!isValidLocation(node.loc.end)) {\n                        key += '.end';\n                    } else {\n                        continue;\n                    }\n                }\n\n                valid = false;\n            } else if (fields.hasOwnProperty(key)) {\n                for (var i = 0, valid = false; !valid && i < fields[key].length; i++) {\n                    var fieldType = fields[key][i];\n\n                    switch (fieldType) {\n                        case String:\n                            valid = typeof node[key] === 'string';\n                            break;\n\n                        case Boolean:\n                            valid = typeof node[key] === 'boolean';\n                            break;\n\n                        case null:\n                            valid = node[key] === null;\n                            break;\n\n                        default:\n                            if (typeof fieldType === 'string') {\n                                valid = node[key] && node[key].type === fieldType;\n                            } else if (Array.isArray(fieldType)) {\n                                valid = node[key] instanceof List;\n                            }\n                    }\n                }\n            } else {\n                warn(node, 'Unknown field `' + key + '` for ' + type + ' node type');\n            }\n\n            if (!valid) {\n                warn(node, 'Bad value for `' + type + '.' + key + '`');\n            }\n        }\n\n        for (var key in fields) {\n            if (hasOwnProperty.call(fields, key) &&\n                hasOwnProperty.call(node, key) === false) {\n                warn(node, 'Field `' + type + '.' + key + '` is missed');\n            }\n        }\n    };\n}\n\nfunction processStructure(name, nodeType) {\n    var structure = nodeType.structure;\n    var fields = {\n        type: String,\n        loc: true\n    };\n    var docs = {\n        type: '\"' + name + '\"'\n    };\n\n    for (var key in structure) {\n        if (hasOwnProperty.call(structure, key) === false) {\n            continue;\n        }\n\n        var docsTypes = [];\n        var fieldTypes = fields[key] = Array.isArray(structure[key])\n            ? structure[key].slice()\n            : [structure[key]];\n\n        for (var i = 0; i < fieldTypes.length; i++) {\n            var fieldType = fieldTypes[i];\n            if (fieldType === String || fieldType === Boolean) {\n                docsTypes.push(fieldType.name);\n            } else if (fieldType === null) {\n                docsTypes.push('null');\n            } else if (typeof fieldType === 'string') {\n                docsTypes.push('<' + fieldType + '>');\n            } else if (Array.isArray(fieldType)) {\n                docsTypes.push('List'); // TODO: use type enum\n            } else {\n                throw new Error('Wrong value `' + fieldType + '` in `' + name + '.' + key + '` structure definition');\n            }\n        }\n\n        docs[key] = docsTypes.join(' | ');\n    }\n\n    return {\n        docs: docs,\n        check: createNodeStructureChecker(name, fields)\n    };\n}\n\nmodule.exports = {\n    getStructureFromConfig: function(config) {\n        var structure = {};\n\n        if (config.node) {\n            for (var name in config.node) {\n                if (hasOwnProperty.call(config.node, name)) {\n                    var nodeType = config.node[name];\n\n                    if (nodeType.structure) {\n                        structure[name] = processStructure(name, nodeType);\n                    } else {\n                        throw new Error('Missed `structure` field in `' + name + '` node type definition');\n                    }\n                }\n            }\n        }\n\n        return structure;\n    }\n};\n","'use strict';\n\nvar SyntaxReferenceError = require('./error').SyntaxReferenceError;\nvar MatchError = require('./error').MatchError;\nvar names = require('../utils/names');\nvar generic = require('./generic');\nvar parse = require('./grammar/parse');\nvar generate = require('./grammar/generate');\nvar walk = require('./grammar/walk');\nvar match = require('./match');\nvar trace = require('./trace');\nvar search = require('./search');\nvar getStructureFromConfig = require('./structure').getStructureFromConfig;\nvar cssWideKeywords = parse('inherit | initial | unset');\nvar cssWideKeywordsWithExpression = parse('inherit | initial | unset | <expression>');\n\nfunction dumpMapSyntax(map, syntaxAsAst) {\n    var result = {};\n\n    for (var name in map) {\n        if (map[name].syntax) {\n            result[name] = syntaxAsAst ? map[name].syntax : generate(map[name].syntax);\n        }\n    }\n\n    return result;\n}\n\nfunction unwrapNode(item) {\n    return item && item.data;\n}\n\nfunction valueHasVar(value) {\n    var hasVar = false;\n\n    this.syntax.walk(value, function(node) {\n        if (node.type === 'Function' && node.name.toLowerCase() === 'var') {\n            hasVar = true;\n        }\n    });\n\n    return hasVar;\n}\n\n// check node is \\0 or \\9 hack\nfunction isHack(node) {\n    return node.type === 'Identifier' && /^\\\\[09]/.test(node.name);\n}\n\n// white spaces, comments and some hacks can to be ignored at the end of value\nfunction isNextMayToBeIgnored(cursor) {\n    while (cursor !== null) {\n        if (cursor.data.type !== 'WhiteSpace' &&\n            cursor.data.type !== 'Comment' &&\n            !isHack(cursor.data)) {\n            return false;\n        }\n\n        cursor = cursor.next;\n    }\n\n    return true;\n}\n\nfunction buildMatchResult(match, error) {\n    return {\n        matched: match,\n        error: error,\n        getTrace: trace.getTrace,\n        isType: trace.isType,\n        isProperty: trace.isProperty,\n        isKeyword: trace.isKeyword\n    };\n}\n\nfunction matchSyntax(lexer, syntax, node, useCommon) {\n    var result;\n\n    if (!node || !node.children) {\n        return buildMatchResult(null, new Error('Node has no children'));\n    }\n\n    if (valueHasVar.call(lexer, node)) {\n        return buildMatchResult(null, new Error('Matching for a tree with var() is not supported'));\n    }\n\n    if (useCommon) {\n        result = match(lexer, lexer.valueCommonSyntax, node.children.head);\n    }\n\n    if (!useCommon || !result.match) {\n        result = syntax.match(node.children.head);\n        if (!result.match) {\n            return buildMatchResult(null, new MatchError('Mismatch', lexer, syntax.syntax, node, result.badNode || unwrapNode(result.next) || node));\n        }\n    }\n\n    // enhance top-level match wrapper\n    if (result.match.type === 'ASTNode') {\n        result.match = {\n            syntax: {\n                type: syntax.type,\n                name: syntax.name\n            },\n            match: [result.match]\n        };\n    } else if (result.match.syntax.type === 'Group') {\n        result.match.syntax = {\n            type: syntax.type,\n            name: syntax.name\n        };\n    }\n\n    if (result.next && !isNextMayToBeIgnored(result.next)) {\n        return buildMatchResult(null, new MatchError('Uncomplete match', lexer, syntax.syntax, node, result.badNode || unwrapNode(result.next) || node));\n    }\n\n    return buildMatchResult(result.match, null);\n}\n\nvar Lexer = function(config, syntax, structure) {\n    this.valueCommonSyntax = cssWideKeywords;\n    this.syntax = syntax;\n    this.generic = false;\n    this.properties = {};\n    this.types = {};\n    this.structure = structure || getStructureFromConfig(config);\n\n    if (config) {\n        if (config.generic) {\n            this.generic = true;\n            for (var name in generic) {\n                this.addType_(name, generic[name]);\n            }\n        }\n\n        if (config.types) {\n            for (var name in config.types) {\n                this.addType_(name, config.types[name]);\n            }\n        }\n\n        if (config.properties) {\n            for (var name in config.properties) {\n                this.addProperty_(name, config.properties[name]);\n            }\n        }\n    }\n};\n\nLexer.prototype = {\n    structure: {},\n    checkStructure: function(ast) {\n        function collectWarning(node, message) {\n            warns.push({\n                node: node,\n                message: message\n            });\n        }\n\n        var structure = this.structure;\n        var warns = [];\n\n        this.syntax.walk(ast, function(node) {\n            if (structure.hasOwnProperty(node.type)) {\n                structure[node.type].check(node, collectWarning);\n            } else {\n                collectWarning(node, 'Unknown node type `' + node.type + '`');\n            }\n        });\n\n        return warns.length ? warns : false;\n    },\n\n    createDescriptor: function(syntax, type, name) {\n        var self = this;\n        var descriptor = {\n            type: type,\n            name: name,\n            syntax: null,\n            match: null\n        };\n\n        if (typeof syntax === 'function') {\n            // convert syntax to pseudo syntax node\n            // NOTE: that's not a part of match result tree\n            syntax = {\n                type: 'ASTNode',\n                match: syntax\n            };\n\n            descriptor.match = function(item) {\n                return match(self, syntax, item);\n            };\n        } else {\n            if (typeof syntax === 'string') {\n                // lazy parsing on first access\n                Object.defineProperty(descriptor, 'syntax', {\n                    get: function() {\n                        Object.defineProperty(descriptor, 'syntax', {\n                            value: parse(syntax)\n                        });\n\n                        return descriptor.syntax;\n                    }\n                });\n            } else {\n                descriptor.syntax = syntax;\n            }\n\n            descriptor.match = function(item) {\n                return match(self, descriptor.syntax, item);\n            };\n        }\n\n        return descriptor;\n    },\n    addProperty_: function(name, syntax) {\n        this.properties[name] = this.createDescriptor(syntax, 'Property', name);\n    },\n    addType_: function(name, syntax) {\n        this.types[name] = this.createDescriptor(syntax, 'Type', name);\n\n        if (syntax === generic.expression) {\n            this.valueCommonSyntax = cssWideKeywordsWithExpression;\n        }\n    },\n\n    matchDeclaration: function(node) {\n        if (node.type !== 'Declaration') {\n            return buildMatchResult(null, new Error('Not a Declaration node'));\n        }\n\n        return this.matchProperty(node.property, node.value);\n    },\n    matchProperty: function(propertyName, value) {\n        var property = names.property(propertyName);\n\n        // don't match syntax for a custom property\n        if (property.custom) {\n            return buildMatchResult(null, new Error('Lexer matching doesn\\'t applicable for custom properties'));\n        }\n\n        var propertySyntax = property.vendor\n            ? this.getProperty(property.name) || this.getProperty(property.basename)\n            : this.getProperty(property.name);\n\n        if (!propertySyntax) {\n            return buildMatchResult(null, new SyntaxReferenceError('Unknown property', propertyName));\n        }\n\n        return matchSyntax(this, propertySyntax, value, true);\n    },\n    matchType: function(typeName, value) {\n        var typeSyntax = this.getType(typeName);\n\n        if (!typeSyntax) {\n            return buildMatchResult(null, new SyntaxReferenceError('Unknown type', typeName));\n        }\n\n        return matchSyntax(this, typeSyntax, value, false);\n    },\n    match: function(syntax, value) {\n        if (!syntax || !syntax.type) {\n            return buildMatchResult(null, new SyntaxReferenceError('Bad syntax'));\n        }\n\n        if (!syntax.match) {\n            syntax = this.createDescriptor(syntax);\n        }\n\n        return matchSyntax(this, syntax, value, false);\n    },\n\n    findValueFragments: function(propertyName, value, type, name) {\n        return search.matchFragments(this, value, this.matchProperty(propertyName, value), type, name);\n    },\n    findDeclarationValueFragments: function(declaration, type, name) {\n        return search.matchFragments(this, declaration.value, this.matchDeclaration(declaration), type, name);\n    },\n    findAllFragments: function(ast, type, name) {\n        var result = [];\n\n        this.syntax.walk(ast, {\n            visit: 'Declaration',\n            enter: function(declaration) {\n                result.push.apply(result, this.findDeclarationValueFragments(declaration, type, name));\n            }.bind(this)\n        });\n\n        return result;\n    },\n\n    getProperty: function(name) {\n        return this.properties.hasOwnProperty(name) ? this.properties[name] : null;\n    },\n    getType: function(name) {\n        return this.types.hasOwnProperty(name) ? this.types[name] : null;\n    },\n\n    validate: function() {\n        function validate(syntax, name, broken, descriptor) {\n            if (broken.hasOwnProperty(name)) {\n                return broken[name];\n            }\n\n            broken[name] = false;\n            if (descriptor.syntax !== null) {\n                walk(descriptor.syntax, function(node) {\n                    if (node.type !== 'Type' && node.type !== 'Property') {\n                        return;\n                    }\n\n                    var map = node.type === 'Type' ? syntax.types : syntax.properties;\n                    var brokenMap = node.type === 'Type' ? brokenTypes : brokenProperties;\n\n                    if (!map.hasOwnProperty(node.name) || validate(syntax, node.name, brokenMap, map[node.name])) {\n                        broken[name] = true;\n                    }\n                }, this);\n            }\n        }\n\n        var brokenTypes = {};\n        var brokenProperties = {};\n\n        for (var key in this.types) {\n            validate(this, key, brokenTypes, this.types[key]);\n        }\n\n        for (var key in this.properties) {\n            validate(this, key, brokenProperties, this.properties[key]);\n        }\n\n        brokenTypes = Object.keys(brokenTypes).filter(function(name) {\n            return brokenTypes[name];\n        });\n        brokenProperties = Object.keys(brokenProperties).filter(function(name) {\n            return brokenProperties[name];\n        });\n\n        if (brokenTypes.length || brokenProperties.length) {\n            return {\n                types: brokenTypes,\n                properties: brokenProperties\n            };\n        }\n\n        return null;\n    },\n    dump: function(syntaxAsAst) {\n        return {\n            generic: this.generic,\n            types: dumpMapSyntax(this.types, syntaxAsAst),\n            properties: dumpMapSyntax(this.properties, syntaxAsAst)\n        };\n    },\n    toString: function() {\n        return JSON.stringify(this.dump());\n    }\n};\n\nmodule.exports = Lexer;\n","'use strict';\n\nvar Tokenizer = require('../tokenizer');\nvar List = require('../utils/list');\nvar sequence = require('./sequence');\nvar noop = function() {};\n\nfunction createParseContext(name) {\n    return function() {\n        return this[name]();\n    };\n}\n\nfunction processConfig(config) {\n    var parserConfig = {\n        context: {},\n        scope: {},\n        atrule: {},\n        pseudo: {}\n    };\n\n    if (config.parseContext) {\n        for (var name in config.parseContext) {\n            switch (typeof config.parseContext[name]) {\n                case 'function':\n                    parserConfig.context[name] = config.parseContext[name];\n                    break;\n\n                case 'string':\n                    parserConfig.context[name] = createParseContext(config.parseContext[name]);\n                    break;\n            }\n        }\n    }\n\n    if (config.scope) {\n        for (var name in config.scope) {\n            parserConfig.scope[name] = config.scope[name];\n        }\n    }\n\n    if (config.atrule) {\n        for (var name in config.atrule) {\n            var atrule = config.atrule[name];\n\n            if (atrule.parse) {\n                parserConfig.atrule[name] = atrule.parse;\n            }\n        }\n    }\n\n    if (config.pseudo) {\n        for (var name in config.pseudo) {\n            var pseudo = config.pseudo[name];\n\n            if (pseudo.parse) {\n                parserConfig.pseudo[name] = pseudo.parse;\n            }\n        }\n    }\n\n    if (config.node) {\n        for (var name in config.node) {\n            parserConfig[name] = config.node[name].parse;\n        }\n    }\n\n    return parserConfig;\n}\n\nmodule.exports = function createParser(config) {\n    var parser = {\n        scanner: new Tokenizer(),\n        filename: '<unknown>',\n        needPositions: false,\n        onParseError: noop,\n        onParseErrorThrow: false,\n        parseAtrulePrelude: true,\n        parseRulePrelude: true,\n        parseValue: true,\n        parseCustomProperty: false,\n\n        readSequence: sequence,\n\n        createList: function() {\n            return new List();\n        },\n        createSingleNodeList: function(node) {\n            return new List().appendData(node);\n        },\n        getFirstListNode: function(list) {\n            return list && list.first();\n        },\n        getLastListNode: function(list) {\n            return list.last();\n        },\n\n        parseWithFallback: function(consumer, fallback) {\n            var startToken = this.scanner.currentToken;\n\n            try {\n                return consumer.call(this);\n            } catch (e) {\n                if (this.onParseErrorThrow) {\n                    throw e;\n                }\n\n                var fallbackNode = fallback.call(this, startToken);\n\n                this.onParseErrorThrow = true;\n                this.onParseError(e, fallbackNode);\n                this.onParseErrorThrow = false;\n\n                return fallbackNode;\n            }\n        },\n\n        getLocation: function(start, end) {\n            if (this.needPositions) {\n                return this.scanner.getLocationRange(\n                    start,\n                    end,\n                    this.filename\n                );\n            }\n\n            return null;\n        },\n        getLocationFromList: function(list) {\n            if (this.needPositions) {\n                var head = this.getFirstListNode(list);\n                var tail = this.getLastListNode(list);\n                return this.scanner.getLocationRange(\n                    head !== null ? head.loc.start.offset - this.scanner.startOffset : this.scanner.tokenStart,\n                    tail !== null ? tail.loc.end.offset - this.scanner.startOffset : this.scanner.tokenStart,\n                    this.filename\n                );\n            }\n\n            return null;\n        }\n    };\n\n    config = processConfig(config || {});\n    for (var key in config) {\n        parser[key] = config[key];\n    }\n\n    return function(source, options) {\n        options = options || {};\n\n        var context = options.context || 'default';\n        var ast;\n\n        parser.scanner.setSource(source, options.offset, options.line, options.column);\n        parser.filename = options.filename || '<unknown>';\n        parser.needPositions = Boolean(options.positions);\n        parser.onParseError = typeof options.onParseError === 'function' ? options.onParseError : noop;\n        parser.onParseErrorThrow = false;\n        parser.parseAtrulePrelude = 'parseAtrulePrelude' in options ? Boolean(options.parseAtrulePrelude) : true;\n        parser.parseRulePrelude = 'parseRulePrelude' in options ? Boolean(options.parseRulePrelude) : true;\n        parser.parseValue = 'parseValue' in options ? Boolean(options.parseValue) : true;\n        parser.parseCustomProperty = 'parseCustomProperty' in options ? Boolean(options.parseCustomProperty) : false;\n\n        if (!parser.context.hasOwnProperty(context)) {\n            throw new Error('Unknown context `' + context + '`');\n        }\n\n        ast = parser.context[context].call(parser, options);\n\n        if (!parser.scanner.eof) {\n            parser.scanner.error();\n        }\n\n        return ast;\n    };\n};\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n *\n * Based on the Base 64 VLQ implementation in Closure Compiler:\n * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java\n *\n * Copyright 2011 The Closure Compiler Authors. All rights reserved.\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *  * Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above\n *    copyright notice, this list of conditions and the following\n *    disclaimer in the documentation and/or other materials provided\n *    with the distribution.\n *  * Neither the name of Google Inc. nor the names of its\n *    contributors may be used to endorse or promote products derived\n *    from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nvar base64 = require('./base64');\n\n// A single base 64 digit can contain 6 bits of data. For the base 64 variable\n// length quantities we use in the source map spec, the first bit is the sign,\n// the next four bits are the actual value, and the 6th bit is the\n// continuation bit. The continuation bit tells us whether there are more\n// digits in this value following this digit.\n//\n//   Continuation\n//   |    Sign\n//   |    |\n//   V    V\n//   101011\n\nvar VLQ_BASE_SHIFT = 5;\n\n// binary: 100000\nvar VLQ_BASE = 1 << VLQ_BASE_SHIFT;\n\n// binary: 011111\nvar VLQ_BASE_MASK = VLQ_BASE - 1;\n\n// binary: 100000\nvar VLQ_CONTINUATION_BIT = VLQ_BASE;\n\n/**\n * Converts from a two-complement value to a value where the sign bit is\n * placed in the least significant bit.  For example, as decimals:\n *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)\n *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)\n */\nfunction toVLQSigned(aValue) {\n  return aValue < 0\n    ? ((-aValue) << 1) + 1\n    : (aValue << 1) + 0;\n}\n\n/**\n * Converts to a two-complement value from a value where the sign bit is\n * placed in the least significant bit.  For example, as decimals:\n *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1\n *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2\n */\nfunction fromVLQSigned(aValue) {\n  var isNegative = (aValue & 1) === 1;\n  var shifted = aValue >> 1;\n  return isNegative\n    ? -shifted\n    : shifted;\n}\n\n/**\n * Returns the base 64 VLQ encoded value.\n */\nexports.encode = function base64VLQ_encode(aValue) {\n  var encoded = \"\";\n  var digit;\n\n  var vlq = toVLQSigned(aValue);\n\n  do {\n    digit = vlq & VLQ_BASE_MASK;\n    vlq >>>= VLQ_BASE_SHIFT;\n    if (vlq > 0) {\n      // There are still more digits in this value, so we must make sure the\n      // continuation bit is marked.\n      digit |= VLQ_CONTINUATION_BIT;\n    }\n    encoded += base64.encode(digit);\n  } while (vlq > 0);\n\n  return encoded;\n};\n\n/**\n * Decodes the next base 64 VLQ value from the given string and returns the\n * value and the rest of the string via the out parameter.\n */\nexports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {\n  var strLen = aStr.length;\n  var result = 0;\n  var shift = 0;\n  var continuation, digit;\n\n  do {\n    if (aIndex >= strLen) {\n      throw new Error(\"Expected more digits in base 64 VLQ value.\");\n    }\n\n    digit = base64.decode(aStr.charCodeAt(aIndex++));\n    if (digit === -1) {\n      throw new Error(\"Invalid base64 digit: \" + aStr.charAt(aIndex - 1));\n    }\n\n    continuation = !!(digit & VLQ_CONTINUATION_BIT);\n    digit &= VLQ_BASE_MASK;\n    result = result + (digit << shift);\n    shift += VLQ_BASE_SHIFT;\n  } while (continuation);\n\n  aOutParam.value = fromVLQSigned(result);\n  aOutParam.rest = aIndex;\n};\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = require('./util');\nvar has = Object.prototype.hasOwnProperty;\nvar hasNativeMap = typeof Map !== \"undefined\";\n\n/**\n * A data structure which is a combination of an array and a set. Adding a new\n * member is O(1), testing for membership is O(1), and finding the index of an\n * element is O(1). Removing elements from the set is not supported. Only\n * strings are supported for membership.\n */\nfunction ArraySet() {\n  this._array = [];\n  this._set = hasNativeMap ? new Map() : Object.create(null);\n}\n\n/**\n * Static method for creating ArraySet instances from an existing array.\n */\nArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {\n  var set = new ArraySet();\n  for (var i = 0, len = aArray.length; i < len; i++) {\n    set.add(aArray[i], aAllowDuplicates);\n  }\n  return set;\n};\n\n/**\n * Return how many unique items are in this ArraySet. If duplicates have been\n * added, than those do not count towards the size.\n *\n * @returns Number\n */\nArraySet.prototype.size = function ArraySet_size() {\n  return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;\n};\n\n/**\n * Add the given string to this set.\n *\n * @param String aStr\n */\nArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {\n  var sStr = hasNativeMap ? aStr : util.toSetString(aStr);\n  var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);\n  var idx = this._array.length;\n  if (!isDuplicate || aAllowDuplicates) {\n    this._array.push(aStr);\n  }\n  if (!isDuplicate) {\n    if (hasNativeMap) {\n      this._set.set(aStr, idx);\n    } else {\n      this._set[sStr] = idx;\n    }\n  }\n};\n\n/**\n * Is the given string a member of this set?\n *\n * @param String aStr\n */\nArraySet.prototype.has = function ArraySet_has(aStr) {\n  if (hasNativeMap) {\n    return this._set.has(aStr);\n  } else {\n    var sStr = util.toSetString(aStr);\n    return has.call(this._set, sStr);\n  }\n};\n\n/**\n * What is the index of the given string in the array?\n *\n * @param String aStr\n */\nArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {\n  if (hasNativeMap) {\n    var idx = this._set.get(aStr);\n    if (idx >= 0) {\n        return idx;\n    }\n  } else {\n    var sStr = util.toSetString(aStr);\n    if (has.call(this._set, sStr)) {\n      return this._set[sStr];\n    }\n  }\n\n  throw new Error('\"' + aStr + '\" is not in the set.');\n};\n\n/**\n * What is the element at the given index?\n *\n * @param Number aIdx\n */\nArraySet.prototype.at = function ArraySet_at(aIdx) {\n  if (aIdx >= 0 && aIdx < this._array.length) {\n    return this._array[aIdx];\n  }\n  throw new Error('No element indexed by ' + aIdx);\n};\n\n/**\n * Returns the array representation of this set (which has the proper indices\n * indicated by indexOf). Note that this is a copy of the internal array used\n * for storing the members so that no one can mess with internal state.\n */\nArraySet.prototype.toArray = function ArraySet_toArray() {\n  return this._array.slice();\n};\n\nexports.ArraySet = ArraySet;\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2014 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = require('./util');\n\n/**\n * Determine whether mappingB is after mappingA with respect to generated\n * position.\n */\nfunction generatedPositionAfter(mappingA, mappingB) {\n  // Optimized for most common case\n  var lineA = mappingA.generatedLine;\n  var lineB = mappingB.generatedLine;\n  var columnA = mappingA.generatedColumn;\n  var columnB = mappingB.generatedColumn;\n  return lineB > lineA || lineB == lineA && columnB >= columnA ||\n         util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;\n}\n\n/**\n * A data structure to provide a sorted view of accumulated mappings in a\n * performance conscious manner. It trades a neglibable overhead in general\n * case for a large speedup in case of mappings being added in order.\n */\nfunction MappingList() {\n  this._array = [];\n  this._sorted = true;\n  // Serves as infimum\n  this._last = {generatedLine: -1, generatedColumn: 0};\n}\n\n/**\n * Iterate through internal items. This method takes the same arguments that\n * `Array.prototype.forEach` takes.\n *\n * NOTE: The order of the mappings is NOT guaranteed.\n */\nMappingList.prototype.unsortedForEach =\n  function MappingList_forEach(aCallback, aThisArg) {\n    this._array.forEach(aCallback, aThisArg);\n  };\n\n/**\n * Add the given source mapping.\n *\n * @param Object aMapping\n */\nMappingList.prototype.add = function MappingList_add(aMapping) {\n  if (generatedPositionAfter(this._last, aMapping)) {\n    this._last = aMapping;\n    this._array.push(aMapping);\n  } else {\n    this._sorted = false;\n    this._array.push(aMapping);\n  }\n};\n\n/**\n * Returns the flat, sorted array of mappings. The mappings are sorted by\n * generated position.\n *\n * WARNING: This method returns internal data without copying, for\n * performance. The return value must NOT be mutated, and should be treated as\n * an immutable borrow. If you want to take ownership, you must make your own\n * copy.\n */\nMappingList.prototype.toArray = function MappingList_toArray() {\n  if (!this._sorted) {\n    this._array.sort(util.compareByGeneratedPositionsInflated);\n    this._sorted = true;\n  }\n  return this._array;\n};\n\nexports.MappingList = MappingList;\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar base64VLQ = require('./base64-vlq');\nvar util = require('./util');\nvar ArraySet = require('./array-set').ArraySet;\nvar MappingList = require('./mapping-list').MappingList;\n\n/**\n * An instance of the SourceMapGenerator represents a source map which is\n * being built incrementally. You may pass an object with the following\n * properties:\n *\n *   - file: The filename of the generated source.\n *   - sourceRoot: A root for all relative URLs in this source map.\n */\nfunction SourceMapGenerator(aArgs) {\n  if (!aArgs) {\n    aArgs = {};\n  }\n  this._file = util.getArg(aArgs, 'file', null);\n  this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);\n  this._skipValidation = util.getArg(aArgs, 'skipValidation', false);\n  this._sources = new ArraySet();\n  this._names = new ArraySet();\n  this._mappings = new MappingList();\n  this._sourcesContents = null;\n}\n\nSourceMapGenerator.prototype._version = 3;\n\n/**\n * Creates a new SourceMapGenerator based on a SourceMapConsumer\n *\n * @param aSourceMapConsumer The SourceMap.\n */\nSourceMapGenerator.fromSourceMap =\n  function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {\n    var sourceRoot = aSourceMapConsumer.sourceRoot;\n    var generator = new SourceMapGenerator({\n      file: aSourceMapConsumer.file,\n      sourceRoot: sourceRoot\n    });\n    aSourceMapConsumer.eachMapping(function (mapping) {\n      var newMapping = {\n        generated: {\n          line: mapping.generatedLine,\n          column: mapping.generatedColumn\n        }\n      };\n\n      if (mapping.source != null) {\n        newMapping.source = mapping.source;\n        if (sourceRoot != null) {\n          newMapping.source = util.relative(sourceRoot, newMapping.source);\n        }\n\n        newMapping.original = {\n          line: mapping.originalLine,\n          column: mapping.originalColumn\n        };\n\n        if (mapping.name != null) {\n          newMapping.name = mapping.name;\n        }\n      }\n\n      generator.addMapping(newMapping);\n    });\n    aSourceMapConsumer.sources.forEach(function (sourceFile) {\n      var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        generator.setSourceContent(sourceFile, content);\n      }\n    });\n    return generator;\n  };\n\n/**\n * Add a single mapping from original source line and column to the generated\n * source's line and column for this source map being created. The mapping\n * object should have the following properties:\n *\n *   - generated: An object with the generated line and column positions.\n *   - original: An object with the original line and column positions.\n *   - source: The original source file (relative to the sourceRoot).\n *   - name: An optional original token name for this mapping.\n */\nSourceMapGenerator.prototype.addMapping =\n  function SourceMapGenerator_addMapping(aArgs) {\n    var generated = util.getArg(aArgs, 'generated');\n    var original = util.getArg(aArgs, 'original', null);\n    var source = util.getArg(aArgs, 'source', null);\n    var name = util.getArg(aArgs, 'name', null);\n\n    if (!this._skipValidation) {\n      this._validateMapping(generated, original, source, name);\n    }\n\n    if (source != null) {\n      source = String(source);\n      if (!this._sources.has(source)) {\n        this._sources.add(source);\n      }\n    }\n\n    if (name != null) {\n      name = String(name);\n      if (!this._names.has(name)) {\n        this._names.add(name);\n      }\n    }\n\n    this._mappings.add({\n      generatedLine: generated.line,\n      generatedColumn: generated.column,\n      originalLine: original != null && original.line,\n      originalColumn: original != null && original.column,\n      source: source,\n      name: name\n    });\n  };\n\n/**\n * Set the source content for a source file.\n */\nSourceMapGenerator.prototype.setSourceContent =\n  function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {\n    var source = aSourceFile;\n    if (this._sourceRoot != null) {\n      source = util.relative(this._sourceRoot, source);\n    }\n\n    if (aSourceContent != null) {\n      // Add the source content to the _sourcesContents map.\n      // Create a new _sourcesContents map if the property is null.\n      if (!this._sourcesContents) {\n        this._sourcesContents = Object.create(null);\n      }\n      this._sourcesContents[util.toSetString(source)] = aSourceContent;\n    } else if (this._sourcesContents) {\n      // Remove the source file from the _sourcesContents map.\n      // If the _sourcesContents map is empty, set the property to null.\n      delete this._sourcesContents[util.toSetString(source)];\n      if (Object.keys(this._sourcesContents).length === 0) {\n        this._sourcesContents = null;\n      }\n    }\n  };\n\n/**\n * Applies the mappings of a sub-source-map for a specific source file to the\n * source map being generated. Each mapping to the supplied source file is\n * rewritten using the supplied source map. Note: The resolution for the\n * resulting mappings is the minimium of this map and the supplied map.\n *\n * @param aSourceMapConsumer The source map to be applied.\n * @param aSourceFile Optional. The filename of the source file.\n *        If omitted, SourceMapConsumer's file property will be used.\n * @param aSourceMapPath Optional. The dirname of the path to the source map\n *        to be applied. If relative, it is relative to the SourceMapConsumer.\n *        This parameter is needed when the two source maps aren't in the same\n *        directory, and the source map to be applied contains relative source\n *        paths. If so, those relative source paths need to be rewritten\n *        relative to the SourceMapGenerator.\n */\nSourceMapGenerator.prototype.applySourceMap =\n  function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {\n    var sourceFile = aSourceFile;\n    // If aSourceFile is omitted, we will use the file property of the SourceMap\n    if (aSourceFile == null) {\n      if (aSourceMapConsumer.file == null) {\n        throw new Error(\n          'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +\n          'or the source map\\'s \"file\" property. Both were omitted.'\n        );\n      }\n      sourceFile = aSourceMapConsumer.file;\n    }\n    var sourceRoot = this._sourceRoot;\n    // Make \"sourceFile\" relative if an absolute Url is passed.\n    if (sourceRoot != null) {\n      sourceFile = util.relative(sourceRoot, sourceFile);\n    }\n    // Applying the SourceMap can add and remove items from the sources and\n    // the names array.\n    var newSources = new ArraySet();\n    var newNames = new ArraySet();\n\n    // Find mappings for the \"sourceFile\"\n    this._mappings.unsortedForEach(function (mapping) {\n      if (mapping.source === sourceFile && mapping.originalLine != null) {\n        // Check if it can be mapped by the source map, then update the mapping.\n        var original = aSourceMapConsumer.originalPositionFor({\n          line: mapping.originalLine,\n          column: mapping.originalColumn\n        });\n        if (original.source != null) {\n          // Copy mapping\n          mapping.source = original.source;\n          if (aSourceMapPath != null) {\n            mapping.source = util.join(aSourceMapPath, mapping.source)\n          }\n          if (sourceRoot != null) {\n            mapping.source = util.relative(sourceRoot, mapping.source);\n          }\n          mapping.originalLine = original.line;\n          mapping.originalColumn = original.column;\n          if (original.name != null) {\n            mapping.name = original.name;\n          }\n        }\n      }\n\n      var source = mapping.source;\n      if (source != null && !newSources.has(source)) {\n        newSources.add(source);\n      }\n\n      var name = mapping.name;\n      if (name != null && !newNames.has(name)) {\n        newNames.add(name);\n      }\n\n    }, this);\n    this._sources = newSources;\n    this._names = newNames;\n\n    // Copy sourcesContents of applied map.\n    aSourceMapConsumer.sources.forEach(function (sourceFile) {\n      var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        if (aSourceMapPath != null) {\n          sourceFile = util.join(aSourceMapPath, sourceFile);\n        }\n        if (sourceRoot != null) {\n          sourceFile = util.relative(sourceRoot, sourceFile);\n        }\n        this.setSourceContent(sourceFile, content);\n      }\n    }, this);\n  };\n\n/**\n * A mapping can have one of the three levels of data:\n *\n *   1. Just the generated position.\n *   2. The Generated position, original position, and original source.\n *   3. Generated and original position, original source, as well as a name\n *      token.\n *\n * To maintain consistency, we validate that any new mapping being added falls\n * in to one of these categories.\n */\nSourceMapGenerator.prototype._validateMapping =\n  function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,\n                                              aName) {\n    // When aOriginal is truthy but has empty values for .line and .column,\n    // it is most likely a programmer error. In this case we throw a very\n    // specific error message to try to guide them the right way.\n    // For example: https://github.com/Polymer/polymer-bundler/pull/519\n    if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {\n        throw new Error(\n            'original.line and original.column are not numbers -- you probably meant to omit ' +\n            'the original mapping entirely and only map the generated position. If so, pass ' +\n            'null for the original mapping instead of an object with empty or null values.'\n        );\n    }\n\n    if (aGenerated && 'line' in aGenerated && 'column' in aGenerated\n        && aGenerated.line > 0 && aGenerated.column >= 0\n        && !aOriginal && !aSource && !aName) {\n      // Case 1.\n      return;\n    }\n    else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated\n             && aOriginal && 'line' in aOriginal && 'column' in aOriginal\n             && aGenerated.line > 0 && aGenerated.column >= 0\n             && aOriginal.line > 0 && aOriginal.column >= 0\n             && aSource) {\n      // Cases 2 and 3.\n      return;\n    }\n    else {\n      throw new Error('Invalid mapping: ' + JSON.stringify({\n        generated: aGenerated,\n        source: aSource,\n        original: aOriginal,\n        name: aName\n      }));\n    }\n  };\n\n/**\n * Serialize the accumulated mappings in to the stream of base 64 VLQs\n * specified by the source map format.\n */\nSourceMapGenerator.prototype._serializeMappings =\n  function SourceMapGenerator_serializeMappings() {\n    var previousGeneratedColumn = 0;\n    var previousGeneratedLine = 1;\n    var previousOriginalColumn = 0;\n    var previousOriginalLine = 0;\n    var previousName = 0;\n    var previousSource = 0;\n    var result = '';\n    var next;\n    var mapping;\n    var nameIdx;\n    var sourceIdx;\n\n    var mappings = this._mappings.toArray();\n    for (var i = 0, len = mappings.length; i < len; i++) {\n      mapping = mappings[i];\n      next = ''\n\n      if (mapping.generatedLine !== previousGeneratedLine) {\n        previousGeneratedColumn = 0;\n        while (mapping.generatedLine !== previousGeneratedLine) {\n          next += ';';\n          previousGeneratedLine++;\n        }\n      }\n      else {\n        if (i > 0) {\n          if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {\n            continue;\n          }\n          next += ',';\n        }\n      }\n\n      next += base64VLQ.encode(mapping.generatedColumn\n                                 - previousGeneratedColumn);\n      previousGeneratedColumn = mapping.generatedColumn;\n\n      if (mapping.source != null) {\n        sourceIdx = this._sources.indexOf(mapping.source);\n        next += base64VLQ.encode(sourceIdx - previousSource);\n        previousSource = sourceIdx;\n\n        // lines are stored 0-based in SourceMap spec version 3\n        next += base64VLQ.encode(mapping.originalLine - 1\n                                   - previousOriginalLine);\n        previousOriginalLine = mapping.originalLine - 1;\n\n        next += base64VLQ.encode(mapping.originalColumn\n                                   - previousOriginalColumn);\n        previousOriginalColumn = mapping.originalColumn;\n\n        if (mapping.name != null) {\n          nameIdx = this._names.indexOf(mapping.name);\n          next += base64VLQ.encode(nameIdx - previousName);\n          previousName = nameIdx;\n        }\n      }\n\n      result += next;\n    }\n\n    return result;\n  };\n\nSourceMapGenerator.prototype._generateSourcesContent =\n  function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {\n    return aSources.map(function (source) {\n      if (!this._sourcesContents) {\n        return null;\n      }\n      if (aSourceRoot != null) {\n        source = util.relative(aSourceRoot, source);\n      }\n      var key = util.toSetString(source);\n      return Object.prototype.hasOwnProperty.call(this._sourcesContents, key)\n        ? this._sourcesContents[key]\n        : null;\n    }, this);\n  };\n\n/**\n * Externalize the source map.\n */\nSourceMapGenerator.prototype.toJSON =\n  function SourceMapGenerator_toJSON() {\n    var map = {\n      version: this._version,\n      sources: this._sources.toArray(),\n      names: this._names.toArray(),\n      mappings: this._serializeMappings()\n    };\n    if (this._file != null) {\n      map.file = this._file;\n    }\n    if (this._sourceRoot != null) {\n      map.sourceRoot = this._sourceRoot;\n    }\n    if (this._sourcesContents) {\n      map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);\n    }\n\n    return map;\n  };\n\n/**\n * Render the source map being generated to a string.\n */\nSourceMapGenerator.prototype.toString =\n  function SourceMapGenerator_toString() {\n    return JSON.stringify(this.toJSON());\n  };\n\nexports.SourceMapGenerator = SourceMapGenerator;\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\n// It turns out that some (most?) JavaScript engines don't self-host\n// `Array.prototype.sort`. This makes sense because C++ will likely remain\n// faster than JS when doing raw CPU-intensive sorting. However, when using a\n// custom comparator function, calling back and forth between the VM's C++ and\n// JIT'd JS is rather slow *and* loses JIT type information, resulting in\n// worse generated code for the comparator function than would be optimal. In\n// fact, when sorting with a comparator, these costs outweigh the benefits of\n// sorting in C++. By using our own JS-implemented Quick Sort (below), we get\n// a ~3500ms mean speed-up in `bench/bench.html`.\n\n/**\n * Swap the elements indexed by `x` and `y` in the array `ary`.\n *\n * @param {Array} ary\n *        The array.\n * @param {Number} x\n *        The index of the first item.\n * @param {Number} y\n *        The index of the second item.\n */\nfunction swap(ary, x, y) {\n  var temp = ary[x];\n  ary[x] = ary[y];\n  ary[y] = temp;\n}\n\n/**\n * Returns a random integer within the range `low .. high` inclusive.\n *\n * @param {Number} low\n *        The lower bound on the range.\n * @param {Number} high\n *        The upper bound on the range.\n */\nfunction randomIntInRange(low, high) {\n  return Math.round(low + (Math.random() * (high - low)));\n}\n\n/**\n * The Quick Sort algorithm.\n *\n * @param {Array} ary\n *        An array to sort.\n * @param {function} comparator\n *        Function to use to compare two items.\n * @param {Number} p\n *        Start index of the array\n * @param {Number} r\n *        End index of the array\n */\nfunction doQuickSort(ary, comparator, p, r) {\n  // If our lower bound is less than our upper bound, we (1) partition the\n  // array into two pieces and (2) recurse on each half. If it is not, this is\n  // the empty array and our base case.\n\n  if (p < r) {\n    // (1) Partitioning.\n    //\n    // The partitioning chooses a pivot between `p` and `r` and moves all\n    // elements that are less than or equal to the pivot to the before it, and\n    // all the elements that are greater than it after it. The effect is that\n    // once partition is done, the pivot is in the exact place it will be when\n    // the array is put in sorted order, and it will not need to be moved\n    // again. This runs in O(n) time.\n\n    // Always choose a random pivot so that an input array which is reverse\n    // sorted does not cause O(n^2) running time.\n    var pivotIndex = randomIntInRange(p, r);\n    var i = p - 1;\n\n    swap(ary, pivotIndex, r);\n    var pivot = ary[r];\n\n    // Immediately after `j` is incremented in this loop, the following hold\n    // true:\n    //\n    //   * Every element in `ary[p .. i]` is less than or equal to the pivot.\n    //\n    //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.\n    for (var j = p; j < r; j++) {\n      if (comparator(ary[j], pivot) <= 0) {\n        i += 1;\n        swap(ary, i, j);\n      }\n    }\n\n    swap(ary, i + 1, j);\n    var q = i + 1;\n\n    // (2) Recurse on each half.\n\n    doQuickSort(ary, comparator, p, q - 1);\n    doQuickSort(ary, comparator, q + 1, r);\n  }\n}\n\n/**\n * Sort the given array in-place with the given comparator function.\n *\n * @param {Array} ary\n *        An array to sort.\n * @param {function} comparator\n *        Function to use to compare two items.\n */\nexports.quickSort = function (ary, comparator) {\n  doQuickSort(ary, comparator, 0, ary.length - 1);\n};\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = require('./util');\nvar binarySearch = require('./binary-search');\nvar ArraySet = require('./array-set').ArraySet;\nvar base64VLQ = require('./base64-vlq');\nvar quickSort = require('./quick-sort').quickSort;\n\nfunction SourceMapConsumer(aSourceMap) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n  }\n\n  return sourceMap.sections != null\n    ? new IndexedSourceMapConsumer(sourceMap)\n    : new BasicSourceMapConsumer(sourceMap);\n}\n\nSourceMapConsumer.fromSourceMap = function(aSourceMap) {\n  return BasicSourceMapConsumer.fromSourceMap(aSourceMap);\n}\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nSourceMapConsumer.prototype._version = 3;\n\n// `__generatedMappings` and `__originalMappings` are arrays that hold the\n// parsed mapping coordinates from the source map's \"mappings\" attribute. They\n// are lazily instantiated, accessed via the `_generatedMappings` and\n// `_originalMappings` getters respectively, and we only parse the mappings\n// and create these arrays once queried for a source location. We jump through\n// these hoops because there can be many thousands of mappings, and parsing\n// them is expensive, so we only want to do it if we must.\n//\n// Each object in the arrays is of the form:\n//\n//     {\n//       generatedLine: The line number in the generated code,\n//       generatedColumn: The column number in the generated code,\n//       source: The path to the original source file that generated this\n//               chunk of code,\n//       originalLine: The line number in the original source that\n//                     corresponds to this chunk of generated code,\n//       originalColumn: The column number in the original source that\n//                       corresponds to this chunk of generated code,\n//       name: The name of the original symbol which generated this chunk of\n//             code.\n//     }\n//\n// All properties except for `generatedLine` and `generatedColumn` can be\n// `null`.\n//\n// `_generatedMappings` is ordered by the generated positions.\n//\n// `_originalMappings` is ordered by the original positions.\n\nSourceMapConsumer.prototype.__generatedMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {\n  get: function () {\n    if (!this.__generatedMappings) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__generatedMappings;\n  }\n});\n\nSourceMapConsumer.prototype.__originalMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {\n  get: function () {\n    if (!this.__originalMappings) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__originalMappings;\n  }\n});\n\nSourceMapConsumer.prototype._charIsMappingSeparator =\n  function SourceMapConsumer_charIsMappingSeparator(aStr, index) {\n    var c = aStr.charAt(index);\n    return c === \";\" || c === \",\";\n  };\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nSourceMapConsumer.prototype._parseMappings =\n  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    throw new Error(\"Subclasses must implement _parseMappings\");\n  };\n\nSourceMapConsumer.GENERATED_ORDER = 1;\nSourceMapConsumer.ORIGINAL_ORDER = 2;\n\nSourceMapConsumer.GREATEST_LOWER_BOUND = 1;\nSourceMapConsumer.LEAST_UPPER_BOUND = 2;\n\n/**\n * Iterate over each mapping between an original source/line/column and a\n * generated line/column in this source map.\n *\n * @param Function aCallback\n *        The function that is called with each mapping.\n * @param Object aContext\n *        Optional. If specified, this object will be the value of `this` every\n *        time that `aCallback` is called.\n * @param aOrder\n *        Either `SourceMapConsumer.GENERATED_ORDER` or\n *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to\n *        iterate over the mappings sorted by the generated file's line/column\n *        order or the original's source/line/column order, respectively. Defaults to\n *        `SourceMapConsumer.GENERATED_ORDER`.\n */\nSourceMapConsumer.prototype.eachMapping =\n  function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\n    var context = aContext || null;\n    var order = aOrder || SourceMapConsumer.GENERATED_ORDER;\n\n    var mappings;\n    switch (order) {\n    case SourceMapConsumer.GENERATED_ORDER:\n      mappings = this._generatedMappings;\n      break;\n    case SourceMapConsumer.ORIGINAL_ORDER:\n      mappings = this._originalMappings;\n      break;\n    default:\n      throw new Error(\"Unknown order of iteration.\");\n    }\n\n    var sourceRoot = this.sourceRoot;\n    mappings.map(function (mapping) {\n      var source = mapping.source === null ? null : this._sources.at(mapping.source);\n      if (source != null && sourceRoot != null) {\n        source = util.join(sourceRoot, source);\n      }\n      return {\n        source: source,\n        generatedLine: mapping.generatedLine,\n        generatedColumn: mapping.generatedColumn,\n        originalLine: mapping.originalLine,\n        originalColumn: mapping.originalColumn,\n        name: mapping.name === null ? null : this._names.at(mapping.name)\n      };\n    }, this).forEach(aCallback, context);\n  };\n\n/**\n * Returns all generated line and column information for the original source,\n * line, and column provided. If no column is provided, returns all mappings\n * corresponding to a either the line we are searching for or the next\n * closest line that has any mappings. Otherwise, returns all mappings\n * corresponding to the given line and either the column we are searching for\n * or the next closest column that has any offsets.\n *\n * The only argument is an object with the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.\n *   - column: Optional. the column number in the original source.\n *\n * and an array of objects is returned, each with the following properties:\n *\n *   - line: The line number in the generated source, or null.\n *   - column: The column number in the generated source, or null.\n */\nSourceMapConsumer.prototype.allGeneratedPositionsFor =\n  function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\n    var line = util.getArg(aArgs, 'line');\n\n    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping\n    // returns the index of the closest mapping less than the needle. By\n    // setting needle.originalColumn to 0, we thus find the last mapping for\n    // the given line, provided such a mapping exists.\n    var needle = {\n      source: util.getArg(aArgs, 'source'),\n      originalLine: line,\n      originalColumn: util.getArg(aArgs, 'column', 0)\n    };\n\n    if (this.sourceRoot != null) {\n      needle.source = util.relative(this.sourceRoot, needle.source);\n    }\n    if (!this._sources.has(needle.source)) {\n      return [];\n    }\n    needle.source = this._sources.indexOf(needle.source);\n\n    var mappings = [];\n\n    var index = this._findMapping(needle,\n                                  this._originalMappings,\n                                  \"originalLine\",\n                                  \"originalColumn\",\n                                  util.compareByOriginalPositions,\n                                  binarySearch.LEAST_UPPER_BOUND);\n    if (index >= 0) {\n      var mapping = this._originalMappings[index];\n\n      if (aArgs.column === undefined) {\n        var originalLine = mapping.originalLine;\n\n        // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we found. Since\n        // mappings are sorted, this is guaranteed to find all mappings for\n        // the line we found.\n        while (mapping && mapping.originalLine === originalLine) {\n          mappings.push({\n            line: util.getArg(mapping, 'generatedLine', null),\n            column: util.getArg(mapping, 'generatedColumn', null),\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n          });\n\n          mapping = this._originalMappings[++index];\n        }\n      } else {\n        var originalColumn = mapping.originalColumn;\n\n        // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we were searching for.\n        // Since mappings are sorted, this is guaranteed to find all mappings for\n        // the line we are searching for.\n        while (mapping &&\n               mapping.originalLine === line &&\n               mapping.originalColumn == originalColumn) {\n          mappings.push({\n            line: util.getArg(mapping, 'generatedLine', null),\n            column: util.getArg(mapping, 'generatedColumn', null),\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n          });\n\n          mapping = this._originalMappings[++index];\n        }\n      }\n    }\n\n    return mappings;\n  };\n\nexports.SourceMapConsumer = SourceMapConsumer;\n\n/**\n * A BasicSourceMapConsumer instance represents a parsed source map which we can\n * query for information about the original file positions by giving it a file\n * position in the generated source.\n *\n * The only parameter is the raw source map (either as a JSON string, or\n * already parsed to an object). According to the spec, source maps have the\n * following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - sources: An array of URLs to the original source files.\n *   - names: An array of identifiers which can be referrenced by individual mappings.\n *   - sourceRoot: Optional. The URL root from which all sources are relative.\n *   - sourcesContent: Optional. An array of contents of the original source files.\n *   - mappings: A string of base64 VLQs which contain the actual mappings.\n *   - file: Optional. The generated file this source map is associated with.\n *\n * Here is an example source map, taken from the source map spec[0]:\n *\n *     {\n *       version : 3,\n *       file: \"out.js\",\n *       sourceRoot : \"\",\n *       sources: [\"foo.js\", \"bar.js\"],\n *       names: [\"src\", \"maps\", \"are\", \"fun\"],\n *       mappings: \"AA,AB;;ABCDE;\"\n *     }\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#\n */\nfunction BasicSourceMapConsumer(aSourceMap) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n  }\n\n  var version = util.getArg(sourceMap, 'version');\n  var sources = util.getArg(sourceMap, 'sources');\n  // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which\n  // requires the array) to play nice here.\n  var names = util.getArg(sourceMap, 'names', []);\n  var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);\n  var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);\n  var mappings = util.getArg(sourceMap, 'mappings');\n  var file = util.getArg(sourceMap, 'file', null);\n\n  // Once again, Sass deviates from the spec and supplies the version as a\n  // string rather than a number, so we use loose equality checking here.\n  if (version != this._version) {\n    throw new Error('Unsupported version: ' + version);\n  }\n\n  sources = sources\n    .map(String)\n    // Some source maps produce relative source paths like \"./foo.js\" instead of\n    // \"foo.js\".  Normalize these first so that future comparisons will succeed.\n    // See bugzil.la/1090768.\n    .map(util.normalize)\n    // Always ensure that absolute sources are internally stored relative to\n    // the source root, if the source root is absolute. Not doing this would\n    // be particularly problematic when the source root is a prefix of the\n    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.\n    .map(function (source) {\n      return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)\n        ? util.relative(sourceRoot, source)\n        : source;\n    });\n\n  // Pass `true` below to allow duplicate names and sources. While source maps\n  // are intended to be compressed and deduplicated, the TypeScript compiler\n  // sometimes generates source maps with duplicates in them. See Github issue\n  // #72 and bugzil.la/889492.\n  this._names = ArraySet.fromArray(names.map(String), true);\n  this._sources = ArraySet.fromArray(sources, true);\n\n  this.sourceRoot = sourceRoot;\n  this.sourcesContent = sourcesContent;\n  this._mappings = mappings;\n  this.file = file;\n}\n\nBasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nBasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;\n\n/**\n * Create a BasicSourceMapConsumer from a SourceMapGenerator.\n *\n * @param SourceMapGenerator aSourceMap\n *        The source map that will be consumed.\n * @returns BasicSourceMapConsumer\n */\nBasicSourceMapConsumer.fromSourceMap =\n  function SourceMapConsumer_fromSourceMap(aSourceMap) {\n    var smc = Object.create(BasicSourceMapConsumer.prototype);\n\n    var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\n    var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\n    smc.sourceRoot = aSourceMap._sourceRoot;\n    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),\n                                                            smc.sourceRoot);\n    smc.file = aSourceMap._file;\n\n    // Because we are modifying the entries (by converting string sources and\n    // names to indices into the sources and names ArraySets), we have to make\n    // a copy of the entry or else bad things happen. Shared mutable state\n    // strikes again! See github issue #191.\n\n    var generatedMappings = aSourceMap._mappings.toArray().slice();\n    var destGeneratedMappings = smc.__generatedMappings = [];\n    var destOriginalMappings = smc.__originalMappings = [];\n\n    for (var i = 0, length = generatedMappings.length; i < length; i++) {\n      var srcMapping = generatedMappings[i];\n      var destMapping = new Mapping;\n      destMapping.generatedLine = srcMapping.generatedLine;\n      destMapping.generatedColumn = srcMapping.generatedColumn;\n\n      if (srcMapping.source) {\n        destMapping.source = sources.indexOf(srcMapping.source);\n        destMapping.originalLine = srcMapping.originalLine;\n        destMapping.originalColumn = srcMapping.originalColumn;\n\n        if (srcMapping.name) {\n          destMapping.name = names.indexOf(srcMapping.name);\n        }\n\n        destOriginalMappings.push(destMapping);\n      }\n\n      destGeneratedMappings.push(destMapping);\n    }\n\n    quickSort(smc.__originalMappings, util.compareByOriginalPositions);\n\n    return smc;\n  };\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nBasicSourceMapConsumer.prototype._version = 3;\n\n/**\n * The list of original sources.\n */\nObject.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {\n  get: function () {\n    return this._sources.toArray().map(function (s) {\n      return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;\n    }, this);\n  }\n});\n\n/**\n * Provide the JIT with a nice shape / hidden class.\n */\nfunction Mapping() {\n  this.generatedLine = 0;\n  this.generatedColumn = 0;\n  this.source = null;\n  this.originalLine = null;\n  this.originalColumn = null;\n  this.name = null;\n}\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nBasicSourceMapConsumer.prototype._parseMappings =\n  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    var generatedLine = 1;\n    var previousGeneratedColumn = 0;\n    var previousOriginalLine = 0;\n    var previousOriginalColumn = 0;\n    var previousSource = 0;\n    var previousName = 0;\n    var length = aStr.length;\n    var index = 0;\n    var cachedSegments = {};\n    var temp = {};\n    var originalMappings = [];\n    var generatedMappings = [];\n    var mapping, str, segment, end, value;\n\n    while (index < length) {\n      if (aStr.charAt(index) === ';') {\n        generatedLine++;\n        index++;\n        previousGeneratedColumn = 0;\n      }\n      else if (aStr.charAt(index) === ',') {\n        index++;\n      }\n      else {\n        mapping = new Mapping();\n        mapping.generatedLine = generatedLine;\n\n        // Because each offset is encoded relative to the previous one,\n        // many segments often have the same encoding. We can exploit this\n        // fact by caching the parsed variable length fields of each segment,\n        // allowing us to avoid a second parse if we encounter the same\n        // segment again.\n        for (end = index; end < length; end++) {\n          if (this._charIsMappingSeparator(aStr, end)) {\n            break;\n          }\n        }\n        str = aStr.slice(index, end);\n\n        segment = cachedSegments[str];\n        if (segment) {\n          index += str.length;\n        } else {\n          segment = [];\n          while (index < end) {\n            base64VLQ.decode(aStr, index, temp);\n            value = temp.value;\n            index = temp.rest;\n            segment.push(value);\n          }\n\n          if (segment.length === 2) {\n            throw new Error('Found a source, but no line and column');\n          }\n\n          if (segment.length === 3) {\n            throw new Error('Found a source and line, but no column');\n          }\n\n          cachedSegments[str] = segment;\n        }\n\n        // Generated column.\n        mapping.generatedColumn = previousGeneratedColumn + segment[0];\n        previousGeneratedColumn = mapping.generatedColumn;\n\n        if (segment.length > 1) {\n          // Original source.\n          mapping.source = previousSource + segment[1];\n          previousSource += segment[1];\n\n          // Original line.\n          mapping.originalLine = previousOriginalLine + segment[2];\n          previousOriginalLine = mapping.originalLine;\n          // Lines are stored 0-based\n          mapping.originalLine += 1;\n\n          // Original column.\n          mapping.originalColumn = previousOriginalColumn + segment[3];\n          previousOriginalColumn = mapping.originalColumn;\n\n          if (segment.length > 4) {\n            // Original name.\n            mapping.name = previousName + segment[4];\n            previousName += segment[4];\n          }\n        }\n\n        generatedMappings.push(mapping);\n        if (typeof mapping.originalLine === 'number') {\n          originalMappings.push(mapping);\n        }\n      }\n    }\n\n    quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);\n    this.__generatedMappings = generatedMappings;\n\n    quickSort(originalMappings, util.compareByOriginalPositions);\n    this.__originalMappings = originalMappings;\n  };\n\n/**\n * Find the mapping that best matches the hypothetical \"needle\" mapping that\n * we are searching for in the given \"haystack\" of mappings.\n */\nBasicSourceMapConsumer.prototype._findMapping =\n  function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,\n                                         aColumnName, aComparator, aBias) {\n    // To return the position we are searching for, we must first find the\n    // mapping for the given position and then return the opposite position it\n    // points to. Because the mappings are sorted, we can use binary search to\n    // find the best mapping.\n\n    if (aNeedle[aLineName] <= 0) {\n      throw new TypeError('Line must be greater than or equal to 1, got '\n                          + aNeedle[aLineName]);\n    }\n    if (aNeedle[aColumnName] < 0) {\n      throw new TypeError('Column must be greater than or equal to 0, got '\n                          + aNeedle[aColumnName]);\n    }\n\n    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n  };\n\n/**\n * Compute the last column for each generated mapping. The last column is\n * inclusive.\n */\nBasicSourceMapConsumer.prototype.computeColumnSpans =\n  function SourceMapConsumer_computeColumnSpans() {\n    for (var index = 0; index < this._generatedMappings.length; ++index) {\n      var mapping = this._generatedMappings[index];\n\n      // Mappings do not contain a field for the last generated columnt. We\n      // can come up with an optimistic estimate, however, by assuming that\n      // mappings are contiguous (i.e. given two consecutive mappings, the\n      // first mapping ends where the second one starts).\n      if (index + 1 < this._generatedMappings.length) {\n        var nextMapping = this._generatedMappings[index + 1];\n\n        if (mapping.generatedLine === nextMapping.generatedLine) {\n          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\n          continue;\n        }\n      }\n\n      // The last mapping for each line spans the entire line.\n      mapping.lastGeneratedColumn = Infinity;\n    }\n  };\n\n/**\n * Returns the original source, line, and column information for the generated\n * source's line and column positions provided. The only argument is an object\n * with the following properties:\n *\n *   - line: The line number in the generated source.\n *   - column: The column number in the generated source.\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n *\n * and an object is returned with the following properties:\n *\n *   - source: The original source file, or null.\n *   - line: The line number in the original source, or null.\n *   - column: The column number in the original source, or null.\n *   - name: The original identifier, or null.\n */\nBasicSourceMapConsumer.prototype.originalPositionFor =\n  function SourceMapConsumer_originalPositionFor(aArgs) {\n    var needle = {\n      generatedLine: util.getArg(aArgs, 'line'),\n      generatedColumn: util.getArg(aArgs, 'column')\n    };\n\n    var index = this._findMapping(\n      needle,\n      this._generatedMappings,\n      \"generatedLine\",\n      \"generatedColumn\",\n      util.compareByGeneratedPositionsDeflated,\n      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\n    );\n\n    if (index >= 0) {\n      var mapping = this._generatedMappings[index];\n\n      if (mapping.generatedLine === needle.generatedLine) {\n        var source = util.getArg(mapping, 'source', null);\n        if (source !== null) {\n          source = this._sources.at(source);\n          if (this.sourceRoot != null) {\n            source = util.join(this.sourceRoot, source);\n          }\n        }\n        var name = util.getArg(mapping, 'name', null);\n        if (name !== null) {\n          name = this._names.at(name);\n        }\n        return {\n          source: source,\n          line: util.getArg(mapping, 'originalLine', null),\n          column: util.getArg(mapping, 'originalColumn', null),\n          name: name\n        };\n      }\n    }\n\n    return {\n      source: null,\n      line: null,\n      column: null,\n      name: null\n    };\n  };\n\n/**\n * Return true if we have the source content for every source in the source\n * map, false otherwise.\n */\nBasicSourceMapConsumer.prototype.hasContentsOfAllSources =\n  function BasicSourceMapConsumer_hasContentsOfAllSources() {\n    if (!this.sourcesContent) {\n      return false;\n    }\n    return this.sourcesContent.length >= this._sources.size() &&\n      !this.sourcesContent.some(function (sc) { return sc == null; });\n  };\n\n/**\n * Returns the original source content. The only argument is the url of the\n * original source file. Returns null if no original source content is\n * available.\n */\nBasicSourceMapConsumer.prototype.sourceContentFor =\n  function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n    if (!this.sourcesContent) {\n      return null;\n    }\n\n    if (this.sourceRoot != null) {\n      aSource = util.relative(this.sourceRoot, aSource);\n    }\n\n    if (this._sources.has(aSource)) {\n      return this.sourcesContent[this._sources.indexOf(aSource)];\n    }\n\n    var url;\n    if (this.sourceRoot != null\n        && (url = util.urlParse(this.sourceRoot))) {\n      // XXX: file:// URIs and absolute paths lead to unexpected behavior for\n      // many users. We can help them out when they expect file:// URIs to\n      // behave like it would if they were running a local HTTP server. See\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.\n      var fileUriAbsPath = aSource.replace(/^file:\\/\\//, \"\");\n      if (url.scheme == \"file\"\n          && this._sources.has(fileUriAbsPath)) {\n        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]\n      }\n\n      if ((!url.path || url.path == \"/\")\n          && this._sources.has(\"/\" + aSource)) {\n        return this.sourcesContent[this._sources.indexOf(\"/\" + aSource)];\n      }\n    }\n\n    // This function is used recursively from\n    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we\n    // don't want to throw if we can't find the source - we just want to\n    // return null, so we provide a flag to exit gracefully.\n    if (nullOnMissing) {\n      return null;\n    }\n    else {\n      throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n    }\n  };\n\n/**\n * Returns the generated line and column information for the original source,\n * line, and column positions provided. The only argument is an object with\n * the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.\n *   - column: The column number in the original source.\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n *\n * and an object is returned with the following properties:\n *\n *   - line: The line number in the generated source, or null.\n *   - column: The column number in the generated source, or null.\n */\nBasicSourceMapConsumer.prototype.generatedPositionFor =\n  function SourceMapConsumer_generatedPositionFor(aArgs) {\n    var source = util.getArg(aArgs, 'source');\n    if (this.sourceRoot != null) {\n      source = util.relative(this.sourceRoot, source);\n    }\n    if (!this._sources.has(source)) {\n      return {\n        line: null,\n        column: null,\n        lastColumn: null\n      };\n    }\n    source = this._sources.indexOf(source);\n\n    var needle = {\n      source: source,\n      originalLine: util.getArg(aArgs, 'line'),\n      originalColumn: util.getArg(aArgs, 'column')\n    };\n\n    var index = this._findMapping(\n      needle,\n      this._originalMappings,\n      \"originalLine\",\n      \"originalColumn\",\n      util.compareByOriginalPositions,\n      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\n    );\n\n    if (index >= 0) {\n      var mapping = this._originalMappings[index];\n\n      if (mapping.source === needle.source) {\n        return {\n          line: util.getArg(mapping, 'generatedLine', null),\n          column: util.getArg(mapping, 'generatedColumn', null),\n          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n        };\n      }\n    }\n\n    return {\n      line: null,\n      column: null,\n      lastColumn: null\n    };\n  };\n\nexports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n\n/**\n * An IndexedSourceMapConsumer instance represents a parsed source map which\n * we can query for information. It differs from BasicSourceMapConsumer in\n * that it takes \"indexed\" source maps (i.e. ones with a \"sections\" field) as\n * input.\n *\n * The only parameter is a raw source map (either as a JSON string, or already\n * parsed to an object). According to the spec for indexed source maps, they\n * have the following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - file: Optional. The generated file this source map is associated with.\n *   - sections: A list of section definitions.\n *\n * Each value under the \"sections\" field has two fields:\n *   - offset: The offset into the original specified at which this section\n *       begins to apply, defined as an object with a \"line\" and \"column\"\n *       field.\n *   - map: A source map definition. This source map could also be indexed,\n *       but doesn't have to be.\n *\n * Instead of the \"map\" field, it's also possible to have a \"url\" field\n * specifying a URL to retrieve a source map from, but that's currently\n * unsupported.\n *\n * Here's an example source map, taken from the source map spec[0], but\n * modified to omit a section which uses the \"url\" field.\n *\n *  {\n *    version : 3,\n *    file: \"app.js\",\n *    sections: [{\n *      offset: {line:100, column:10},\n *      map: {\n *        version : 3,\n *        file: \"section.js\",\n *        sources: [\"foo.js\", \"bar.js\"],\n *        names: [\"src\", \"maps\", \"are\", \"fun\"],\n *        mappings: \"AAAA,E;;ABCDE;\"\n *      }\n *    }],\n *  }\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt\n */\nfunction IndexedSourceMapConsumer(aSourceMap) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n  }\n\n  var version = util.getArg(sourceMap, 'version');\n  var sections = util.getArg(sourceMap, 'sections');\n\n  if (version != this._version) {\n    throw new Error('Unsupported version: ' + version);\n  }\n\n  this._sources = new ArraySet();\n  this._names = new ArraySet();\n\n  var lastOffset = {\n    line: -1,\n    column: 0\n  };\n  this._sections = sections.map(function (s) {\n    if (s.url) {\n      // The url field will require support for asynchronicity.\n      // See https://github.com/mozilla/source-map/issues/16\n      throw new Error('Support for url field in sections not implemented.');\n    }\n    var offset = util.getArg(s, 'offset');\n    var offsetLine = util.getArg(offset, 'line');\n    var offsetColumn = util.getArg(offset, 'column');\n\n    if (offsetLine < lastOffset.line ||\n        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {\n      throw new Error('Section offsets must be ordered and non-overlapping.');\n    }\n    lastOffset = offset;\n\n    return {\n      generatedOffset: {\n        // The offset fields are 0-based, but we use 1-based indices when\n        // encoding/decoding from VLQ.\n        generatedLine: offsetLine + 1,\n        generatedColumn: offsetColumn + 1\n      },\n      consumer: new SourceMapConsumer(util.getArg(s, 'map'))\n    }\n  });\n}\n\nIndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nIndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nIndexedSourceMapConsumer.prototype._version = 3;\n\n/**\n * The list of original sources.\n */\nObject.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {\n  get: function () {\n    var sources = [];\n    for (var i = 0; i < this._sections.length; i++) {\n      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {\n        sources.push(this._sections[i].consumer.sources[j]);\n      }\n    }\n    return sources;\n  }\n});\n\n/**\n * Returns the original source, line, and column information for the generated\n * source's line and column positions provided. The only argument is an object\n * with the following properties:\n *\n *   - line: The line number in the generated source.\n *   - column: The column number in the generated source.\n *\n * and an object is returned with the following properties:\n *\n *   - source: The original source file, or null.\n *   - line: The line number in the original source, or null.\n *   - column: The column number in the original source, or null.\n *   - name: The original identifier, or null.\n */\nIndexedSourceMapConsumer.prototype.originalPositionFor =\n  function IndexedSourceMapConsumer_originalPositionFor(aArgs) {\n    var needle = {\n      generatedLine: util.getArg(aArgs, 'line'),\n      generatedColumn: util.getArg(aArgs, 'column')\n    };\n\n    // Find the section containing the generated position we're trying to map\n    // to an original position.\n    var sectionIndex = binarySearch.search(needle, this._sections,\n      function(needle, section) {\n        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;\n        if (cmp) {\n          return cmp;\n        }\n\n        return (needle.generatedColumn -\n                section.generatedOffset.generatedColumn);\n      });\n    var section = this._sections[sectionIndex];\n\n    if (!section) {\n      return {\n        source: null,\n        line: null,\n        column: null,\n        name: null\n      };\n    }\n\n    return section.consumer.originalPositionFor({\n      line: needle.generatedLine -\n        (section.generatedOffset.generatedLine - 1),\n      column: needle.generatedColumn -\n        (section.generatedOffset.generatedLine === needle.generatedLine\n         ? section.generatedOffset.generatedColumn - 1\n         : 0),\n      bias: aArgs.bias\n    });\n  };\n\n/**\n * Return true if we have the source content for every source in the source\n * map, false otherwise.\n */\nIndexedSourceMapConsumer.prototype.hasContentsOfAllSources =\n  function IndexedSourceMapConsumer_hasContentsOfAllSources() {\n    return this._sections.every(function (s) {\n      return s.consumer.hasContentsOfAllSources();\n    });\n  };\n\n/**\n * Returns the original source content. The only argument is the url of the\n * original source file. Returns null if no original source content is\n * available.\n */\nIndexedSourceMapConsumer.prototype.sourceContentFor =\n  function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n\n      var content = section.consumer.sourceContentFor(aSource, true);\n      if (content) {\n        return content;\n      }\n    }\n    if (nullOnMissing) {\n      return null;\n    }\n    else {\n      throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n    }\n  };\n\n/**\n * Returns the generated line and column information for the original source,\n * line, and column positions provided. The only argument is an object with\n * the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.\n *   - column: The column number in the original source.\n *\n * and an object is returned with the following properties:\n *\n *   - line: The line number in the generated source, or null.\n *   - column: The column number in the generated source, or null.\n */\nIndexedSourceMapConsumer.prototype.generatedPositionFor =\n  function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n\n      // Only consider this section if the requested source is in the list of\n      // sources of the consumer.\n      if (section.consumer.sources.indexOf(util.getArg(aArgs, 'source')) === -1) {\n        continue;\n      }\n      var generatedPosition = section.consumer.generatedPositionFor(aArgs);\n      if (generatedPosition) {\n        var ret = {\n          line: generatedPosition.line +\n            (section.generatedOffset.generatedLine - 1),\n          column: generatedPosition.column +\n            (section.generatedOffset.generatedLine === generatedPosition.line\n             ? section.generatedOffset.generatedColumn - 1\n             : 0)\n        };\n        return ret;\n      }\n    }\n\n    return {\n      line: null,\n      column: null\n    };\n  };\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nIndexedSourceMapConsumer.prototype._parseMappings =\n  function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    this.__generatedMappings = [];\n    this.__originalMappings = [];\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n      var sectionMappings = section.consumer._generatedMappings;\n      for (var j = 0; j < sectionMappings.length; j++) {\n        var mapping = sectionMappings[j];\n\n        var source = section.consumer._sources.at(mapping.source);\n        if (section.consumer.sourceRoot !== null) {\n          source = util.join(section.consumer.sourceRoot, source);\n        }\n        this._sources.add(source);\n        source = this._sources.indexOf(source);\n\n        var name = section.consumer._names.at(mapping.name);\n        this._names.add(name);\n        name = this._names.indexOf(name);\n\n        // The mappings coming from the consumer for the section have\n        // generated positions relative to the start of the section, so we\n        // need to offset them to be relative to the start of the concatenated\n        // generated file.\n        var adjustedMapping = {\n          source: source,\n          generatedLine: mapping.generatedLine +\n            (section.generatedOffset.generatedLine - 1),\n          generatedColumn: mapping.generatedColumn +\n            (section.generatedOffset.generatedLine === mapping.generatedLine\n            ? section.generatedOffset.generatedColumn - 1\n            : 0),\n          originalLine: mapping.originalLine,\n          originalColumn: mapping.originalColumn,\n          name: name\n        };\n\n        this.__generatedMappings.push(adjustedMapping);\n        if (typeof adjustedMapping.originalLine === 'number') {\n          this.__originalMappings.push(adjustedMapping);\n        }\n      }\n    }\n\n    quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);\n    quickSort(this.__originalMappings, util.compareByOriginalPositions);\n  };\n\nexports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar SourceMapGenerator = require('./source-map-generator').SourceMapGenerator;\nvar util = require('./util');\n\n// Matches a Windows-style `\\r\\n` newline or a `\\n` newline used by all other\n// operating systems these days (capturing the result).\nvar REGEX_NEWLINE = /(\\r?\\n)/;\n\n// Newline character code for charCodeAt() comparisons\nvar NEWLINE_CODE = 10;\n\n// Private symbol for identifying `SourceNode`s when multiple versions of\n// the source-map library are loaded. This MUST NOT CHANGE across\n// versions!\nvar isSourceNode = \"$$$isSourceNode$$$\";\n\n/**\n * SourceNodes provide a way to abstract over interpolating/concatenating\n * snippets of generated JavaScript source code while maintaining the line and\n * column information associated with the original source code.\n *\n * @param aLine The original line number.\n * @param aColumn The original column number.\n * @param aSource The original source's filename.\n * @param aChunks Optional. An array of strings which are snippets of\n *        generated JS, or other SourceNodes.\n * @param aName The original identifier.\n */\nfunction SourceNode(aLine, aColumn, aSource, aChunks, aName) {\n  this.children = [];\n  this.sourceContents = {};\n  this.line = aLine == null ? null : aLine;\n  this.column = aColumn == null ? null : aColumn;\n  this.source = aSource == null ? null : aSource;\n  this.name = aName == null ? null : aName;\n  this[isSourceNode] = true;\n  if (aChunks != null) this.add(aChunks);\n}\n\n/**\n * Creates a SourceNode from generated code and a SourceMapConsumer.\n *\n * @param aGeneratedCode The generated code\n * @param aSourceMapConsumer The SourceMap for the generated code\n * @param aRelativePath Optional. The path that relative sources in the\n *        SourceMapConsumer should be relative to.\n */\nSourceNode.fromStringWithSourceMap =\n  function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {\n    // The SourceNode we want to fill with the generated code\n    // and the SourceMap\n    var node = new SourceNode();\n\n    // All even indices of this array are one line of the generated code,\n    // while all odd indices are the newlines between two adjacent lines\n    // (since `REGEX_NEWLINE` captures its match).\n    // Processed fragments are accessed by calling `shiftNextLine`.\n    var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);\n    var remainingLinesIndex = 0;\n    var shiftNextLine = function() {\n      var lineContents = getNextLine();\n      // The last line of a file might not have a newline.\n      var newLine = getNextLine() || \"\";\n      return lineContents + newLine;\n\n      function getNextLine() {\n        return remainingLinesIndex < remainingLines.length ?\n            remainingLines[remainingLinesIndex++] : undefined;\n      }\n    };\n\n    // We need to remember the position of \"remainingLines\"\n    var lastGeneratedLine = 1, lastGeneratedColumn = 0;\n\n    // The generate SourceNodes we need a code range.\n    // To extract it current and last mapping is used.\n    // Here we store the last mapping.\n    var lastMapping = null;\n\n    aSourceMapConsumer.eachMapping(function (mapping) {\n      if (lastMapping !== null) {\n        // We add the code from \"lastMapping\" to \"mapping\":\n        // First check if there is a new line in between.\n        if (lastGeneratedLine < mapping.generatedLine) {\n          // Associate first line with \"lastMapping\"\n          addMappingWithCode(lastMapping, shiftNextLine());\n          lastGeneratedLine++;\n          lastGeneratedColumn = 0;\n          // The remaining code is added without mapping\n        } else {\n          // There is no new line in between.\n          // Associate the code between \"lastGeneratedColumn\" and\n          // \"mapping.generatedColumn\" with \"lastMapping\"\n          var nextLine = remainingLines[remainingLinesIndex];\n          var code = nextLine.substr(0, mapping.generatedColumn -\n                                        lastGeneratedColumn);\n          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn -\n                                              lastGeneratedColumn);\n          lastGeneratedColumn = mapping.generatedColumn;\n          addMappingWithCode(lastMapping, code);\n          // No more remaining code, continue\n          lastMapping = mapping;\n          return;\n        }\n      }\n      // We add the generated code until the first mapping\n      // to the SourceNode without any mapping.\n      // Each line is added as separate string.\n      while (lastGeneratedLine < mapping.generatedLine) {\n        node.add(shiftNextLine());\n        lastGeneratedLine++;\n      }\n      if (lastGeneratedColumn < mapping.generatedColumn) {\n        var nextLine = remainingLines[remainingLinesIndex];\n        node.add(nextLine.substr(0, mapping.generatedColumn));\n        remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);\n        lastGeneratedColumn = mapping.generatedColumn;\n      }\n      lastMapping = mapping;\n    }, this);\n    // We have processed all mappings.\n    if (remainingLinesIndex < remainingLines.length) {\n      if (lastMapping) {\n        // Associate the remaining code in the current line with \"lastMapping\"\n        addMappingWithCode(lastMapping, shiftNextLine());\n      }\n      // and add the remaining lines without any mapping\n      node.add(remainingLines.splice(remainingLinesIndex).join(\"\"));\n    }\n\n    // Copy sourcesContent into SourceNode\n    aSourceMapConsumer.sources.forEach(function (sourceFile) {\n      var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        if (aRelativePath != null) {\n          sourceFile = util.join(aRelativePath, sourceFile);\n        }\n        node.setSourceContent(sourceFile, content);\n      }\n    });\n\n    return node;\n\n    function addMappingWithCode(mapping, code) {\n      if (mapping === null || mapping.source === undefined) {\n        node.add(code);\n      } else {\n        var source = aRelativePath\n          ? util.join(aRelativePath, mapping.source)\n          : mapping.source;\n        node.add(new SourceNode(mapping.originalLine,\n                                mapping.originalColumn,\n                                source,\n                                code,\n                                mapping.name));\n      }\n    }\n  };\n\n/**\n * Add a chunk of generated JS to this source node.\n *\n * @param aChunk A string snippet of generated JS code, another instance of\n *        SourceNode, or an array where each member is one of those things.\n */\nSourceNode.prototype.add = function SourceNode_add(aChunk) {\n  if (Array.isArray(aChunk)) {\n    aChunk.forEach(function (chunk) {\n      this.add(chunk);\n    }, this);\n  }\n  else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n    if (aChunk) {\n      this.children.push(aChunk);\n    }\n  }\n  else {\n    throw new TypeError(\n      \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n    );\n  }\n  return this;\n};\n\n/**\n * Add a chunk of generated JS to the beginning of this source node.\n *\n * @param aChunk A string snippet of generated JS code, another instance of\n *        SourceNode, or an array where each member is one of those things.\n */\nSourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {\n  if (Array.isArray(aChunk)) {\n    for (var i = aChunk.length-1; i >= 0; i--) {\n      this.prepend(aChunk[i]);\n    }\n  }\n  else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n    this.children.unshift(aChunk);\n  }\n  else {\n    throw new TypeError(\n      \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n    );\n  }\n  return this;\n};\n\n/**\n * Walk over the tree of JS snippets in this node and its children. The\n * walking function is called once for each snippet of JS and is passed that\n * snippet and the its original associated source's line/column location.\n *\n * @param aFn The traversal function.\n */\nSourceNode.prototype.walk = function SourceNode_walk(aFn) {\n  var chunk;\n  for (var i = 0, len = this.children.length; i < len; i++) {\n    chunk = this.children[i];\n    if (chunk[isSourceNode]) {\n      chunk.walk(aFn);\n    }\n    else {\n      if (chunk !== '') {\n        aFn(chunk, { source: this.source,\n                     line: this.line,\n                     column: this.column,\n                     name: this.name });\n      }\n    }\n  }\n};\n\n/**\n * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between\n * each of `this.children`.\n *\n * @param aSep The separator.\n */\nSourceNode.prototype.join = function SourceNode_join(aSep) {\n  var newChildren;\n  var i;\n  var len = this.children.length;\n  if (len > 0) {\n    newChildren = [];\n    for (i = 0; i < len-1; i++) {\n      newChildren.push(this.children[i]);\n      newChildren.push(aSep);\n    }\n    newChildren.push(this.children[i]);\n    this.children = newChildren;\n  }\n  return this;\n};\n\n/**\n * Call String.prototype.replace on the very right-most source snippet. Useful\n * for trimming whitespace from the end of a source node, etc.\n *\n * @param aPattern The pattern to replace.\n * @param aReplacement The thing to replace the pattern with.\n */\nSourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {\n  var lastChild = this.children[this.children.length - 1];\n  if (lastChild[isSourceNode]) {\n    lastChild.replaceRight(aPattern, aReplacement);\n  }\n  else if (typeof lastChild === 'string') {\n    this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);\n  }\n  else {\n    this.children.push(''.replace(aPattern, aReplacement));\n  }\n  return this;\n};\n\n/**\n * Set the source content for a source file. This will be added to the SourceMapGenerator\n * in the sourcesContent field.\n *\n * @param aSourceFile The filename of the source file\n * @param aSourceContent The content of the source file\n */\nSourceNode.prototype.setSourceContent =\n  function SourceNode_setSourceContent(aSourceFile, aSourceContent) {\n    this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;\n  };\n\n/**\n * Walk over the tree of SourceNodes. The walking function is called for each\n * source file content and is passed the filename and source content.\n *\n * @param aFn The traversal function.\n */\nSourceNode.prototype.walkSourceContents =\n  function SourceNode_walkSourceContents(aFn) {\n    for (var i = 0, len = this.children.length; i < len; i++) {\n      if (this.children[i][isSourceNode]) {\n        this.children[i].walkSourceContents(aFn);\n      }\n    }\n\n    var sources = Object.keys(this.sourceContents);\n    for (var i = 0, len = sources.length; i < len; i++) {\n      aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);\n    }\n  };\n\n/**\n * Return the string representation of this source node. Walks over the tree\n * and concatenates all the various snippets together to one string.\n */\nSourceNode.prototype.toString = function SourceNode_toString() {\n  var str = \"\";\n  this.walk(function (chunk) {\n    str += chunk;\n  });\n  return str;\n};\n\n/**\n * Returns the string representation of this source node along with a source\n * map.\n */\nSourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {\n  var generated = {\n    code: \"\",\n    line: 1,\n    column: 0\n  };\n  var map = new SourceMapGenerator(aArgs);\n  var sourceMappingActive = false;\n  var lastOriginalSource = null;\n  var lastOriginalLine = null;\n  var lastOriginalColumn = null;\n  var lastOriginalName = null;\n  this.walk(function (chunk, original) {\n    generated.code += chunk;\n    if (original.source !== null\n        && original.line !== null\n        && original.column !== null) {\n      if(lastOriginalSource !== original.source\n         || lastOriginalLine !== original.line\n         || lastOriginalColumn !== original.column\n         || lastOriginalName !== original.name) {\n        map.addMapping({\n          source: original.source,\n          original: {\n            line: original.line,\n            column: original.column\n          },\n          generated: {\n            line: generated.line,\n            column: generated.column\n          },\n          name: original.name\n        });\n      }\n      lastOriginalSource = original.source;\n      lastOriginalLine = original.line;\n      lastOriginalColumn = original.column;\n      lastOriginalName = original.name;\n      sourceMappingActive = true;\n    } else if (sourceMappingActive) {\n      map.addMapping({\n        generated: {\n          line: generated.line,\n          column: generated.column\n        }\n      });\n      lastOriginalSource = null;\n      sourceMappingActive = false;\n    }\n    for (var idx = 0, length = chunk.length; idx < length; idx++) {\n      if (chunk.charCodeAt(idx) === NEWLINE_CODE) {\n        generated.line++;\n        generated.column = 0;\n        // Mappings end at eol\n        if (idx + 1 === length) {\n          lastOriginalSource = null;\n          sourceMappingActive = false;\n        } else if (sourceMappingActive) {\n          map.addMapping({\n            source: original.source,\n            original: {\n              line: original.line,\n              column: original.column\n            },\n            generated: {\n              line: generated.line,\n              column: generated.column\n            },\n            name: original.name\n          });\n        }\n      } else {\n        generated.column++;\n      }\n    }\n  });\n  this.walkSourceContents(function (sourceFile, sourceContent) {\n    map.setSourceContent(sourceFile, sourceContent);\n  });\n\n  return { code: generated.code, map: map };\n};\n\nexports.SourceNode = SourceNode;\n","'use strict';\n\nvar sourceMap = require('./sourceMap');\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction processChildren(node, delimeter) {\n    var list = node.children;\n    var prev = null;\n\n    if (typeof delimeter !== 'function') {\n        list.forEach(this.node, this);\n    } else {\n        list.forEach(function(node) {\n            if (prev !== null) {\n                delimeter.call(this, prev);\n            }\n\n            this.node(node);\n            prev = node;\n        }, this);\n    }\n}\n\nmodule.exports = function createGenerator(config) {\n    function processNode(node) {\n        if (hasOwnProperty.call(types, node.type)) {\n            types[node.type].call(this, node);\n        } else {\n            throw new Error('Unknown node type: ' + node.type);\n        }\n    }\n\n    var types = {};\n\n    if (config.node) {\n        for (var name in config.node) {\n            types[name] = config.node[name].generate;\n        }\n    }\n\n    return function(node, options) {\n        var buffer = '';\n        var handlers = {\n            children: processChildren,\n            node: processNode,\n            chunk: function(chunk) {\n                buffer += chunk;\n            },\n            result: function() {\n                return buffer;\n            }\n        };\n\n        if (options) {\n            if (typeof options.decorator === 'function') {\n                handlers = options.decorator(handlers);\n            }\n\n            if (options.sourceMap) {\n                handlers = sourceMap(handlers);\n            }\n        }\n\n        handlers.node(node);\n\n        return handlers.result();\n    };\n};\n","'use strict';\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar noop = function() {};\n\nfunction ensureFunction(value) {\n    return typeof value === 'function' ? value : noop;\n}\n\nfunction invokeForType(fn, type) {\n    return function(node, item, list) {\n        if (node.type === type) {\n            fn.call(this, node, item, list);\n        }\n    };\n}\n\nfunction getWalkersFromStructure(name, nodeType) {\n    var structure = nodeType.structure;\n    var walkers = [];\n\n    for (var key in structure) {\n        if (hasOwnProperty.call(structure, key) === false) {\n            continue;\n        }\n\n        var fieldTypes = structure[key];\n        var walker = {\n            name: key,\n            type: false,\n            nullable: false\n        };\n\n        if (!Array.isArray(structure[key])) {\n            fieldTypes = [structure[key]];\n        }\n\n        for (var i = 0; i < fieldTypes.length; i++) {\n            var fieldType = fieldTypes[i];\n            if (fieldType === null) {\n                walker.nullable = true;\n            } else if (typeof fieldType === 'string') {\n                walker.type = 'node';\n            } else if (Array.isArray(fieldType)) {\n                walker.type = 'list';\n            }\n        }\n\n        if (walker.type) {\n            walkers.push(walker);\n        }\n    }\n\n    if (walkers.length) {\n        return {\n            context: nodeType.walkContext,\n            fields: walkers\n        };\n    }\n\n    return null;\n}\n\nfunction getTypesFromConfig(config) {\n    var types = {};\n\n    for (var name in config.node) {\n        if (hasOwnProperty.call(config.node, name)) {\n            var nodeType = config.node[name];\n\n            if (!nodeType.structure) {\n                throw new Error('Missed `structure` field in `' + name + '` node type definition');\n            }\n\n            types[name] = getWalkersFromStructure(name, nodeType);\n        }\n    }\n\n    return types;\n}\n\nfunction createTypeIterator(config, reverse) {\n    var fields = reverse ? config.fields.slice().reverse() : config.fields;\n    var body = fields.map(function(field) {\n        var ref = 'node.' + field.name;\n        var line;\n\n        if (field.type === 'list') {\n            line = reverse\n                ? ref + '.forEachRight(walk);'\n                : ref + '.forEach(walk);';\n        } else {\n            line = 'walk(' + ref + ');';\n        }\n\n        if (field.nullable) {\n            line = 'if (' + ref + ') {\\n    ' + line + '}';\n        }\n\n        return line;\n    });\n\n    if (config.context) {\n        body = [].concat(\n            'var old = context.' + config.context + ';',\n            'context.' + config.context + ' = node;',\n            body,\n            'context.' + config.context + ' = old;'\n        );\n    }\n\n    return new Function('node', 'context', 'walk', body.join('\\n'));\n}\n\nfunction createFastTraveralMap(iterators) {\n    return {\n        Atrule: {\n            StyleSheet: iterators.StyleSheet,\n            Atrule: iterators.Atrule,\n            Rule: iterators.Rule,\n            Block: iterators.Block\n        },\n        Rule: {\n            StyleSheet: iterators.StyleSheet,\n            Atrule: iterators.Atrule,\n            Rule: iterators.Rule,\n            Block: iterators.Block\n        },\n        Declaration: {\n            StyleSheet: iterators.StyleSheet,\n            Atrule: iterators.Atrule,\n            Rule: iterators.Rule,\n            Block: iterators.Block\n        }\n    };\n}\n\nmodule.exports = function createWalker(config) {\n    var types = getTypesFromConfig(config);\n    var iteratorsNatural = {};\n    var iteratorsReverse = {};\n\n    for (var name in types) {\n        if (hasOwnProperty.call(types, name) && types[name] !== null) {\n            iteratorsNatural[name] = createTypeIterator(types[name], false);\n            iteratorsReverse[name] = createTypeIterator(types[name], true);\n        }\n    }\n\n    var fastTraversalIteratorsNatural = createFastTraveralMap(iteratorsNatural);\n    var fastTraversalIteratorsReverse = createFastTraveralMap(iteratorsReverse);\n\n    return function walk(root, options) {\n        function walkNode(node, item, list) {\n            enter.call(context, node, item, list);\n\n            if (iterators.hasOwnProperty(node.type)) {\n                iterators[node.type](node, context, walkNode);\n            }\n\n            leave.call(context, node, item, list);\n        }\n\n        var enter = noop;\n        var leave = noop;\n        var iterators = iteratorsNatural;\n        var context = {\n            root: root,\n            stylesheet: null,\n            atrule: null,\n            atrulePrelude: null,\n            rule: null,\n            selector: null,\n            block: null,\n            declaration: null,\n            function: null\n        };\n\n        if (typeof options === 'function') {\n            enter = options;\n        } else if (options) {\n            enter = ensureFunction(options.enter);\n            leave = ensureFunction(options.leave);\n\n            if (options.reverse) {\n                iterators = iteratorsReverse;\n            }\n\n            if (options.visit) {\n                if (fastTraversalIteratorsNatural.hasOwnProperty(options.visit)) {\n                    iterators = options.reverse\n                        ? fastTraversalIteratorsReverse[options.visit]\n                        : fastTraversalIteratorsNatural[options.visit];\n                } else if (!types.hasOwnProperty(options.visit)) {\n                    throw new Error('Bad value `' + options.visit + '` for `visit` option (should be: ' + Object.keys(types).join(', ') + ')');\n                }\n\n                enter = invokeForType(enter, options.visit);\n                leave = invokeForType(leave, options.visit);\n            }\n        }\n\n        if (enter === noop && leave === noop) {\n            throw new Error('Neither `enter` nor `leave` walker handler is set or both aren\\'t a function');\n        }\n\n        // swap handlers in reverse mode to invert visit order\n        if (options.reverse) {\n            var tmp = enter;\n            enter = leave;\n            leave = tmp;\n        }\n\n        walkNode(root);\n    };\n};\n","var hasOwnProperty = Object.prototype.hasOwnProperty;\nvar shape = {\n    generic: true,\n    types: {},\n    properties: {},\n    parseContext: {},\n    scope: {},\n    atrule: ['parse'],\n    pseudo: ['parse'],\n    node: ['name', 'structure', 'parse', 'generate', 'walkContext']\n};\n\nfunction isObject(value) {\n    return value && value.constructor === Object;\n}\n\nfunction copy(value) {\n    if (isObject(value)) {\n        var res = {};\n        for (var key in value) {\n            if (hasOwnProperty.call(value, key)) {\n                res[key] = value[key];\n            }\n        }\n        return res;\n    } else {\n        return value;\n    }\n}\n\nfunction extend(dest, src) {\n    for (var key in src) {\n        if (hasOwnProperty.call(src, key)) {\n            if (isObject(dest[key])) {\n                extend(dest[key], copy(src[key]));\n            } else {\n                dest[key] = copy(src[key]);\n            }\n        }\n    }\n}\n\nfunction mix(dest, src, shape) {\n    for (var key in shape) {\n        if (hasOwnProperty.call(shape, key) === false) {\n            continue;\n        }\n\n        if (shape[key] === true) {\n            if (key in src) {\n                if (hasOwnProperty.call(src, key)) {\n                    dest[key] = copy(src[key]);\n                }\n            }\n        } else if (shape[key]) {\n            if (isObject(shape[key])) {\n                var res = {};\n                extend(res, dest[key]);\n                extend(res, src[key]);\n                dest[key] = res;\n            } else if (Array.isArray(shape[key])) {\n                var res = {};\n                var innerShape = shape[key].reduce(function(s, k) {\n                    s[k] = true;\n                    return s;\n                }, {});\n                for (var name in dest[key]) {\n                    if (hasOwnProperty.call(dest[key], name)) {\n                        res[name] = {};\n                        if (dest[key] && dest[key][name]) {\n                            mix(res[name], dest[key][name], innerShape);\n                        }\n                    }\n                }\n                for (var name in src[key]) {\n                    if (hasOwnProperty.call(src[key], name)) {\n                        if (!res[name]) {\n                            res[name] = {};\n                        }\n                        if (src[key] && src[key][name]) {\n                            mix(res[name], src[key][name], innerShape);\n                        }\n                    }\n                }\n                dest[key] = res;\n            }\n        }\n    }\n    return dest;\n}\n\nmodule.exports = function(dest, src) {\n    return mix(dest, src, shape);\n};\n","var List = require('../utils/list');\nvar Tokenizer = require('../tokenizer');\nvar Lexer = require('../lexer/Lexer');\nvar grammar = require('../lexer/grammar');\nvar createParser = require('../parser/create');\nvar createGenerator = require('../generator/create');\nvar createConvertor = require('../convertor/create');\nvar createWalker = require('../walker/create');\nvar clone = require('../utils/clone');\nvar names = require('../utils/names');\nvar mix = require('./config/mix');\n\nfunction assign(dest, src) {\n    for (var key in src) {\n        dest[key] = src[key];\n    }\n\n    return dest;\n}\n\nfunction createSyntax(config) {\n    var parse = createParser(config);\n    var walk = createWalker(config);\n    var generate = createGenerator(config);\n    var convert = createConvertor(walk);\n\n    var syntax = {\n        List: List,\n        Tokenizer: Tokenizer,\n        Lexer: Lexer,\n\n        vendorPrefix: names.vendorPrefix,\n        keyword: names.keyword,\n        property: names.property,\n        isCustomProperty: names.isCustomProperty,\n\n        grammar: grammar,\n        lexer: null,\n        createLexer: function(config) {\n            return new Lexer(config, syntax, syntax.lexer.structure);\n        },\n\n        parse: parse,\n        walk: walk,\n        generate: generate,\n\n        clone: clone,\n        fromPlainObject: convert.fromPlainObject,\n        toPlainObject: convert.toPlainObject,\n\n        createSyntax: function(config) {\n            return createSyntax(mix({}, config));\n        },\n        fork: function(extension) {\n            var base = mix({}, config); // copy of config\n            return createSyntax(\n                typeof extension === 'function'\n                    ? extension(base, assign)\n                    : mix(base, extension)\n            );\n        }\n    };\n\n    syntax.lexer = new Lexer({\n        generic: true,\n        types: config.types,\n        properties: config.properties,\n        node: config.node\n    }, syntax);\n\n    return syntax;\n};\n\nexports.create = function(config) {\n    return createSyntax(mix({}, config));\n};\n","var mdnProperties = require('mdn-data/css/properties.json');\nvar mdnSyntaxes = require('mdn-data/css/syntaxes.json');\nvar patch = require('./patch.json');\nvar data = {\n    properties: {},\n    types: {}\n};\n\nfunction normalizeSyntax(syntax) {\n    return syntax\n        .replace(/&lt;/g, '<')\n        .replace(/&gt;/g, '>')\n        .replace(/&nbsp;/g, ' ')\n        .replace(/&amp;/g, '&');\n}\n\nfunction patchDict(dict, patchDict) {\n    for (var key in patchDict) {\n        if (key in dict) {\n            if (patchDict[key].syntax) {\n                dict[key].syntax = patchDict[key].syntax;\n            } else {\n                delete dict[key];\n            }\n        } else {\n            if (patchDict[key].syntax) {\n                dict[key] = patchDict[key];\n            }\n        }\n    }\n}\n\n// apply patch\npatchDict(mdnProperties, patch.properties);\npatchDict(mdnSyntaxes, patch.syntaxes);\n\n// normalize source mdnProperties syntaxes, since it uses html token\nfor (var key in mdnProperties) {\n    data.properties[key] = normalizeSyntax(mdnProperties[key].syntax);\n}\n\nfor (var key in mdnSyntaxes) {\n    data.types[key] = normalizeSyntax(mdnSyntaxes[key].syntax);\n}\n\nmodule.exports = data;\n","var cmpChar = require('../../tokenizer').cmpChar;\nvar isNumber = require('../../tokenizer').isNumber;\nvar TYPE = require('../../tokenizer').TYPE;\n\nvar IDENTIFIER = TYPE.Identifier;\nvar NUMBER = TYPE.Number;\nvar PLUSSIGN = TYPE.PlusSign;\nvar HYPHENMINUS = TYPE.HyphenMinus;\nvar N = 110; // 'n'.charCodeAt(0)\nvar DISALLOW_SIGN = true;\nvar ALLOW_SIGN = false;\n\nfunction checkTokenIsInteger(scanner, disallowSign) {\n    var pos = scanner.tokenStart;\n\n    if (scanner.source.charCodeAt(pos) === PLUSSIGN ||\n        scanner.source.charCodeAt(pos) === HYPHENMINUS) {\n        if (disallowSign) {\n            scanner.error();\n        }\n        pos++;\n    }\n\n    for (; pos < scanner.tokenEnd; pos++) {\n        if (!isNumber(scanner.source.charCodeAt(pos))) {\n            scanner.error('Unexpected input', pos);\n        }\n    }\n}\n\n// An+B microsyntax https://www.w3.org/TR/css-syntax-3/#anb\nmodule.exports = {\n    name: 'AnPlusB',\n    structure: {\n        a: [String, null],\n        b: [String, null]\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var end = start;\n        var prefix = '';\n        var a = null;\n        var b = null;\n\n        if (this.scanner.tokenType === NUMBER ||\n            this.scanner.tokenType === PLUSSIGN) {\n            checkTokenIsInteger(this.scanner, ALLOW_SIGN);\n            prefix = this.scanner.getTokenValue();\n            this.scanner.next();\n            end = this.scanner.tokenStart;\n        }\n\n        if (this.scanner.tokenType === IDENTIFIER) {\n            var bStart = this.scanner.tokenStart;\n\n            if (cmpChar(this.scanner.source, bStart, HYPHENMINUS)) {\n                if (prefix === '') {\n                    prefix = '-';\n                    bStart++;\n                } else {\n                    this.scanner.error('Unexpected hyphen minus');\n                }\n            }\n\n            if (!cmpChar(this.scanner.source, bStart, N)) {\n                this.scanner.error();\n            }\n\n            a = prefix === ''  ? '1'  :\n                prefix === '+' ? '+1' :\n                prefix === '-' ? '-1' :\n                prefix;\n\n            var len = this.scanner.tokenEnd - bStart;\n            if (len > 1) {\n                // ..n-..\n                if (this.scanner.source.charCodeAt(bStart + 1) !== HYPHENMINUS) {\n                    this.scanner.error('Unexpected input', bStart + 1);\n                }\n\n                if (len > 2) {\n                    // ..n-{number}..\n                    this.scanner.tokenStart = bStart + 2;\n                } else {\n                    // ..n- {number}\n                    this.scanner.next();\n                    this.scanner.skipSC();\n                }\n\n                checkTokenIsInteger(this.scanner, DISALLOW_SIGN);\n                b = '-' + this.scanner.getTokenValue();\n                this.scanner.next();\n                end = this.scanner.tokenStart;\n            } else {\n                prefix = '';\n                this.scanner.next();\n                end = this.scanner.tokenStart;\n                this.scanner.skipSC();\n\n                if (this.scanner.tokenType === HYPHENMINUS ||\n                    this.scanner.tokenType === PLUSSIGN) {\n                    prefix = this.scanner.getTokenValue();\n                    this.scanner.next();\n                    this.scanner.skipSC();\n                }\n\n                if (this.scanner.tokenType === NUMBER) {\n                    checkTokenIsInteger(this.scanner, prefix !== '');\n\n                    if (!isNumber(this.scanner.source.charCodeAt(this.scanner.tokenStart))) {\n                        prefix = this.scanner.source.charAt(this.scanner.tokenStart);\n                        this.scanner.tokenStart++;\n                    }\n\n                    if (prefix === '') {\n                        // should be an operator before number\n                        this.scanner.error();\n                    } else if (prefix === '+') {\n                        // plus is using by default\n                        prefix = '';\n                    }\n\n                    b = prefix + this.scanner.getTokenValue();\n\n                    this.scanner.next();\n                    end = this.scanner.tokenStart;\n                } else {\n                    if (prefix) {\n                        this.scanner.eat(NUMBER);\n                    }\n                }\n            }\n        } else {\n            if (prefix === '' || prefix === '+') { // no number\n                this.scanner.error(\n                    'Number or identifier is expected',\n                    this.scanner.tokenStart + (\n                        this.scanner.tokenType === PLUSSIGN ||\n                        this.scanner.tokenType === HYPHENMINUS\n                    )\n                );\n            }\n\n            b = prefix;\n        }\n\n        return {\n            type: 'AnPlusB',\n            loc: this.getLocation(start, end),\n            a: a,\n            b: b\n        };\n    },\n    generate: function(node) {\n        var a = node.a !== null && node.a !== undefined;\n        var b = node.b !== null && node.b !== undefined;\n\n        if (a) {\n            this.chunk(\n                node.a === '+1' ? '+n' :\n                node.a ===  '1' ?  'n' :\n                node.a === '-1' ? '-n' :\n                node.a + 'n'\n            );\n\n            if (b) {\n                b = String(node.b);\n                if (b.charAt(0) === '-' || b.charAt(0) === '+') {\n                    this.chunk(b.charAt(0));\n                    this.chunk(b.substr(1));\n                } else {\n                    this.chunk('+');\n                    this.chunk(b);\n                }\n            }\n        } else {\n            this.chunk(String(node.b));\n        }\n    }\n};\n","var TYPE = require('../../tokenizer').TYPE;\n\nvar ATRULE = TYPE.Atrule;\nvar SEMICOLON = TYPE.Semicolon;\nvar LEFTCURLYBRACKET = TYPE.LeftCurlyBracket;\nvar RIGHTCURLYBRACKET = TYPE.RightCurlyBracket;\n\nfunction consumeRaw(startToken) {\n    return this.Raw(startToken, SEMICOLON, LEFTCURLYBRACKET, false, true);\n}\n\nfunction isDeclarationBlockAtrule() {\n    for (var offset = 1, type; type = this.scanner.lookupType(offset); offset++) {\n        if (type === RIGHTCURLYBRACKET) {\n            return true;\n        }\n\n        if (type === LEFTCURLYBRACKET ||\n            type === ATRULE) {\n            return false;\n        }\n    }\n\n    return false;\n}\n\nmodule.exports = {\n    name: 'Atrule',\n    structure: {\n        name: String,\n        prelude: ['AtrulePrelude', 'Raw', null],\n        block: ['Block', null]\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var name;\n        var nameLowerCase;\n        var prelude = null;\n        var block = null;\n\n        this.scanner.eat(ATRULE);\n\n        name = this.scanner.substrToCursor(start + 1);\n        nameLowerCase = name.toLowerCase();\n        this.scanner.skipSC();\n\n        // parse prelude\n        if (this.scanner.eof === false &&\n            this.scanner.tokenType !== LEFTCURLYBRACKET &&\n            this.scanner.tokenType !== SEMICOLON) {\n            if (this.parseAtrulePrelude) {\n                prelude = this.parseWithFallback(this.AtrulePrelude.bind(this, name), consumeRaw);\n\n                // turn empty AtrulePrelude into null\n                if (prelude.type === 'AtrulePrelude' && prelude.children.head === null) {\n                    prelude = null;\n                }\n            } else {\n                prelude = consumeRaw.call(this, this.scanner.currentToken);\n            }\n\n            this.scanner.skipSC();\n        }\n\n        switch (this.scanner.tokenType) {\n            case SEMICOLON:\n                this.scanner.next();\n                break;\n\n            case LEFTCURLYBRACKET:\n                if (this.atrule.hasOwnProperty(nameLowerCase) &&\n                    typeof this.atrule[nameLowerCase].block === 'function') {\n                    block = this.atrule[nameLowerCase].block.call(this);\n                } else {\n                    // TODO: should consume block content as Raw?\n                    block = this.Block(isDeclarationBlockAtrule.call(this));\n                }\n\n                break;\n        }\n\n        return {\n            type: 'Atrule',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            name: name,\n            prelude: prelude,\n            block: block\n        };\n    },\n    generate: function(node) {\n        this.chunk('@');\n        this.chunk(node.name);\n\n        if (node.prelude !== null) {\n            this.chunk(' ');\n            this.node(node.prelude);\n        }\n\n        if (node.block) {\n            this.node(node.block);\n        } else {\n            this.chunk(';');\n        }\n    },\n    walkContext: 'atrule'\n};\n","var TYPE = require('../../tokenizer').TYPE;\n\nvar IDENTIFIER = TYPE.Identifier;\nvar STRING = TYPE.String;\nvar DOLLARSIGN = TYPE.DollarSign;\nvar ASTERISK = TYPE.Asterisk;\nvar COLON = TYPE.Colon;\nvar EQUALSSIGN = TYPE.EqualsSign;\nvar LEFTSQUAREBRACKET = TYPE.LeftSquareBracket;\nvar RIGHTSQUAREBRACKET = TYPE.RightSquareBracket;\nvar CIRCUMFLEXACCENT = TYPE.CircumflexAccent;\nvar VERTICALLINE = TYPE.VerticalLine;\nvar TILDE = TYPE.Tilde;\n\nfunction getAttributeName() {\n    if (this.scanner.eof) {\n        this.scanner.error('Unexpected end of input');\n    }\n\n    var start = this.scanner.tokenStart;\n    var expectIdentifier = false;\n    var checkColon = true;\n\n    if (this.scanner.tokenType === ASTERISK) {\n        expectIdentifier = true;\n        checkColon = false;\n        this.scanner.next();\n    } else if (this.scanner.tokenType !== VERTICALLINE) {\n        this.scanner.eat(IDENTIFIER);\n    }\n\n    if (this.scanner.tokenType === VERTICALLINE) {\n        if (this.scanner.lookupType(1) !== EQUALSSIGN) {\n            this.scanner.next();\n            this.scanner.eat(IDENTIFIER);\n        } else if (expectIdentifier) {\n            this.scanner.error('Identifier is expected', this.scanner.tokenEnd);\n        }\n    } else if (expectIdentifier) {\n        this.scanner.error('Vertical line is expected');\n    }\n\n    if (checkColon && this.scanner.tokenType === COLON) {\n        this.scanner.next();\n        this.scanner.eat(IDENTIFIER);\n    }\n\n    return {\n        type: 'Identifier',\n        loc: this.getLocation(start, this.scanner.tokenStart),\n        name: this.scanner.substrToCursor(start)\n    };\n}\n\nfunction getOperator() {\n    var start = this.scanner.tokenStart;\n    var tokenType = this.scanner.tokenType;\n\n    if (tokenType !== EQUALSSIGN &&        // =\n        tokenType !== TILDE &&             // ~=\n        tokenType !== CIRCUMFLEXACCENT &&  // ^=\n        tokenType !== DOLLARSIGN &&        // $=\n        tokenType !== ASTERISK &&          // *=\n        tokenType !== VERTICALLINE         // |=\n    ) {\n        this.scanner.error('Attribute selector (=, ~=, ^=, $=, *=, |=) is expected');\n    }\n\n    if (tokenType === EQUALSSIGN) {\n        this.scanner.next();\n    } else {\n        this.scanner.next();\n        this.scanner.eat(EQUALSSIGN);\n    }\n\n    return this.scanner.substrToCursor(start);\n}\n\n// '[' S* attrib_name ']'\n// '[' S* attrib_name S* attrib_matcher S* [ IDENT | STRING ] S* attrib_flags? S* ']'\nmodule.exports = {\n    name: 'AttributeSelector',\n    structure: {\n        name: 'Identifier',\n        matcher: [String, null],\n        value: ['String', 'Identifier', null],\n        flags: [String, null]\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var name;\n        var matcher = null;\n        var value = null;\n        var flags = null;\n\n        this.scanner.eat(LEFTSQUAREBRACKET);\n        this.scanner.skipSC();\n\n        name = getAttributeName.call(this);\n        this.scanner.skipSC();\n\n        if (this.scanner.tokenType !== RIGHTSQUAREBRACKET) {\n            // avoid case `[name i]`\n            if (this.scanner.tokenType !== IDENTIFIER) {\n                matcher = getOperator.call(this);\n\n                this.scanner.skipSC();\n\n                value = this.scanner.tokenType === STRING\n                    ? this.String()\n                    : this.Identifier();\n\n                this.scanner.skipSC();\n            }\n\n            // attribute flags\n            if (this.scanner.tokenType === IDENTIFIER) {\n                flags = this.scanner.getTokenValue();\n                this.scanner.next();\n\n                this.scanner.skipSC();\n            }\n        }\n\n        this.scanner.eat(RIGHTSQUAREBRACKET);\n\n        return {\n            type: 'AttributeSelector',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            name: name,\n            matcher: matcher,\n            value: value,\n            flags: flags\n        };\n    },\n    generate: function(node) {\n        var flagsPrefix = ' ';\n\n        this.chunk('[');\n        this.node(node.name);\n\n        if (node.matcher !== null) {\n            this.chunk(node.matcher);\n\n            if (node.value !== null) {\n                this.node(node.value);\n\n                // space between string and flags is not required\n                if (node.value.type === 'String') {\n                    flagsPrefix = '';\n                }\n            }\n        }\n\n        if (node.flags !== null) {\n            this.chunk(flagsPrefix);\n            this.chunk(node.flags);\n        }\n\n        this.chunk(']');\n    }\n};\n","var TYPE = require('../../tokenizer').TYPE;\n\nvar WHITESPACE = TYPE.WhiteSpace;\nvar COMMENT = TYPE.Comment;\nvar SEMICOLON = TYPE.Semicolon;\nvar ATRULE = TYPE.Atrule;\nvar LEFTCURLYBRACKET = TYPE.LeftCurlyBracket;\nvar RIGHTCURLYBRACKET = TYPE.RightCurlyBracket;\n\nfunction consumeRaw(startToken) {\n    return this.Raw(startToken, 0, 0, false, true);\n}\nfunction consumeRule() {\n    return this.parseWithFallback(this.Rule, consumeRaw);\n}\nfunction consumeRawDeclaration(startToken) {\n    return this.Raw(startToken, 0, SEMICOLON, true, true);\n}\nfunction consumeDeclaration() {\n    if (this.scanner.tokenType === SEMICOLON) {\n        return consumeRawDeclaration.call(this, this.scanner.currentToken);\n    }\n\n    var node = this.parseWithFallback(this.Declaration, consumeRawDeclaration);\n\n    if (this.scanner.tokenType === SEMICOLON) {\n        this.scanner.next();\n    }\n\n    return node;\n}\n\nmodule.exports = {\n    name: 'Block',\n    structure: {\n        children: [[\n            'Atrule',\n            'Rule',\n            'Declaration'\n        ]]\n    },\n    parse: function(isDeclaration) {\n        var consumer = isDeclaration ? consumeDeclaration : consumeRule;\n\n        var start = this.scanner.tokenStart;\n        var children = this.createList();\n\n        this.scanner.eat(LEFTCURLYBRACKET);\n\n        scan:\n        while (!this.scanner.eof) {\n            switch (this.scanner.tokenType) {\n                case RIGHTCURLYBRACKET:\n                    break scan;\n\n                case WHITESPACE:\n                case COMMENT:\n                    this.scanner.next();\n                    break;\n\n                case ATRULE:\n                    children.push(this.parseWithFallback(this.Atrule, consumeRaw));\n                    break;\n\n                default:\n                    children.push(consumer.call(this));\n            }\n        }\n\n        if (!this.scanner.eof) {\n            this.scanner.eat(RIGHTCURLYBRACKET);\n        }\n\n        return {\n            type: 'Block',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            children: children\n        };\n    },\n    generate: function(node) {\n        this.chunk('{');\n        this.children(node, function(prev) {\n            if (prev.type === 'Declaration') {\n                this.chunk(';');\n            }\n        });\n        this.chunk('}');\n    },\n    walkContext: 'block'\n};\n","var isCustomProperty = require('../../utils/names').isCustomProperty;\nvar TYPE = require('../../tokenizer').TYPE;\n\nvar IDENTIFIER = TYPE.Identifier;\nvar COLON = TYPE.Colon;\nvar EXCLAMATIONMARK = TYPE.ExclamationMark;\nvar SOLIDUS = TYPE.Solidus;\nvar ASTERISK = TYPE.Asterisk;\nvar DOLLARSIGN = TYPE.DollarSign;\nvar HYPHENMINUS = TYPE.HyphenMinus;\nvar SEMICOLON = TYPE.Semicolon;\nvar PLUSSIGN = TYPE.PlusSign;\nvar NUMBERSIGN = TYPE.NumberSign;\n\nfunction consumeValueRaw(startToken) {\n    return this.Raw(startToken, EXCLAMATIONMARK, SEMICOLON, false, true);\n}\n\nfunction consumeCustomPropertyRaw(startToken) {\n    return this.Raw(startToken, EXCLAMATIONMARK, SEMICOLON, false, false);\n}\n\nfunction consumeValue() {\n    var startValueToken = this.scanner.currentToken;\n    var value = this.Value();\n\n    if (value.type !== 'Raw' &&\n        this.scanner.eof === false &&\n        this.scanner.tokenType !== SEMICOLON &&\n        this.scanner.tokenType !== EXCLAMATIONMARK &&\n        this.scanner.isBalanceEdge(startValueToken) === false) {\n        this.scanner.error();\n    }\n\n    return value;\n}\n\nmodule.exports = {\n    name: 'Declaration',\n    structure: {\n        important: [Boolean, String],\n        property: String,\n        value: ['Value', 'Raw']\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var startToken = this.scanner.currentToken;\n        var property = readProperty.call(this);\n        var customProperty = isCustomProperty(property);\n        var parseValue = customProperty ? this.parseCustomProperty : this.parseValue;\n        var consumeRaw = customProperty ? consumeCustomPropertyRaw : consumeValueRaw;\n        var important = false;\n        var value;\n\n        this.scanner.skipSC();\n        this.scanner.eat(COLON);\n\n        if (!customProperty) {\n            this.scanner.skipSC();\n        }\n\n        if (parseValue) {\n            value = this.parseWithFallback(consumeValue, consumeRaw);\n        } else {\n            value = consumeRaw.call(this, this.scanner.currentToken);\n        }\n\n        if (this.scanner.tokenType === EXCLAMATIONMARK) {\n            important = getImportant(this.scanner);\n            this.scanner.skipSC();\n        }\n\n        // Do not include semicolon to range per spec\n        // https://drafts.csswg.org/css-syntax/#declaration-diagram\n\n        if (this.scanner.eof === false &&\n            this.scanner.tokenType !== SEMICOLON &&\n            this.scanner.isBalanceEdge(startToken) === false) {\n            this.scanner.error();\n        }\n\n        return {\n            type: 'Declaration',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            important: important,\n            property: property,\n            value: value\n        };\n    },\n    generate: function(node) {\n        this.chunk(node.property);\n        this.chunk(':');\n        this.node(node.value);\n\n        if (node.important) {\n            this.chunk(node.important === true ? '!important' : '!' + node.important);\n        }\n    },\n    walkContext: 'declaration'\n};\n\nfunction readProperty() {\n    var start = this.scanner.tokenStart;\n    var prefix = 0;\n\n    // hacks\n    switch (this.scanner.tokenType) {\n        case ASTERISK:\n        case DOLLARSIGN:\n        case PLUSSIGN:\n        case NUMBERSIGN:\n            prefix = 1;\n            break;\n\n        // TODO: not sure we should support this hack\n        case SOLIDUS:\n            prefix = this.scanner.lookupType(1) === SOLIDUS ? 2 : 1;\n            break;\n    }\n\n    if (this.scanner.lookupType(prefix) === HYPHENMINUS) {\n        prefix++;\n    }\n\n    if (prefix) {\n        this.scanner.skip(prefix);\n    }\n\n    this.scanner.eat(IDENTIFIER);\n\n    return this.scanner.substrToCursor(start);\n}\n\n// ! ws* important\nfunction getImportant(scanner) {\n    scanner.eat(EXCLAMATIONMARK);\n    scanner.skipSC();\n\n    var important = scanner.consume(IDENTIFIER);\n\n    // store original value in case it differ from `important`\n    // for better original source restoring and hacks like `!ie` support\n    return important === 'important' ? true : important;\n}\n","var TYPE = require('../../tokenizer').TYPE;\n\nvar WHITESPACE = TYPE.WhiteSpace;\nvar COMMENT = TYPE.Comment;\nvar SEMICOLON = TYPE.Semicolon;\n\nfunction consumeRaw(startToken) {\n    return this.Raw(startToken, 0, SEMICOLON, true, true);\n}\n\nmodule.exports = {\n    name: 'DeclarationList',\n    structure: {\n        children: [[\n            'Declaration'\n        ]]\n    },\n    parse: function() {\n        var children = this.createList();\n\n        scan:\n        while (!this.scanner.eof) {\n            switch (this.scanner.tokenType) {\n                case WHITESPACE:\n                case COMMENT:\n                case SEMICOLON:\n                    this.scanner.next();\n                    break;\n\n                default:\n                    children.push(this.parseWithFallback(this.Declaration, consumeRaw));\n            }\n        }\n\n        return {\n            type: 'DeclarationList',\n            loc: this.getLocationFromList(children),\n            children: children\n        };\n    },\n    generate: function(node) {\n        this.children(node, function(prev) {\n            if (prev.type === 'Declaration') {\n                this.chunk(';');\n            }\n        });\n    }\n};\n","var NUMBER = require('../../tokenizer').TYPE.Number;\n\n// special reader for units to avoid adjoined IE hacks (i.e. '1px\\9')\nfunction readUnit(scanner) {\n    var unit = scanner.getTokenValue();\n    var backSlashPos = unit.indexOf('\\\\');\n\n    if (backSlashPos > 0) {\n        // patch token offset\n        scanner.tokenStart += backSlashPos;\n\n        // return part before backslash\n        return unit.substring(0, backSlashPos);\n    }\n\n    // no backslash in unit name\n    scanner.next();\n\n    return unit;\n}\n\n// number ident\nmodule.exports = {\n    name: 'Dimension',\n    structure: {\n        value: String,\n        unit: String\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var value = this.scanner.consume(NUMBER);\n        var unit = readUnit(this.scanner);\n\n        return {\n            type: 'Dimension',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            value: value,\n            unit: unit\n        };\n    },\n    generate: function(node) {\n        this.chunk(node.value);\n        this.chunk(node.unit);\n    }\n};\n","var isHex = require('../../tokenizer').isHex;\nvar TYPE = require('../../tokenizer').TYPE;\n\nvar IDENTIFIER = TYPE.Identifier;\nvar NUMBER = TYPE.Number;\nvar NUMBERSIGN = TYPE.NumberSign;\n\nfunction consumeHexSequence(scanner, required) {\n    if (!isHex(scanner.source.charCodeAt(scanner.tokenStart))) {\n        if (required) {\n            scanner.error('Unexpected input', scanner.tokenStart);\n        } else {\n            return;\n        }\n    }\n\n    for (var pos = scanner.tokenStart + 1; pos < scanner.tokenEnd; pos++) {\n        var code = scanner.source.charCodeAt(pos);\n\n        // break on non-hex char\n        if (!isHex(code)) {\n            // break token, exclude symbol\n            scanner.tokenStart = pos;\n            return;\n        }\n    }\n\n    // token is full hex sequence, go to next token\n    scanner.next();\n}\n\n// # ident\nmodule.exports = {\n    name: 'HexColor',\n    structure: {\n        value: String\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n\n        this.scanner.eat(NUMBERSIGN);\n\n        scan:\n        switch (this.scanner.tokenType) {\n            case NUMBER:\n                consumeHexSequence(this.scanner, true);\n\n                // if token is identifier then number consists of hex only,\n                // try to add identifier to result\n                if (this.scanner.tokenType === IDENTIFIER) {\n                    consumeHexSequence(this.scanner, false);\n                }\n\n                break;\n\n            case IDENTIFIER:\n                consumeHexSequence(this.scanner, true);\n                break;\n\n            default:\n                this.scanner.error('Number or identifier is expected');\n        }\n\n        return {\n            type: 'HexColor',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            value: this.scanner.substrToCursor(start + 1) // skip #\n        };\n    },\n    generate: function(node) {\n        this.chunk('#');\n        this.chunk(node.value);\n    }\n};\n","var isNumber = require('../../tokenizer').isNumber;\nvar TYPE = require('../../tokenizer').TYPE;\nvar NUMBER = TYPE.Number;\nvar SOLIDUS = TYPE.Solidus;\nvar FULLSTOP = TYPE.FullStop;\n\n// Terms of <ratio> should to be a positive number (not zero or negative)\n// (see https://drafts.csswg.org/mediaqueries-3/#values)\n// However, -o-min-device-pixel-ratio takes fractional values as a ratio's term\n// and this is using by various sites. Therefore we relax checking on parse\n// to test a term is unsigned number without exponent part.\n// Additional checks may to be applied on lexer validation.\nfunction consumeNumber(scanner) {\n    var value = scanner.consumeNonWS(NUMBER);\n\n    for (var i = 0; i < value.length; i++) {\n        var code = value.charCodeAt(i);\n        if (!isNumber(code) && code !== FULLSTOP) {\n            scanner.error('Unsigned number is expected', scanner.tokenStart - value.length + i);\n        }\n    }\n\n    if (Number(value) === 0) {\n        scanner.error('Zero number is not allowed', scanner.tokenStart - value.length);\n    }\n\n    return value;\n}\n\n// <positive-integer> S* '/' S* <positive-integer>\nmodule.exports = {\n    name: 'Ratio',\n    structure: {\n        left: String,\n        right: String\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var left = consumeNumber(this.scanner);\n        var right;\n\n        this.scanner.eatNonWS(SOLIDUS);\n        right = consumeNumber(this.scanner);\n\n        return {\n            type: 'Ratio',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            left: left,\n            right: right\n        };\n    },\n    generate: function(node) {\n        this.chunk(node.left);\n        this.chunk('/');\n        this.chunk(node.right);\n    }\n};\n","var TYPE = require('../../tokenizer').TYPE;\n\nvar LEFTCURLYBRACKET = TYPE.LeftCurlyBracket;\n\nfunction consumeRaw(startToken) {\n    return this.Raw(startToken, LEFTCURLYBRACKET, 0, false, true);\n}\n\nfunction consumePrelude() {\n    var prelude = this.SelectorList();\n\n    if (prelude.type !== 'Raw' &&\n        this.scanner.eof === false &&\n        this.scanner.tokenType !== LEFTCURLYBRACKET) {\n        this.scanner.error();\n    }\n\n    return prelude;\n}\n\nmodule.exports = {\n    name: 'Rule',\n    structure: {\n        prelude: ['SelectorList', 'Raw'],\n        block: ['Block']\n    },\n    parse: function() {\n        var startToken = this.scanner.currentToken;\n        var startOffset = this.scanner.tokenStart;\n        var prelude;\n        var block;\n\n        if (this.parseRulePrelude) {\n            prelude = this.parseWithFallback(consumePrelude, consumeRaw);\n        } else {\n            prelude = consumeRaw.call(this, startToken);\n        }\n\n        block = this.Block(true);\n\n        return {\n            type: 'Rule',\n            loc: this.getLocation(startOffset, this.scanner.tokenStart),\n            prelude: prelude,\n            block: block\n        };\n    },\n    generate: function(node) {\n        this.node(node.prelude);\n        this.node(node.block);\n    },\n    walkContext: 'rule'\n};\n","var TYPE = require('../../tokenizer').TYPE;\n\nvar WHITESPACE = TYPE.WhiteSpace;\nvar COMMENT = TYPE.Comment;\nvar EXCLAMATIONMARK = TYPE.ExclamationMark;\nvar ATRULE = TYPE.Atrule;\nvar CDO = TYPE.CDO;\nvar CDC = TYPE.CDC;\n\nfunction consumeRaw(startToken) {\n    return this.Raw(startToken, 0, 0, false, false);\n}\n\nmodule.exports = {\n    name: 'StyleSheet',\n    structure: {\n        children: [[\n            'Comment',\n            'CDO',\n            'CDC',\n            'Atrule',\n            'Rule',\n            'Raw'\n        ]]\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var children = this.createList();\n        var child;\n\n        scan:\n        while (!this.scanner.eof) {\n            switch (this.scanner.tokenType) {\n                case WHITESPACE:\n                    this.scanner.next();\n                    continue;\n\n                case COMMENT:\n                    // ignore comments except exclamation comments (i.e. /*! .. */) on top level\n                    if (this.scanner.source.charCodeAt(this.scanner.tokenStart + 2) !== EXCLAMATIONMARK) {\n                        this.scanner.next();\n                        continue;\n                    }\n\n                    child = this.Comment();\n                    break;\n\n                case CDO: // <!--\n                    child = this.CDO();\n                    break;\n\n                case CDC: // -->\n                    child = this.CDC();\n                    break;\n\n                // CSS Syntax Module Level 3\n                // §2.2 Error handling\n                // At the \"top level\" of a stylesheet, an <at-keyword-token> starts an at-rule.\n                case ATRULE:\n                    child = this.parseWithFallback(this.Atrule, consumeRaw);\n                    break;\n\n                // Anything else starts a qualified rule ...\n                default:\n                    child = this.parseWithFallback(this.Rule, consumeRaw);\n            }\n\n            children.push(child);\n        }\n\n        return {\n            type: 'StyleSheet',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            children: children\n        };\n    },\n    generate: function(node) {\n        this.children(node);\n    },\n    walkContext: 'stylesheet'\n};\n","var TYPE = require('../../tokenizer').TYPE;\n\nvar IDENTIFIER = TYPE.Identifier;\nvar ASTERISK = TYPE.Asterisk;\nvar VERTICALLINE = TYPE.VerticalLine;\n\nfunction eatIdentifierOrAsterisk() {\n    if (this.scanner.tokenType !== IDENTIFIER &&\n        this.scanner.tokenType !== ASTERISK) {\n        this.scanner.error('Identifier or asterisk is expected');\n    }\n\n    this.scanner.next();\n}\n\n// ident\n// ident|ident\n// ident|*\n// *\n// *|ident\n// *|*\n// |ident\n// |*\nmodule.exports = {\n    name: 'TypeSelector',\n    structure: {\n        name: String\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n\n        if (this.scanner.tokenType === VERTICALLINE) {\n            this.scanner.next();\n            eatIdentifierOrAsterisk.call(this);\n        } else {\n            eatIdentifierOrAsterisk.call(this);\n\n            if (this.scanner.tokenType === VERTICALLINE) {\n                this.scanner.next();\n                eatIdentifierOrAsterisk.call(this);\n            }\n        }\n\n        return {\n            type: 'TypeSelector',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            name: this.scanner.substrToCursor(start)\n        };\n    },\n    generate: function(node) {\n        this.chunk(node.name);\n    }\n};\n","var isHex = require('../../tokenizer').isHex;\nvar TYPE = require('../../tokenizer').TYPE;\n\nvar IDENTIFIER = TYPE.Identifier;\nvar NUMBER = TYPE.Number;\nvar PLUSSIGN = TYPE.PlusSign;\nvar HYPHENMINUS = TYPE.HyphenMinus;\nvar FULLSTOP = TYPE.FullStop;\nvar QUESTIONMARK = TYPE.QuestionMark;\n\nfunction scanUnicodeNumber(scanner) {\n    for (var pos = scanner.tokenStart + 1; pos < scanner.tokenEnd; pos++) {\n        var code = scanner.source.charCodeAt(pos);\n\n        // break on fullstop or hyperminus/plussign after exponent\n        if (code === FULLSTOP || code === PLUSSIGN) {\n            // break token, exclude symbol\n            scanner.tokenStart = pos;\n            return false;\n        }\n    }\n\n    return true;\n}\n\n// https://drafts.csswg.org/css-syntax-3/#urange\nfunction scanUnicodeRange(scanner) {\n    var hexStart = scanner.tokenStart + 1; // skip +\n    var hexLength = 0;\n\n    scan: {\n        if (scanner.tokenType === NUMBER) {\n            if (scanner.source.charCodeAt(scanner.tokenStart) !== FULLSTOP && scanUnicodeNumber(scanner)) {\n                scanner.next();\n            } else if (scanner.source.charCodeAt(scanner.tokenStart) !== HYPHENMINUS) {\n                break scan;\n            }\n        } else {\n            scanner.next(); // PLUSSIGN\n        }\n\n        if (scanner.tokenType === HYPHENMINUS) {\n            scanner.next();\n        }\n\n        if (scanner.tokenType === NUMBER) {\n            scanner.next();\n        }\n\n        if (scanner.tokenType === IDENTIFIER) {\n            scanner.next();\n        }\n\n        if (scanner.tokenStart === hexStart) {\n            scanner.error('Unexpected input', hexStart);\n        }\n    }\n\n    // validate for U+x{1,6} or U+x{1,6}-x{1,6}\n    // where x is [0-9a-fA-F]\n    for (var i = hexStart, wasHyphenMinus = false; i < scanner.tokenStart; i++) {\n        var code = scanner.source.charCodeAt(i);\n\n        if (isHex(code) === false && (code !== HYPHENMINUS || wasHyphenMinus)) {\n            scanner.error('Unexpected input', i);\n        }\n\n        if (code === HYPHENMINUS) {\n            // hex sequence shouldn't be an empty\n            if (hexLength === 0) {\n                scanner.error('Unexpected input', i);\n            }\n\n            wasHyphenMinus = true;\n            hexLength = 0;\n        } else {\n            hexLength++;\n\n            // too long hex sequence\n            if (hexLength > 6) {\n                scanner.error('Too long hex sequence', i);\n            }\n        }\n\n    }\n\n    // check we have a non-zero sequence\n    if (hexLength === 0) {\n        scanner.error('Unexpected input', i - 1);\n    }\n\n    // U+abc???\n    if (!wasHyphenMinus) {\n        // consume as many U+003F QUESTION MARK (?) code points as possible\n        for (; hexLength < 6 && !scanner.eof; scanner.next()) {\n            if (scanner.tokenType !== QUESTIONMARK) {\n                break;\n            }\n\n            hexLength++;\n        }\n    }\n}\n\nmodule.exports = {\n    name: 'UnicodeRange',\n    structure: {\n        value: String\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n\n        this.scanner.next(); // U or u\n        scanUnicodeRange(this.scanner);\n\n        return {\n            type: 'UnicodeRange',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            value: this.scanner.substrToCursor(start)\n        };\n    },\n    generate: function(node) {\n        this.chunk(node.value);\n    }\n};\n","var TYPE = require('../../tokenizer').TYPE;\n\nvar WHITESPACE = TYPE.WhiteSpace;\nvar COMMENT = TYPE.Comment;\nvar IDENTIFIER = TYPE.Identifier;\nvar FUNCTION = TYPE.Function;\nvar LEFTPARENTHESIS = TYPE.LeftParenthesis;\nvar HYPHENMINUS = TYPE.HyphenMinus;\nvar COLON = TYPE.Colon;\n\nfunction consumeRaw() {\n    return this.createSingleNodeList(\n        this.Raw(this.scanner.currentToken, 0, 0, false, false)\n    );\n}\n\nfunction parentheses() {\n    var index = 0;\n\n    this.scanner.skipSC();\n\n    // TODO: make it simplier\n    if (this.scanner.tokenType === IDENTIFIER) {\n        index = 1;\n    } else if (this.scanner.tokenType === HYPHENMINUS &&\n               this.scanner.lookupType(1) === IDENTIFIER) {\n        index = 2;\n    }\n\n    if (index !== 0 && this.scanner.lookupNonWSType(index) === COLON) {\n        return this.createSingleNodeList(\n            this.Declaration()\n        );\n    }\n\n    return readSequence.call(this);\n}\n\nfunction readSequence() {\n    var children = this.createList();\n    var space = null;\n    var child;\n\n    this.scanner.skipSC();\n\n    scan:\n    while (!this.scanner.eof) {\n        switch (this.scanner.tokenType) {\n            case WHITESPACE:\n                space = this.WhiteSpace();\n                continue;\n\n            case COMMENT:\n                this.scanner.next();\n                continue;\n\n            case FUNCTION:\n                child = this.Function(consumeRaw, this.scope.AtrulePrelude);\n                break;\n\n            case IDENTIFIER:\n                child = this.Identifier();\n                break;\n\n            case LEFTPARENTHESIS:\n                child = this.Parentheses(parentheses, this.scope.AtrulePrelude);\n                break;\n\n            default:\n                break scan;\n        }\n\n        if (space !== null) {\n            children.push(space);\n            space = null;\n        }\n\n        children.push(child);\n    }\n\n    return children;\n}\n\nmodule.exports = {\n    parse: {\n        prelude: function() {\n            var children = readSequence.call(this);\n\n            if (this.getFirstListNode(children) === null) {\n                this.scanner.error('Condition is expected');\n            }\n\n            return children;\n        },\n        block: function() {\n            return this.Block(false);\n        }\n    }\n};\n","'use strict';\n\nvar csstree     = require('css-tree'),\n    List        = csstree.List,\n    stable      = require('stable'),\n    specificity = require('csso/lib/restructure/prepare/specificity');\n\n\n/**\n * Flatten a CSS AST to a selectors list.\n *\n * @param {Object} cssAst css-tree AST to flatten\n * @return {Array} selectors\n */\nfunction flattenToSelectors(cssAst) {\n    var selectors = [];\n\n    csstree.walk(cssAst, {visit: 'Rule', enter: function(node) {\n        if (node.type !== 'Rule') {\n            return;\n        }\n\n        var atrule = this.atrule;\n        var rule = node;\n\n        node.prelude.children.each(function(selectorNode, selectorItem) {\n            var selector = {\n                item: selectorItem,\n                atrule: atrule,\n                rule: rule,\n                pseudos: []\n            };\n\n            selectorNode.children.each(function(selectorChildNode, selectorChildItem, selectorChildList) {\n                if (selectorChildNode.type === 'PseudoClassSelector' ||\n                    selectorChildNode.type === 'PseudoElementSelector') {\n                    selector.pseudos.push({\n                        item: selectorChildItem,\n                        list: selectorChildList\n                    });\n                }\n            });\n\n            selectors.push(selector);\n        });\n    }});\n\n    return selectors;\n}\n\n/**\n * Filter selectors by Media Query.\n *\n * @param {Array} selectors to filter\n * @param {Array} useMqs Array with strings of media queries that should pass (<name> <expression>)\n * @return {Array} Filtered selectors that match the passed media queries\n */\nfunction filterByMqs(selectors, useMqs) {\n    return selectors.filter(function(selector) {\n        if (selector.atrule === null) {\n            return ~useMqs.indexOf('');\n        }\n\n        var mqName = selector.atrule.name;\n        var mqStr = mqName;\n        if (selector.atrule.expression &&\n            selector.atrule.expression.children.first().type === 'MediaQueryList') {\n            var mqExpr = csstree.generate(selector.atrule.expression);\n            mqStr = [mqName, mqExpr].join(' ');\n        }\n\n        return ~useMqs.indexOf(mqStr);\n    });\n}\n\n/**\n * Filter selectors by the pseudo-elements and/or -classes they contain.\n *\n * @param {Array} selectors to filter\n * @param {Array} usePseudos Array with strings of single or sequence of pseudo-elements and/or -classes that should pass\n * @return {Array} Filtered selectors that match the passed pseudo-elements and/or -classes\n */\nfunction filterByPseudos(selectors, usePseudos) {\n    return selectors.filter(function(selector) {\n        var pseudoSelectorsStr = csstree.generate({\n            type: 'Selector',\n            children: new List().fromArray(selector.pseudos.map(function(pseudo) {\n                return pseudo.item.data;\n            }))\n        });\n        return ~usePseudos.indexOf(pseudoSelectorsStr);\n    });\n}\n\n/**\n * Remove pseudo-elements and/or -classes from the selectors for proper matching.\n *\n * @param {Array} selectors to clean\n * @return {Array} Selectors without pseudo-elements and/or -classes\n */\nfunction cleanPseudos(selectors) {\n    selectors.forEach(function(selector) {\n        selector.pseudos.forEach(function(pseudo) {\n            pseudo.list.remove(pseudo.item);\n        });\n    });\n}\n\n\n/**\n * Compares two selector specificities.\n * extracted from https://github.com/keeganstreet/specificity/blob/master/specificity.js#L211\n *\n * @param {Array} aSpecificity Specificity of selector A\n * @param {Array} bSpecificity Specificity of selector B\n * @return {Number} Score of selector specificity A compared to selector specificity B\n */\nfunction compareSpecificity(aSpecificity, bSpecificity) {\n    for (var i = 0; i < 4; i += 1) {\n        if (aSpecificity[i] < bSpecificity[i]) {\n            return -1;\n        } else if (aSpecificity[i] > bSpecificity[i]) {\n            return 1;\n        }\n    }\n\n    return 0;\n}\n\n\n/**\n * Compare two simple selectors.\n *\n * @param {Object} aSimpleSelectorNode Simple selector A\n * @param {Object} bSimpleSelectorNode Simple selector B\n * @return {Number} Score of selector A compared to selector B\n */\nfunction compareSimpleSelectorNode(aSimpleSelectorNode, bSimpleSelectorNode) {\n    var aSpecificity = specificity(aSimpleSelectorNode),\n        bSpecificity = specificity(bSimpleSelectorNode);\n    return compareSpecificity(aSpecificity, bSpecificity);\n}\n\nfunction _bySelectorSpecificity(selectorA, selectorB) {\n    return compareSimpleSelectorNode(selectorA.item.data, selectorB.item.data);\n}\n\n\n/**\n * Sort selectors stably by their specificity.\n *\n * @param {Array} selectors to be sorted\n * @return {Array} Stable sorted selectors\n */\nfunction sortSelectors(selectors) {\n    return stable(selectors, _bySelectorSpecificity);\n}\n\n\n/**\n * Convert a css-tree AST style declaration to CSSStyleDeclaration property.\n *\n * @param {Object} declaration css-tree style declaration\n * @return {Object} CSSStyleDeclaration property\n */\nfunction csstreeToStyleDeclaration(declaration) {\n    var propertyName = declaration.property,\n        propertyValue = csstree.generate(declaration.value),\n        propertyPriority = (declaration.important ? 'important' : '');\n    return {\n        name: propertyName,\n        value: propertyValue,\n        priority: propertyPriority\n    };\n}\n\n\n/**\n * Gets the CSS string of a style element\n *\n * @param {Object} element style element\n * @return {String|Array} CSS string or empty array if no styles are set\n */\nfunction getCssStr(elem) {\n    return elem.content[0].text || elem.content[0].cdata || [];\n}\n\n/**\n * Sets the CSS string of a style element\n *\n * @param {Object} element style element\n * @param {String} CSS string to be set\n * @return {Object} reference to field with CSS\n */\nfunction setCssStr(elem, css) {\n    // in case of cdata field\n    if(elem.content[0].cdata) {\n        elem.content[0].cdata = css;\n        return elem.content[0].cdata;\n    }\n\n    // in case of text field + if nothing was set yet\n    elem.content[0].text  = css;\n    return elem.content[0].text;\n}\n\n\nmodule.exports.flattenToSelectors = flattenToSelectors;\n\nmodule.exports.filterByMqs = filterByMqs;\nmodule.exports.filterByPseudos = filterByPseudos;\nmodule.exports.cleanPseudos = cleanPseudos;\n\nmodule.exports.compareSpecificity = compareSpecificity;\nmodule.exports.compareSimpleSelectorNode = compareSimpleSelectorNode;\n\nmodule.exports.sortSelectors = sortSelectors;\n\nmodule.exports.csstreeToStyleDeclaration = csstreeToStyleDeclaration;\n\nmodule.exports.getCssStr = getCssStr;\nmodule.exports.setCssStr = setCssStr;\n","/*\nThe MIT License (MIT)\n\nCopyright (c) 2016 CoderPuppy\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n*/\nvar _endianness;\nexport function endianness() {\n  if (typeof _endianness === 'undefined') {\n    var a = new ArrayBuffer(2);\n    var b = new Uint8Array(a);\n    var c = new Uint16Array(a);\n    b[0] = 1;\n    b[1] = 2;\n    if (c[0] === 258) {\n      _endianness = 'BE';\n    } else if (c[0] === 513){\n      _endianness = 'LE';\n    } else {\n      throw new Error('unable to figure out endianess');\n    }\n  }\n  return _endianness;\n}\n\nexport function hostname() {\n  if (typeof global.location !== 'undefined') {\n    return global.location.hostname\n  } else return '';\n}\n\nexport function loadavg() {\n  return [];\n}\n\nexport function uptime() {\n  return 0;\n}\n\nexport function freemem() {\n  return Number.MAX_VALUE;\n}\n\nexport function totalmem() {\n  return Number.MAX_VALUE;\n}\n\nexport function cpus() {\n  return [];\n}\n\nexport function type() {\n  return 'Browser';\n}\n\nexport function release () {\n  if (typeof global.navigator !== 'undefined') {\n    return global.navigator.appVersion;\n  }\n  return '';\n}\n\nexport function networkInterfaces(){}\nexport function getNetworkInterfaces(){}\n\nexport function arch() {\n  return 'javascript';\n}\n\nexport function platform() {\n  return 'browser';\n}\n\nexport function tmpDir() {\n  return '/tmp';\n}\nexport var tmpdir = tmpDir;\n\nexport var EOL = '\\n';\nexport default {\n  EOL: EOL,\n  tmpdir: tmpdir,\n  tmpDir: tmpDir,\n  networkInterfaces:networkInterfaces,\n  getNetworkInterfaces: getNetworkInterfaces,\n  release: release,\n  type: type,\n  cpus: cpus,\n  totalmem: totalmem,\n  freemem: freemem,\n  uptime: uptime,\n  loadavg: loadavg,\n  hostname: hostname,\n  endianness: endianness,\n}\n","'use strict';\n\nvar EOL = require('os').EOL,\n    textElem = require('../../plugins/_collections.js').elemsGroups.textContent.concat('title');\n\nvar defaults = {\n    doctypeStart: '<!DOCTYPE',\n    doctypeEnd: '>',\n    procInstStart: '<?',\n    procInstEnd: '?>',\n    tagOpenStart: '<',\n    tagOpenEnd: '>',\n    tagCloseStart: '</',\n    tagCloseEnd: '>',\n    tagShortStart: '<',\n    tagShortEnd: '/>',\n    attrStart: '=\"',\n    attrEnd: '\"',\n    commentStart: '<!--',\n    commentEnd: '-->',\n    cdataStart: '<![CDATA[',\n    cdataEnd: ']]>',\n    textStart: '',\n    textEnd: '',\n    indent: 4,\n    regEntities: /[&'\"<>]/g,\n    regValEntities: /[&\"<>]/g,\n    encodeEntity: encodeEntity,\n    pretty: false,\n    useShortTags: true\n};\n\nvar entities = {\n      '&': '&amp;',\n      '\\'': '&apos;',\n      '\"': '&quot;',\n      '>': '&gt;',\n      '<': '&lt;',\n    };\n\n/**\n * Convert SVG-as-JS object to SVG (XML) string.\n *\n * @param {Object} data input data\n * @param {Object} config config\n *\n * @return {Object} output data\n */\nmodule.exports = function(data, config) {\n\n    return new JS2SVG(config).convert(data);\n\n};\n\nfunction JS2SVG(config) {\n\n    if (config) {\n        this.config = Object.assign({}, defaults, config);\n    } else {\n        this.config = defaults;\n    }\n\n    var indent = this.config.indent;\n    if (typeof indent == 'number' && !isNaN(indent)) {\n        this.config.indent = (indent < 0) ? '\\t' : ' '.repeat(indent);\n    } else if (typeof indent != 'string') {\n        this.config.indent = '    ';\n    }\n\n    if (this.config.pretty) {\n        this.config.doctypeEnd += EOL;\n        this.config.procInstEnd += EOL;\n        this.config.commentEnd += EOL;\n        this.config.cdataEnd += EOL;\n        this.config.tagShortEnd += EOL;\n        this.config.tagOpenEnd += EOL;\n        this.config.tagCloseEnd += EOL;\n        this.config.textEnd += EOL;\n    }\n\n    this.indentLevel = 0;\n    this.textContext = null;\n\n}\n\nfunction encodeEntity(char) {\n    return entities[char];\n}\n\n/**\n * Start conversion.\n *\n * @param {Object} data input data\n *\n * @return {String}\n */\nJS2SVG.prototype.convert = function(data) {\n\n    var svg = '';\n\n    if (data.content) {\n\n        this.indentLevel++;\n\n        data.content.forEach(function(item) {\n\n            if (item.elem) {\n               svg += this.createElem(item);\n            } else if (item.text) {\n               svg += this.createText(item.text);\n            } else if (item.doctype) {\n                svg += this.createDoctype(item.doctype);\n            } else if (item.processinginstruction) {\n                svg += this.createProcInst(item.processinginstruction);\n            } else if (item.comment) {\n                svg += this.createComment(item.comment);\n            } else if (item.cdata) {\n                svg += this.createCDATA(item.cdata);\n            }\n\n        }, this);\n\n    }\n\n    this.indentLevel--;\n\n    return {\n        data: svg,\n        info: {\n            width: this.width,\n            height: this.height\n        }\n    };\n\n};\n\n/**\n * Create indent string in accordance with the current node level.\n *\n * @return {String}\n */\nJS2SVG.prototype.createIndent = function() {\n\n    var indent = '';\n\n    if (this.config.pretty && !this.textContext) {\n        indent = this.config.indent.repeat(this.indentLevel - 1);\n    }\n\n    return indent;\n\n};\n\n/**\n * Create doctype tag.\n *\n * @param {String} doctype doctype body string\n *\n * @return {String}\n */\nJS2SVG.prototype.createDoctype = function(doctype) {\n\n    return  this.config.doctypeStart +\n            doctype +\n            this.config.doctypeEnd;\n\n};\n\n/**\n * Create XML Processing Instruction tag.\n *\n * @param {Object} instruction instruction object\n *\n * @return {String}\n */\nJS2SVG.prototype.createProcInst = function(instruction) {\n\n    return  this.config.procInstStart +\n            instruction.name +\n            ' ' +\n            instruction.body +\n            this.config.procInstEnd;\n\n};\n\n/**\n * Create comment tag.\n *\n * @param {String} comment comment body\n *\n * @return {String}\n */\nJS2SVG.prototype.createComment = function(comment) {\n\n    return  this.config.commentStart +\n            comment +\n            this.config.commentEnd;\n\n};\n\n/**\n * Create CDATA section.\n *\n * @param {String} cdata CDATA body\n *\n * @return {String}\n */\nJS2SVG.prototype.createCDATA = function(cdata) {\n\n    return  this.createIndent() +\n            this.config.cdataStart +\n            cdata +\n            this.config.cdataEnd;\n\n};\n\n/**\n * Create element tag.\n *\n * @param {Object} data element object\n *\n * @return {String}\n */\nJS2SVG.prototype.createElem = function(data) {\n\n    // beautiful injection for obtaining SVG information :)\n    if (\n        data.isElem('svg') &&\n        data.hasAttr('width') &&\n        data.hasAttr('height')\n    ) {\n        this.width = data.attr('width').value;\n        this.height = data.attr('height').value;\n    }\n\n    // empty element and short tag\n    if (data.isEmpty()) {\n        if (this.config.useShortTags) {\n            return this.createIndent() +\n                   this.config.tagShortStart +\n                   data.elem +\n                   this.createAttrs(data) +\n                   this.config.tagShortEnd;\n        } else {\n            return this.createIndent() +\n                   this.config.tagShortStart +\n                   data.elem +\n                   this.createAttrs(data) +\n                   this.config.tagOpenEnd +\n                   this.config.tagCloseStart +\n                   data.elem +\n                   this.config.tagCloseEnd;\n        }\n    // non-empty element\n    } else {\n        var tagOpenStart = this.config.tagOpenStart,\n            tagOpenEnd = this.config.tagOpenEnd,\n            tagCloseStart = this.config.tagCloseStart,\n            tagCloseEnd = this.config.tagCloseEnd,\n            openIndent = this.createIndent(),\n            textIndent = '',\n            processedData = '',\n            dataEnd = '';\n\n        if (this.textContext) {\n            tagOpenStart = defaults.tagOpenStart;\n            tagOpenEnd = defaults.tagOpenEnd;\n            tagCloseStart = defaults.tagCloseStart;\n            tagCloseEnd = defaults.tagCloseEnd;\n            openIndent = '';\n        } else if (data.isElem(textElem)) {\n            if (this.config.pretty) {\n                textIndent += openIndent + this.config.indent;\n            }\n            this.textContext = data;\n        }\n\n        processedData += this.convert(data).data;\n\n        if (this.textContext == data) {\n            this.textContext = null;\n            if (this.config.pretty) dataEnd = EOL;\n        }\n\n        return  openIndent +\n                tagOpenStart +\n                data.elem +\n                this.createAttrs(data) +\n                tagOpenEnd +\n                textIndent +\n                processedData +\n                dataEnd +\n                this.createIndent() +\n                tagCloseStart +\n                data.elem +\n                tagCloseEnd;\n\n    }\n\n};\n\n/**\n * Create element attributes.\n *\n * @param {Object} elem attributes object\n *\n * @return {String}\n */\nJS2SVG.prototype.createAttrs = function(elem) {\n\n    var attrs = '';\n\n    elem.eachAttr(function(attr) {\n\n        if (attr.value !== undefined) {\n            attrs +=    ' ' +\n                        attr.name +\n                        this.config.attrStart +\n                        String(attr.value).replace(this.config.regValEntities, this.config.encodeEntity) +\n                        this.config.attrEnd;\n        }\n        else {\n            attrs +=    ' ' +\n                        attr.name;\n        }\n\n\n    }, this);\n\n    return attrs;\n\n};\n\n/**\n * Create text node.\n *\n * @param {String} text text\n *\n * @return {String}\n */\nJS2SVG.prototype.createText = function(text) {\n\n    return  this.createIndent() +\n            this.config.textStart +\n            text.replace(this.config.regEntities, this.config.encodeEntity) +\n            (this.textContext ? '' : this.config.textEnd);\n\n};\n","'use strict';\n\n/**\n * Plugins engine.\n *\n * @module plugins\n *\n * @param {Object} data input data\n * @param {Object} info extra information\n * @param {Object} plugins plugins object from config\n * @return {Object} output data\n */\nmodule.exports = function(data, info, plugins) {\n\n    plugins.forEach(function(group) {\n\n        switch(group[0].type) {\n            case 'perItem':\n                data = perItem(data, info, group);\n                break;\n            case 'perItemReverse':\n                data = perItem(data, info, group, true);\n                break;\n            case 'full':\n                data = full(data, info, group);\n                break;\n        }\n\n    });\n\n    return data;\n\n};\n\n/**\n * Direct or reverse per-item loop.\n *\n * @param {Object} data input data\n * @param {Object} info extra information\n * @param {Array} plugins plugins list to process\n * @param {Boolean} [reverse] reverse pass?\n * @return {Object} output data\n */\nfunction perItem(data, info, plugins, reverse) {\n\n    function monkeys(items) {\n\n        items.content = items.content.filter(function(item) {\n\n            // reverse pass\n            if (reverse && item.content) {\n                monkeys(item);\n            }\n\n            // main filter\n            var filter = true;\n\n            for (var i = 0; filter && i < plugins.length; i++) {\n                var plugin = plugins[i];\n\n                if (plugin.active && plugin.fn(item, plugin.params, info) === false) {\n                    filter = false;\n                }\n            }\n\n            // direct pass\n            if (!reverse && item.content) {\n                monkeys(item);\n            }\n\n            return filter;\n\n        });\n\n        return items;\n\n    }\n\n    return monkeys(data);\n\n}\n\n/**\n * \"Full\" plugins.\n *\n * @param {Object} data input data\n * @param {Object} info extra information\n * @param {Array} plugins plugins list to process\n * @return {Object} output data\n */\nfunction full(data, info, plugins) {\n\n    plugins.forEach(function(plugin) {\n        if (plugin.active) {\n            data = plugin.fn(data, plugin.params, info);\n        }\n    });\n\n    return data;\n\n}\n","'use strict';\n\nexports.type = 'full';\n\nexports.active = true;\n\nexports.description = 'removes unused IDs and minifies used';\n\nexports.params = {\n    remove: true,\n    minify: true,\n    prefix: '',\n    preserve: [],\n    force: false\n};\n\nvar referencesProps = new Set(require('./_collections').referencesProps),\n    regReferencesUrl = /\\burl\\((\"|')?#(.+?)\\1\\)/,\n    regReferencesHref = /^#(.+?)$/,\n    regReferencesBegin = /(\\w+)\\./,\n    styleOrScript = ['style', 'script'],\n    generateIDchars = [\n        'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'\n    ],\n    maxIDindex = generateIDchars.length - 1;\n\n/**\n * Remove unused and minify used IDs\n * (only if there are no any <style> or <script>).\n *\n * @param {Object} item current iteration item\n * @param {Object} params plugin params\n *\n * @author Kir Belevich\n */\nexports.fn = function(data, params) {\n    var currentID,\n        currentIDstring,\n        IDs = new Map(),\n        referencesIDs = new Map(),\n        hasStyleOrScript = false,\n        preserveIDs = new Set(Array.isArray(params.preserve) ? params.preserve : params.preserve ? [params.preserve] : []),\n        idValuePrefix = '#',\n        idValuePostfix = '.';\n\n    /**\n     * Bananas!\n     *\n     * @param {Array} items input items\n     * @return {Array} output items\n     */\n    function monkeys(items) {\n        for (var i = 0; i < items.content.length && !hasStyleOrScript; i++) {\n            var item = items.content[i];\n\n            // quit if <style> of <script> presents ('force' param prevents quitting)\n            if (!params.force) {\n                if (item.isElem(styleOrScript)) {\n                    hasStyleOrScript = true;\n                    continue;\n                }\n                // Don't remove IDs if the whole SVG consists only of defs.\n                if (item.isElem('defs') && item.parentNode.isElem('svg')) {\n                    var hasDefsOnly = true;\n                    for (var j = i + 1; j < items.content.length; j++) {\n                        if (items.content[j].isElem()) {\n                            hasDefsOnly = false;\n                            break;\n                        }\n                    }\n                    if (hasDefsOnly) {\n                        break;\n                    }\n                }\n            }\n            // …and don't remove any ID if yes\n            if (item.isElem()) {\n                item.eachAttr(function(attr) {\n                    var key, match;\n\n                    // save IDs\n                    if (attr.name === 'id') {\n                        key = attr.value;\n                        if (IDs.has(key)) {\n                            item.removeAttr('id'); // remove repeated id\n                        } else {\n                            IDs.set(key, item);\n                        }\n                        return;\n                    }\n                    // save references\n                    if (referencesProps.has(attr.name) && (match = attr.value.match(regReferencesUrl))) {\n                        key = match[2]; // url() reference\n                    } else if (\n                        attr.local === 'href' && (match = attr.value.match(regReferencesHref)) ||\n                        attr.name === 'begin' && (match = attr.value.match(regReferencesBegin))\n                    ) {\n                        key = match[1]; // href reference\n                    }\n                    if (key) {\n                        var ref = referencesIDs.get(key) || [];\n                        ref.push(attr);\n                        referencesIDs.set(key, ref);\n                    }\n                });\n            }\n            // go deeper\n            if (item.content) {\n                monkeys(item);\n            }\n        }\n        return items;\n    }\n\n    data = monkeys(data);\n\n    if (hasStyleOrScript) {\n        return data;\n    }\n\n    for (var ref of referencesIDs) {\n        var key = ref[0];\n\n        if (IDs.has(key)) {\n            // replace referenced IDs with the minified ones\n            if (params.minify && !preserveIDs.has(key)) {\n                currentIDstring = getIDstring(currentID = generateID(currentID), params);\n                IDs.get(key).attr('id').value = currentIDstring;\n\n                for (var attr of ref[1]) {\n                    attr.value = attr.value.includes(idValuePrefix) ?\n                        attr.value.replace(idValuePrefix + key, idValuePrefix + currentIDstring) :\n                        attr.value.replace(key + idValuePostfix, currentIDstring + idValuePostfix);\n                }\n            }\n            // don't remove referenced IDs\n            IDs.delete(key);\n        }\n    }\n    // remove non-referenced IDs attributes from elements\n    if (params.remove) {\n        for(var keyElem of IDs) {\n            if (!preserveIDs.has(keyElem[0])) {\n                keyElem[1].removeAttr('id');\n            }\n        }\n    }\n    return data;\n};\n\n/**\n * Generate unique minimal ID.\n *\n * @param {Array} [currentID] current ID\n * @return {Array} generated ID array\n */\nfunction generateID(currentID) {\n    if (!currentID) return [0];\n\n    currentID[currentID.length - 1]++;\n\n    for(var i = currentID.length - 1; i > 0; i--) {\n        if (currentID[i] > maxIDindex) {\n            currentID[i] = 0;\n\n            if (currentID[i - 1] !== undefined) {\n                currentID[i - 1]++;\n            }\n        }\n    }\n    if (currentID[0] > maxIDindex) {\n        currentID[0] = 0;\n        currentID.unshift(0);\n    }\n    return currentID;\n}\n\n/**\n * Get string from generated ID array.\n *\n * @param {Array} arr input ID array\n * @return {String} output ID string\n */\nfunction getIDstring(arr, params) {\n    var str = params.prefix;\n    return str + arr.map(i => generateIDchars[i]).join('');\n}\n","\"use strict\";\nimport '../utils/node-globals/global';\nimport svg2js from 'svgo/lib/svgo/svg2js';\nimport js2svg from 'svgo/lib/svgo/js2svg';\nimport JSAPI from 'svgo/lib/svgo/jsAPI';\nimport CSSClassList from 'svgo/lib/svgo/css-class-list';\nimport CSSStyleDeclaration from 'svgo/lib/svgo/css-style-declaration';\nimport plugins from 'svgo/lib/svgo/plugins';\n\nimport removeDoctype from 'svgo/plugins/removeDoctype';\nimport removeXMLProcInst from 'svgo/plugins/removeXMLProcInst';\nimport removeComments from 'svgo/plugins/removeComments';\nimport removeMetadata from 'svgo/plugins/removeMetadata';\nimport removeXMLNS from 'svgo/plugins/removeXMLNS';\nimport cleanupIDs from 'svgo/plugins/cleanupIDs';\nimport removeHiddenElems from 'svgo/plugins/removeHiddenElems'\nimport removeEditorsNSData from 'svgo/plugins/removeEditorsNSData';\nimport removeForeignObject from 'svgo/plugins/removeForeignObject';\nimport removeSwitch from 'svgo/plugins/removeSwitch';\n\n// the order is from https://github.com/svg/svgo/blob/master/.svgo.yml\n// Some are commented out if they have no default action.\nconst pluginsData = {\n  removeDoctype,\n  //removeXMLProcInst,\n  removeComments,\n  removeMetadata,\n  //removeXMLNS,\n  removeEditorsNSData,\n    cleanupIDs,\n    removeHiddenElems,\n    removeForeignObject,\n    removeSwitch\n};\n\n// Clone is currently broken. Hack it:\nfunction cloneParsedSvg(svg) {\n  const clones = new Map();\n\n  function cloneKeys(target, obj) {\n    for (const key of Object.keys(obj)) {\n      target[key] = clone(obj[key]);\n    }\n    return target;\n  }\n\n  function clone(obj) {\n    if (typeof obj !== 'object' || obj === null) {\n      return obj;\n    }\n\n    if (clones.has(obj)) {\n      return clones.get(obj);\n    }\n\n    let objClone;\n\n    if (obj.constructor === JSAPI) {\n      objClone = new JSAPI({}, obj.parentNode);\n      clones.set(obj, objClone);\n\n      if (obj.parentNode) {\n        objClone.parentNode = clone(obj.parentNode);\n      }\n      cloneKeys(objClone, obj);\n    }\n    else if (\n      obj.constructor === CSSClassList ||\n      obj.constructor === CSSStyleDeclaration ||\n      obj.constructor === Object ||\n      obj.constructor === Array\n    ) {\n      objClone = new obj.constructor();\n      clones.set(obj, objClone);\n      cloneKeys(objClone, obj);\n    }\n    else if (obj.constructor === Map) {\n      objClone = new Map();\n      clones.set(obj, objClone);\n\n      for (const [key, val] of obj) {\n        objClone.set(clone(key), clone(val));\n      }\n    }\n    else if (obj.constructor === Set) {\n      objClone = new Set();\n      clones.set(obj, objClone);\n\n      for (const val of obj) {\n        objClone.add(clone(val));\n      }\n    }\n    else {\n      throw Error('unexpected type');\n    }\n\n    return objClone;\n  }\n\n  return clone(svg);\n}\n\n// Arrange plugins by type - this is what plugins() expects\nfunction optimizePluginsArray(plugins) {\n  return plugins.map(item => [item]).reduce((arr, item) => {\n    const last = arr[arr.length - 1];\n\n    if (last && item[0].type === last[0].type) {\n      last.push(item[0]);\n    }\n    else {\n      arr.push(item);\n    }\n    return arr;\n  }, []);\n}\n\nconst optimisedPluginsData = optimizePluginsArray(Object.values(pluginsData));\n\nfunction getDimensions(parsedSvg) {\n  const svgEl = parsedSvg.content.filter(el => el.isElem('svg'))[0];\n\n  if (!svgEl) {\n    return {};\n  }\n\n  if (svgEl.hasAttr('width') && svgEl.hasAttr('height')) {\n    return {\n      width: parseFloat(svgEl.attr('width').value),\n      height: parseFloat(svgEl.attr('height').value)\n    };\n  }\n\n  if (svgEl.hasAttr('viewBox')) {\n    const viewBox = svgEl.attr('viewBox').value.split(/(?:,\\s*|\\s+)/);\n\n    return {\n      width: parseFloat(viewBox[2]),\n      height: parseFloat(viewBox[3])\n    };\n  }\n\n  return {};\n}\n\nfunction* multipassCompress(settings) {\n  // activate/deactivate plugins\n  Object.keys(settings.plugins).forEach(pluginName => {\n    pluginsData[pluginName].active = settings.plugins[pluginName];\n  });\n\n /* // Set floatPrecision across all the plugins\n  const floatPrecision = Number(settings.floatPrecision);\n\n  for (const plugin of Object.values(pluginsData)) {\n    if (plugin.params && 'floatPrecision' in plugin.params) {\n      plugin.params.floatPrecision = floatPrecision;\n    }\n  }\n*/\n  const svg = cloneParsedSvg(parsedSvg);\n  let svgData;\n  let previousDataLength;\n\n  while (svgData === undefined || svgData.length != previousDataLength) {\n    previousDataLength = svgData && svgData.length;\n    plugins(svg, {input: 'string'}, optimisedPluginsData);\n    svgData = js2svg(svg, {\n      indent: '  ',\n      pretty: settings.pretty\n    }).data;\n\n    yield {\n      data: svgData,\n      dimensions: getDimensions(svg)\n    };\n  }\n}\n\nlet parsedSvg;\nlet multipassInstance;\n\nconst actions = {\n  load({ data }) {\n    svg2js(data, p => parsedSvg = p);\n\n    if (parsedSvg.error) throw Error(parsedSvg.error);\n\n    return getDimensions(parsedSvg);\n  },\n  process({ settings }) {\n    multipassInstance = multipassCompress(settings);\n    return multipassInstance.next().value;\n  },\n  nextPass() {\n    return multipassInstance.next().value;\n  }\n};\n\nself.onmessage = event => {\n  try {\n    self.postMessage({\n      id: event.data.id,\n      result: actions[event.data.action](event.data)\n    });\n  }\n  catch (e) {\n    self.postMessage({\n      id: event.data.id,\n      error: e.message\n    });\n  }\n};\n","module.exports = Number.isNaN || function isNaN(a) {\n\treturn a !== a;\n};\n",";(function (sax) { // wrapper for non-node envs\n  sax.parser = function (strict, opt) { return new SAXParser(strict, opt) }\n  sax.SAXParser = SAXParser\n  sax.SAXStream = SAXStream\n  sax.createStream = createStream\n\n  // When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.\n  // When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),\n  // since that's the earliest that a buffer overrun could occur.  This way, checks are\n  // as rare as required, but as often as necessary to ensure never crossing this bound.\n  // Furthermore, buffers are only tested at most once per write(), so passing a very\n  // large string into write() might have undesirable effects, but this is manageable by\n  // the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme\n  // edge case, result in creating at most one complete copy of the string passed in.\n  // Set to Infinity to have unlimited buffers.\n  sax.MAX_BUFFER_LENGTH = 64 * 1024\n\n  var buffers = [\n    'comment', 'sgmlDecl', 'textNode', 'tagName', 'doctype',\n    'procInstName', 'procInstBody', 'entity', 'attribName',\n    'attribValue', 'cdata', 'script'\n  ]\n\n  sax.EVENTS = [\n    'text',\n    'processinginstruction',\n    'sgmldeclaration',\n    'doctype',\n    'comment',\n    'opentagstart',\n    'attribute',\n    'opentag',\n    'closetag',\n    'opencdata',\n    'cdata',\n    'closecdata',\n    'error',\n    'end',\n    'ready',\n    'script',\n    'opennamespace',\n    'closenamespace'\n  ]\n\n  function SAXParser (strict, opt) {\n    if (!(this instanceof SAXParser)) {\n      return new SAXParser(strict, opt)\n    }\n\n    var parser = this\n    clearBuffers(parser)\n    parser.q = parser.c = ''\n    parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH\n    parser.opt = opt || {}\n    parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags\n    parser.looseCase = parser.opt.lowercase ? 'toLowerCase' : 'toUpperCase'\n    parser.tags = []\n    parser.closed = parser.closedRoot = parser.sawRoot = false\n    parser.tag = parser.error = null\n    parser.strict = !!strict\n    parser.noscript = !!(strict || parser.opt.noscript)\n    parser.state = S.BEGIN\n    parser.strictEntities = parser.opt.strictEntities\n    parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES)\n    parser.attribList = []\n\n    // namespaces form a prototype chain.\n    // it always points at the current tag,\n    // which protos to its parent tag.\n    if (parser.opt.xmlns) {\n      parser.ns = Object.create(rootNS)\n    }\n\n    // mostly just for error reporting\n    parser.trackPosition = parser.opt.position !== false\n    if (parser.trackPosition) {\n      parser.position = parser.line = parser.column = 0\n    }\n    emit(parser, 'onready')\n  }\n\n  if (!Object.create) {\n    Object.create = function (o) {\n      function F () {}\n      F.prototype = o\n      var newf = new F()\n      return newf\n    }\n  }\n\n  if (!Object.keys) {\n    Object.keys = function (o) {\n      var a = []\n      for (var i in o) if (o.hasOwnProperty(i)) a.push(i)\n      return a\n    }\n  }\n\n  function checkBufferLength (parser) {\n    var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10)\n    var maxActual = 0\n    for (var i = 0, l = buffers.length; i < l; i++) {\n      var len = parser[buffers[i]].length\n      if (len > maxAllowed) {\n        // Text/cdata nodes can get big, and since they're buffered,\n        // we can get here under normal conditions.\n        // Avoid issues by emitting the text node now,\n        // so at least it won't get any bigger.\n        switch (buffers[i]) {\n          case 'textNode':\n            closeText(parser)\n            break\n\n          case 'cdata':\n            emitNode(parser, 'oncdata', parser.cdata)\n            parser.cdata = ''\n            break\n\n          case 'script':\n            emitNode(parser, 'onscript', parser.script)\n            parser.script = ''\n            break\n\n          default:\n            error(parser, 'Max buffer length exceeded: ' + buffers[i])\n        }\n      }\n      maxActual = Math.max(maxActual, len)\n    }\n    // schedule the next check for the earliest possible buffer overrun.\n    var m = sax.MAX_BUFFER_LENGTH - maxActual\n    parser.bufferCheckPosition = m + parser.position\n  }\n\n  function clearBuffers (parser) {\n    for (var i = 0, l = buffers.length; i < l; i++) {\n      parser[buffers[i]] = ''\n    }\n  }\n\n  function flushBuffers (parser) {\n    closeText(parser)\n    if (parser.cdata !== '') {\n      emitNode(parser, 'oncdata', parser.cdata)\n      parser.cdata = ''\n    }\n    if (parser.script !== '') {\n      emitNode(parser, 'onscript', parser.script)\n      parser.script = ''\n    }\n  }\n\n  SAXParser.prototype = {\n    end: function () { end(this) },\n    write: write,\n    resume: function () { this.error = null; return this },\n    close: function () { return this.write(null) },\n    flush: function () { flushBuffers(this) }\n  }\n\n  var Stream\n  try {\n    Stream = require('stream').Stream\n  } catch (ex) {\n    Stream = function () {}\n  }\n\n  var streamWraps = sax.EVENTS.filter(function (ev) {\n    return ev !== 'error' && ev !== 'end'\n  })\n\n  function createStream (strict, opt) {\n    return new SAXStream(strict, opt)\n  }\n\n  function SAXStream (strict, opt) {\n    if (!(this instanceof SAXStream)) {\n      return new SAXStream(strict, opt)\n    }\n\n    Stream.apply(this)\n\n    this._parser = new SAXParser(strict, opt)\n    this.writable = true\n    this.readable = true\n\n    var me = this\n\n    this._parser.onend = function () {\n      me.emit('end')\n    }\n\n    this._parser.onerror = function (er) {\n      me.emit('error', er)\n\n      // if didn't throw, then means error was handled.\n      // go ahead and clear error, so we can write again.\n      me._parser.error = null\n    }\n\n    this._decoder = null\n\n    streamWraps.forEach(function (ev) {\n      Object.defineProperty(me, 'on' + ev, {\n        get: function () {\n          return me._parser['on' + ev]\n        },\n        set: function (h) {\n          if (!h) {\n            me.removeAllListeners(ev)\n            me._parser['on' + ev] = h\n            return h\n          }\n          me.on(ev, h)\n        },\n        enumerable: true,\n        configurable: false\n      })\n    })\n  }\n\n  SAXStream.prototype = Object.create(Stream.prototype, {\n    constructor: {\n      value: SAXStream\n    }\n  })\n\n  SAXStream.prototype.write = function (data) {\n    if (typeof Buffer === 'function' &&\n      typeof Buffer.isBuffer === 'function' &&\n      Buffer.isBuffer(data)) {\n      if (!this._decoder) {\n        var SD = require('string_decoder').StringDecoder\n        this._decoder = new SD('utf8')\n      }\n      data = this._decoder.write(data)\n    }\n\n    this._parser.write(data.toString())\n    this.emit('data', data)\n    return true\n  }\n\n  SAXStream.prototype.end = function (chunk) {\n    if (chunk && chunk.length) {\n      this.write(chunk)\n    }\n    this._parser.end()\n    return true\n  }\n\n  SAXStream.prototype.on = function (ev, handler) {\n    var me = this\n    if (!me._parser['on' + ev] && streamWraps.indexOf(ev) !== -1) {\n      me._parser['on' + ev] = function () {\n        var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments)\n        args.splice(0, 0, ev)\n        me.emit.apply(me, args)\n      }\n    }\n\n    return Stream.prototype.on.call(me, ev, handler)\n  }\n\n  // this really needs to be replaced with character classes.\n  // XML allows all manner of ridiculous numbers and digits.\n  var CDATA = '[CDATA['\n  var DOCTYPE = 'DOCTYPE'\n  var XML_NAMESPACE = 'http://www.w3.org/XML/1998/namespace'\n  var XMLNS_NAMESPACE = 'http://www.w3.org/2000/xmlns/'\n  var rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE }\n\n  // http://www.w3.org/TR/REC-xml/#NT-NameStartChar\n  // This implementation works on strings, a single character at a time\n  // as such, it cannot ever support astral-plane characters (10000-EFFFF)\n  // without a significant breaking change to either this  parser, or the\n  // JavaScript language.  Implementation of an emoji-capable xml parser\n  // is left as an exercise for the reader.\n  var nameStart = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/\n\n  var nameBody = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/\n\n  var entityStart = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/\n  var entityBody = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/\n\n  function isWhitespace (c) {\n    return c === ' ' || c === '\\n' || c === '\\r' || c === '\\t'\n  }\n\n  function isQuote (c) {\n    return c === '\"' || c === '\\''\n  }\n\n  function isAttribEnd (c) {\n    return c === '>' || isWhitespace(c)\n  }\n\n  function isMatch (regex, c) {\n    return regex.test(c)\n  }\n\n  function notMatch (regex, c) {\n    return !isMatch(regex, c)\n  }\n\n  var S = 0\n  sax.STATE = {\n    BEGIN: S++, // leading byte order mark or whitespace\n    BEGIN_WHITESPACE: S++, // leading whitespace\n    TEXT: S++, // general stuff\n    TEXT_ENTITY: S++, // &amp and such.\n    OPEN_WAKA: S++, // <\n    SGML_DECL: S++, // <!BLARG\n    SGML_DECL_QUOTED: S++, // <!BLARG foo \"bar\n    DOCTYPE: S++, // <!DOCTYPE\n    DOCTYPE_QUOTED: S++, // <!DOCTYPE \"//blah\n    DOCTYPE_DTD: S++, // <!DOCTYPE \"//blah\" [ ...\n    DOCTYPE_DTD_QUOTED: S++, // <!DOCTYPE \"//blah\" [ \"foo\n    COMMENT_STARTING: S++, // <!-\n    COMMENT: S++, // <!--\n    COMMENT_ENDING: S++, // <!-- blah -\n    COMMENT_ENDED: S++, // <!-- blah --\n    CDATA: S++, // <![CDATA[ something\n    CDATA_ENDING: S++, // ]\n    CDATA_ENDING_2: S++, // ]]\n    PROC_INST: S++, // <?hi\n    PROC_INST_BODY: S++, // <?hi there\n    PROC_INST_ENDING: S++, // <?hi \"there\" ?\n    OPEN_TAG: S++, // <strong\n    OPEN_TAG_SLASH: S++, // <strong /\n    ATTRIB: S++, // <a\n    ATTRIB_NAME: S++, // <a foo\n    ATTRIB_NAME_SAW_WHITE: S++, // <a foo _\n    ATTRIB_VALUE: S++, // <a foo=\n    ATTRIB_VALUE_QUOTED: S++, // <a foo=\"bar\n    ATTRIB_VALUE_CLOSED: S++, // <a foo=\"bar\"\n    ATTRIB_VALUE_UNQUOTED: S++, // <a foo=bar\n    ATTRIB_VALUE_ENTITY_Q: S++, // <foo bar=\"&quot;\"\n    ATTRIB_VALUE_ENTITY_U: S++, // <foo bar=&quot\n    CLOSE_TAG: S++, // </a\n    CLOSE_TAG_SAW_WHITE: S++, // </a   >\n    SCRIPT: S++, // <script> ...\n    SCRIPT_ENDING: S++ // <script> ... <\n  }\n\n  sax.XML_ENTITIES = {\n    'amp': '&',\n    'gt': '>',\n    'lt': '<',\n    'quot': '\"',\n    'apos': \"'\"\n  }\n\n  sax.ENTITIES = {\n    'amp': '&',\n    'gt': '>',\n    'lt': '<',\n    'quot': '\"',\n    'apos': \"'\",\n    'AElig': 198,\n    'Aacute': 193,\n    'Acirc': 194,\n    'Agrave': 192,\n    'Aring': 197,\n    'Atilde': 195,\n    'Auml': 196,\n    'Ccedil': 199,\n    'ETH': 208,\n    'Eacute': 201,\n    'Ecirc': 202,\n    'Egrave': 200,\n    'Euml': 203,\n    'Iacute': 205,\n    'Icirc': 206,\n    'Igrave': 204,\n    'Iuml': 207,\n    'Ntilde': 209,\n    'Oacute': 211,\n    'Ocirc': 212,\n    'Ograve': 210,\n    'Oslash': 216,\n    'Otilde': 213,\n    'Ouml': 214,\n    'THORN': 222,\n    'Uacute': 218,\n    'Ucirc': 219,\n    'Ugrave': 217,\n    'Uuml': 220,\n    'Yacute': 221,\n    'aacute': 225,\n    'acirc': 226,\n    'aelig': 230,\n    'agrave': 224,\n    'aring': 229,\n    'atilde': 227,\n    'auml': 228,\n    'ccedil': 231,\n    'eacute': 233,\n    'ecirc': 234,\n    'egrave': 232,\n    'eth': 240,\n    'euml': 235,\n    'iacute': 237,\n    'icirc': 238,\n    'igrave': 236,\n    'iuml': 239,\n    'ntilde': 241,\n    'oacute': 243,\n    'ocirc': 244,\n    'ograve': 242,\n    'oslash': 248,\n    'otilde': 245,\n    'ouml': 246,\n    'szlig': 223,\n    'thorn': 254,\n    'uacute': 250,\n    'ucirc': 251,\n    'ugrave': 249,\n    'uuml': 252,\n    'yacute': 253,\n    'yuml': 255,\n    'copy': 169,\n    'reg': 174,\n    'nbsp': 160,\n    'iexcl': 161,\n    'cent': 162,\n    'pound': 163,\n    'curren': 164,\n    'yen': 165,\n    'brvbar': 166,\n    'sect': 167,\n    'uml': 168,\n    'ordf': 170,\n    'laquo': 171,\n    'not': 172,\n    'shy': 173,\n    'macr': 175,\n    'deg': 176,\n    'plusmn': 177,\n    'sup1': 185,\n    'sup2': 178,\n    'sup3': 179,\n    'acute': 180,\n    'micro': 181,\n    'para': 182,\n    'middot': 183,\n    'cedil': 184,\n    'ordm': 186,\n    'raquo': 187,\n    'frac14': 188,\n    'frac12': 189,\n    'frac34': 190,\n    'iquest': 191,\n    'times': 215,\n    'divide': 247,\n    'OElig': 338,\n    'oelig': 339,\n    'Scaron': 352,\n    'scaron': 353,\n    'Yuml': 376,\n    'fnof': 402,\n    'circ': 710,\n    'tilde': 732,\n    'Alpha': 913,\n    'Beta': 914,\n    'Gamma': 915,\n    'Delta': 916,\n    'Epsilon': 917,\n    'Zeta': 918,\n    'Eta': 919,\n    'Theta': 920,\n    'Iota': 921,\n    'Kappa': 922,\n    'Lambda': 923,\n    'Mu': 924,\n    'Nu': 925,\n    'Xi': 926,\n    'Omicron': 927,\n    'Pi': 928,\n    'Rho': 929,\n    'Sigma': 931,\n    'Tau': 932,\n    'Upsilon': 933,\n    'Phi': 934,\n    'Chi': 935,\n    'Psi': 936,\n    'Omega': 937,\n    'alpha': 945,\n    'beta': 946,\n    'gamma': 947,\n    'delta': 948,\n    'epsilon': 949,\n    'zeta': 950,\n    'eta': 951,\n    'theta': 952,\n    'iota': 953,\n    'kappa': 954,\n    'lambda': 955,\n    'mu': 956,\n    'nu': 957,\n    'xi': 958,\n    'omicron': 959,\n    'pi': 960,\n    'rho': 961,\n    'sigmaf': 962,\n    'sigma': 963,\n    'tau': 964,\n    'upsilon': 965,\n    'phi': 966,\n    'chi': 967,\n    'psi': 968,\n    'omega': 969,\n    'thetasym': 977,\n    'upsih': 978,\n    'piv': 982,\n    'ensp': 8194,\n    'emsp': 8195,\n    'thinsp': 8201,\n    'zwnj': 8204,\n    'zwj': 8205,\n    'lrm': 8206,\n    'rlm': 8207,\n    'ndash': 8211,\n    'mdash': 8212,\n    'lsquo': 8216,\n    'rsquo': 8217,\n    'sbquo': 8218,\n    'ldquo': 8220,\n    'rdquo': 8221,\n    'bdquo': 8222,\n    'dagger': 8224,\n    'Dagger': 8225,\n    'bull': 8226,\n    'hellip': 8230,\n    'permil': 8240,\n    'prime': 8242,\n    'Prime': 8243,\n    'lsaquo': 8249,\n    'rsaquo': 8250,\n    'oline': 8254,\n    'frasl': 8260,\n    'euro': 8364,\n    'image': 8465,\n    'weierp': 8472,\n    'real': 8476,\n    'trade': 8482,\n    'alefsym': 8501,\n    'larr': 8592,\n    'uarr': 8593,\n    'rarr': 8594,\n    'darr': 8595,\n    'harr': 8596,\n    'crarr': 8629,\n    'lArr': 8656,\n    'uArr': 8657,\n    'rArr': 8658,\n    'dArr': 8659,\n    'hArr': 8660,\n    'forall': 8704,\n    'part': 8706,\n    'exist': 8707,\n    'empty': 8709,\n    'nabla': 8711,\n    'isin': 8712,\n    'notin': 8713,\n    'ni': 8715,\n    'prod': 8719,\n    'sum': 8721,\n    'minus': 8722,\n    'lowast': 8727,\n    'radic': 8730,\n    'prop': 8733,\n    'infin': 8734,\n    'ang': 8736,\n    'and': 8743,\n    'or': 8744,\n    'cap': 8745,\n    'cup': 8746,\n    'int': 8747,\n    'there4': 8756,\n    'sim': 8764,\n    'cong': 8773,\n    'asymp': 8776,\n    'ne': 8800,\n    'equiv': 8801,\n    'le': 8804,\n    'ge': 8805,\n    'sub': 8834,\n    'sup': 8835,\n    'nsub': 8836,\n    'sube': 8838,\n    'supe': 8839,\n    'oplus': 8853,\n    'otimes': 8855,\n    'perp': 8869,\n    'sdot': 8901,\n    'lceil': 8968,\n    'rceil': 8969,\n    'lfloor': 8970,\n    'rfloor': 8971,\n    'lang': 9001,\n    'rang': 9002,\n    'loz': 9674,\n    'spades': 9824,\n    'clubs': 9827,\n    'hearts': 9829,\n    'diams': 9830\n  }\n\n  Object.keys(sax.ENTITIES).forEach(function (key) {\n    var e = sax.ENTITIES[key]\n    var s = typeof e === 'number' ? String.fromCharCode(e) : e\n    sax.ENTITIES[key] = s\n  })\n\n  for (var s in sax.STATE) {\n    sax.STATE[sax.STATE[s]] = s\n  }\n\n  // shorthand\n  S = sax.STATE\n\n  function emit (parser, event, data) {\n    parser[event] && parser[event](data)\n  }\n\n  function emitNode (parser, nodeType, data) {\n    if (parser.textNode) closeText(parser)\n    emit(parser, nodeType, data)\n  }\n\n  function closeText (parser) {\n    parser.textNode = textopts(parser.opt, parser.textNode)\n    if (parser.textNode) emit(parser, 'ontext', parser.textNode)\n    parser.textNode = ''\n  }\n\n  function textopts (opt, text) {\n    if (opt.trim) text = text.trim()\n    if (opt.normalize) text = text.replace(/\\s+/g, ' ')\n    return text\n  }\n\n  function error (parser, er) {\n    closeText(parser)\n    if (parser.trackPosition) {\n      er += '\\nLine: ' + parser.line +\n        '\\nColumn: ' + parser.column +\n        '\\nChar: ' + parser.c\n    }\n    er = new Error(er)\n    parser.error = er\n    emit(parser, 'onerror', er)\n    return parser\n  }\n\n  function end (parser) {\n    if (parser.sawRoot && !parser.closedRoot) strictFail(parser, 'Unclosed root tag')\n    if ((parser.state !== S.BEGIN) &&\n      (parser.state !== S.BEGIN_WHITESPACE) &&\n      (parser.state !== S.TEXT)) {\n      error(parser, 'Unexpected end')\n    }\n    closeText(parser)\n    parser.c = ''\n    parser.closed = true\n    emit(parser, 'onend')\n    SAXParser.call(parser, parser.strict, parser.opt)\n    return parser\n  }\n\n  function strictFail (parser, message) {\n    if (typeof parser !== 'object' || !(parser instanceof SAXParser)) {\n      throw new Error('bad call to strictFail')\n    }\n    if (parser.strict) {\n      error(parser, message)\n    }\n  }\n\n  function newTag (parser) {\n    if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]()\n    var parent = parser.tags[parser.tags.length - 1] || parser\n    var tag = parser.tag = { name: parser.tagName, attributes: {} }\n\n    // will be overridden if tag contails an xmlns=\"foo\" or xmlns:foo=\"bar\"\n    if (parser.opt.xmlns) {\n      tag.ns = parent.ns\n    }\n    parser.attribList.length = 0\n    emitNode(parser, 'onopentagstart', tag)\n  }\n\n  function qname (name, attribute) {\n    var i = name.indexOf(':')\n    var qualName = i < 0 ? [ '', name ] : name.split(':')\n    var prefix = qualName[0]\n    var local = qualName[1]\n\n    // <x \"xmlns\"=\"http://foo\">\n    if (attribute && name === 'xmlns') {\n      prefix = 'xmlns'\n      local = ''\n    }\n\n    return { prefix: prefix, local: local }\n  }\n\n  function attrib (parser) {\n    if (!parser.strict) {\n      parser.attribName = parser.attribName[parser.looseCase]()\n    }\n\n    if (parser.attribList.indexOf(parser.attribName) !== -1 ||\n      parser.tag.attributes.hasOwnProperty(parser.attribName)) {\n      parser.attribName = parser.attribValue = ''\n      return\n    }\n\n    if (parser.opt.xmlns) {\n      var qn = qname(parser.attribName, true)\n      var prefix = qn.prefix\n      var local = qn.local\n\n      if (prefix === 'xmlns') {\n        // namespace binding attribute. push the binding into scope\n        if (local === 'xml' && parser.attribValue !== XML_NAMESPACE) {\n          strictFail(parser,\n            'xml: prefix must be bound to ' + XML_NAMESPACE + '\\n' +\n            'Actual: ' + parser.attribValue)\n        } else if (local === 'xmlns' && parser.attribValue !== XMLNS_NAMESPACE) {\n          strictFail(parser,\n            'xmlns: prefix must be bound to ' + XMLNS_NAMESPACE + '\\n' +\n            'Actual: ' + parser.attribValue)\n        } else {\n          var tag = parser.tag\n          var parent = parser.tags[parser.tags.length - 1] || parser\n          if (tag.ns === parent.ns) {\n            tag.ns = Object.create(parent.ns)\n          }\n          tag.ns[local] = parser.attribValue\n        }\n      }\n\n      // defer onattribute events until all attributes have been seen\n      // so any new bindings can take effect. preserve attribute order\n      // so deferred events can be emitted in document order\n      parser.attribList.push([parser.attribName, parser.attribValue])\n    } else {\n      // in non-xmlns mode, we can emit the event right away\n      parser.tag.attributes[parser.attribName] = parser.attribValue\n      emitNode(parser, 'onattribute', {\n        name: parser.attribName,\n        value: parser.attribValue\n      })\n    }\n\n    parser.attribName = parser.attribValue = ''\n  }\n\n  function openTag (parser, selfClosing) {\n    if (parser.opt.xmlns) {\n      // emit namespace binding events\n      var tag = parser.tag\n\n      // add namespace info to tag\n      var qn = qname(parser.tagName)\n      tag.prefix = qn.prefix\n      tag.local = qn.local\n      tag.uri = tag.ns[qn.prefix] || ''\n\n      if (tag.prefix && !tag.uri) {\n        strictFail(parser, 'Unbound namespace prefix: ' +\n          JSON.stringify(parser.tagName))\n        tag.uri = qn.prefix\n      }\n\n      var parent = parser.tags[parser.tags.length - 1] || parser\n      if (tag.ns && parent.ns !== tag.ns) {\n        Object.keys(tag.ns).forEach(function (p) {\n          emitNode(parser, 'onopennamespace', {\n            prefix: p,\n            uri: tag.ns[p]\n          })\n        })\n      }\n\n      // handle deferred onattribute events\n      // Note: do not apply default ns to attributes:\n      //   http://www.w3.org/TR/REC-xml-names/#defaulting\n      for (var i = 0, l = parser.attribList.length; i < l; i++) {\n        var nv = parser.attribList[i]\n        var name = nv[0]\n        var value = nv[1]\n        var qualName = qname(name, true)\n        var prefix = qualName.prefix\n        var local = qualName.local\n        var uri = prefix === '' ? '' : (tag.ns[prefix] || '')\n        var a = {\n          name: name,\n          value: value,\n          prefix: prefix,\n          local: local,\n          uri: uri\n        }\n\n        // if there's any attributes with an undefined namespace,\n        // then fail on them now.\n        if (prefix && prefix !== 'xmlns' && !uri) {\n          strictFail(parser, 'Unbound namespace prefix: ' +\n            JSON.stringify(prefix))\n          a.uri = prefix\n        }\n        parser.tag.attributes[name] = a\n        emitNode(parser, 'onattribute', a)\n      }\n      parser.attribList.length = 0\n    }\n\n    parser.tag.isSelfClosing = !!selfClosing\n\n    // process the tag\n    parser.sawRoot = true\n    parser.tags.push(parser.tag)\n    emitNode(parser, 'onopentag', parser.tag)\n    if (!selfClosing) {\n      // special case for <script> in non-strict mode.\n      if (!parser.noscript && parser.tagName.toLowerCase() === 'script') {\n        parser.state = S.SCRIPT\n      } else {\n        parser.state = S.TEXT\n      }\n      parser.tag = null\n      parser.tagName = ''\n    }\n    parser.attribName = parser.attribValue = ''\n    parser.attribList.length = 0\n  }\n\n  function closeTag (parser) {\n    if (!parser.tagName) {\n      strictFail(parser, 'Weird empty close tag.')\n      parser.textNode += '</>'\n      parser.state = S.TEXT\n      return\n    }\n\n    if (parser.script) {\n      if (parser.tagName !== 'script') {\n        parser.script += '</' + parser.tagName + '>'\n        parser.tagName = ''\n        parser.state = S.SCRIPT\n        return\n      }\n      emitNode(parser, 'onscript', parser.script)\n      parser.script = ''\n    }\n\n    // first make sure that the closing tag actually exists.\n    // <a><b></c></b></a> will close everything, otherwise.\n    var t = parser.tags.length\n    var tagName = parser.tagName\n    if (!parser.strict) {\n      tagName = tagName[parser.looseCase]()\n    }\n    var closeTo = tagName\n    while (t--) {\n      var close = parser.tags[t]\n      if (close.name !== closeTo) {\n        // fail the first time in strict mode\n        strictFail(parser, 'Unexpected close tag')\n      } else {\n        break\n      }\n    }\n\n    // didn't find it.  we already failed for strict, so just abort.\n    if (t < 0) {\n      strictFail(parser, 'Unmatched closing tag: ' + parser.tagName)\n      parser.textNode += '</' + parser.tagName + '>'\n      parser.state = S.TEXT\n      return\n    }\n    parser.tagName = tagName\n    var s = parser.tags.length\n    while (s-- > t) {\n      var tag = parser.tag = parser.tags.pop()\n      parser.tagName = parser.tag.name\n      emitNode(parser, 'onclosetag', parser.tagName)\n\n      var x = {}\n      for (var i in tag.ns) {\n        x[i] = tag.ns[i]\n      }\n\n      var parent = parser.tags[parser.tags.length - 1] || parser\n      if (parser.opt.xmlns && tag.ns !== parent.ns) {\n        // remove namespace bindings introduced by tag\n        Object.keys(tag.ns).forEach(function (p) {\n          var n = tag.ns[p]\n          emitNode(parser, 'onclosenamespace', { prefix: p, uri: n })\n        })\n      }\n    }\n    if (t === 0) parser.closedRoot = true\n    parser.tagName = parser.attribValue = parser.attribName = ''\n    parser.attribList.length = 0\n    parser.state = S.TEXT\n  }\n\n  function parseEntity (parser) {\n    var entity = parser.entity\n    var entityLC = entity.toLowerCase()\n    var num\n    var numStr = ''\n\n    if (parser.ENTITIES[entity]) {\n      return parser.ENTITIES[entity]\n    }\n    if (parser.ENTITIES[entityLC]) {\n      return parser.ENTITIES[entityLC]\n    }\n    entity = entityLC\n    if (entity.charAt(0) === '#') {\n      if (entity.charAt(1) === 'x') {\n        entity = entity.slice(2)\n        num = parseInt(entity, 16)\n        numStr = num.toString(16)\n      } else {\n        entity = entity.slice(1)\n        num = parseInt(entity, 10)\n        numStr = num.toString(10)\n      }\n    }\n    entity = entity.replace(/^0+/, '')\n    if (isNaN(num) || numStr.toLowerCase() !== entity) {\n      strictFail(parser, 'Invalid character entity')\n      return '&' + parser.entity + ';'\n    }\n\n    return String.fromCodePoint(num)\n  }\n\n  function beginWhiteSpace (parser, c) {\n    if (c === '<') {\n      parser.state = S.OPEN_WAKA\n      parser.startTagPosition = parser.position\n    } else if (!isWhitespace(c)) {\n      // have to process this as a text node.\n      // weird, but happens.\n      strictFail(parser, 'Non-whitespace before first tag.')\n      parser.textNode = c\n      parser.state = S.TEXT\n    }\n  }\n\n  function charAt (chunk, i) {\n    var result = ''\n    if (i < chunk.length) {\n      result = chunk.charAt(i)\n    }\n    return result\n  }\n\n  function write (chunk) {\n    var parser = this\n    if (this.error) {\n      throw this.error\n    }\n    if (parser.closed) {\n      return error(parser,\n        'Cannot write after close. Assign an onready handler.')\n    }\n    if (chunk === null) {\n      return end(parser)\n    }\n    if (typeof chunk === 'object') {\n      chunk = chunk.toString()\n    }\n    var i = 0\n    var c = ''\n    while (true) {\n      c = charAt(chunk, i++)\n      parser.c = c\n\n      if (!c) {\n        break\n      }\n\n      if (parser.trackPosition) {\n        parser.position++\n        if (c === '\\n') {\n          parser.line++\n          parser.column = 0\n        } else {\n          parser.column++\n        }\n      }\n\n      switch (parser.state) {\n        case S.BEGIN:\n          parser.state = S.BEGIN_WHITESPACE\n          if (c === '\\uFEFF') {\n            continue\n          }\n          beginWhiteSpace(parser, c)\n          continue\n\n        case S.BEGIN_WHITESPACE:\n          beginWhiteSpace(parser, c)\n          continue\n\n        case S.TEXT:\n          if (parser.sawRoot && !parser.closedRoot) {\n            var starti = i - 1\n            while (c && c !== '<' && c !== '&') {\n              c = charAt(chunk, i++)\n              if (c && parser.trackPosition) {\n                parser.position++\n                if (c === '\\n') {\n                  parser.line++\n                  parser.column = 0\n                } else {\n                  parser.column++\n                }\n              }\n            }\n            parser.textNode += chunk.substring(starti, i - 1)\n          }\n          if (c === '<' && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {\n            parser.state = S.OPEN_WAKA\n            parser.startTagPosition = parser.position\n          } else {\n            if (!isWhitespace(c) && (!parser.sawRoot || parser.closedRoot)) {\n              strictFail(parser, 'Text data outside of root node.')\n            }\n            if (c === '&') {\n              parser.state = S.TEXT_ENTITY\n            } else {\n              parser.textNode += c\n            }\n          }\n          continue\n\n        case S.SCRIPT:\n          // only non-strict\n          if (c === '<') {\n            parser.state = S.SCRIPT_ENDING\n          } else {\n            parser.script += c\n          }\n          continue\n\n        case S.SCRIPT_ENDING:\n          if (c === '/') {\n            parser.state = S.CLOSE_TAG\n          } else {\n            parser.script += '<' + c\n            parser.state = S.SCRIPT\n          }\n          continue\n\n        case S.OPEN_WAKA:\n          // either a /, ?, !, or text is coming next.\n          if (c === '!') {\n            parser.state = S.SGML_DECL\n            parser.sgmlDecl = ''\n          } else if (isWhitespace(c)) {\n            // wait for it...\n          } else if (isMatch(nameStart, c)) {\n            parser.state = S.OPEN_TAG\n            parser.tagName = c\n          } else if (c === '/') {\n            parser.state = S.CLOSE_TAG\n            parser.tagName = ''\n          } else if (c === '?') {\n            parser.state = S.PROC_INST\n            parser.procInstName = parser.procInstBody = ''\n          } else {\n            strictFail(parser, 'Unencoded <')\n            // if there was some whitespace, then add that in.\n            if (parser.startTagPosition + 1 < parser.position) {\n              var pad = parser.position - parser.startTagPosition\n              c = new Array(pad).join(' ') + c\n            }\n            parser.textNode += '<' + c\n            parser.state = S.TEXT\n          }\n          continue\n\n        case S.SGML_DECL:\n          if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {\n            emitNode(parser, 'onopencdata')\n            parser.state = S.CDATA\n            parser.sgmlDecl = ''\n            parser.cdata = ''\n          } else if (parser.sgmlDecl + c === '--') {\n            parser.state = S.COMMENT\n            parser.comment = ''\n            parser.sgmlDecl = ''\n          } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {\n            parser.state = S.DOCTYPE\n            if (parser.doctype || parser.sawRoot) {\n              strictFail(parser,\n                'Inappropriately located doctype declaration')\n            }\n            parser.doctype = ''\n            parser.sgmlDecl = ''\n          } else if (c === '>') {\n            emitNode(parser, 'onsgmldeclaration', parser.sgmlDecl)\n            parser.sgmlDecl = ''\n            parser.state = S.TEXT\n          } else if (isQuote(c)) {\n            parser.state = S.SGML_DECL_QUOTED\n            parser.sgmlDecl += c\n          } else {\n            parser.sgmlDecl += c\n          }\n          continue\n\n        case S.SGML_DECL_QUOTED:\n          if (c === parser.q) {\n            parser.state = S.SGML_DECL\n            parser.q = ''\n          }\n          parser.sgmlDecl += c\n          continue\n\n        case S.DOCTYPE:\n          if (c === '>') {\n            parser.state = S.TEXT\n            emitNode(parser, 'ondoctype', parser.doctype)\n            parser.doctype = true // just remember that we saw it.\n          } else {\n            parser.doctype += c\n            if (c === '[') {\n              parser.state = S.DOCTYPE_DTD\n            } else if (isQuote(c)) {\n              parser.state = S.DOCTYPE_QUOTED\n              parser.q = c\n            }\n          }\n          continue\n\n        case S.DOCTYPE_QUOTED:\n          parser.doctype += c\n          if (c === parser.q) {\n            parser.q = ''\n            parser.state = S.DOCTYPE\n          }\n          continue\n\n        case S.DOCTYPE_DTD:\n          parser.doctype += c\n          if (c === ']') {\n            parser.state = S.DOCTYPE\n          } else if (isQuote(c)) {\n            parser.state = S.DOCTYPE_DTD_QUOTED\n            parser.q = c\n          }\n          continue\n\n        case S.DOCTYPE_DTD_QUOTED:\n          parser.doctype += c\n          if (c === parser.q) {\n            parser.state = S.DOCTYPE_DTD\n            parser.q = ''\n          }\n          continue\n\n        case S.COMMENT:\n          if (c === '-') {\n            parser.state = S.COMMENT_ENDING\n          } else {\n            parser.comment += c\n          }\n          continue\n\n        case S.COMMENT_ENDING:\n          if (c === '-') {\n            parser.state = S.COMMENT_ENDED\n            parser.comment = textopts(parser.opt, parser.comment)\n            if (parser.comment) {\n              emitNode(parser, 'oncomment', parser.comment)\n            }\n            parser.comment = ''\n          } else {\n            parser.comment += '-' + c\n            parser.state = S.COMMENT\n          }\n          continue\n\n        case S.COMMENT_ENDED:\n          if (c !== '>') {\n            strictFail(parser, 'Malformed comment')\n            // allow <!-- blah -- bloo --> in non-strict mode,\n            // which is a comment of \" blah -- bloo \"\n            parser.comment += '--' + c\n            parser.state = S.COMMENT\n          } else {\n            parser.state = S.TEXT\n          }\n          continue\n\n        case S.CDATA:\n          if (c === ']') {\n            parser.state = S.CDATA_ENDING\n          } else {\n            parser.cdata += c\n          }\n          continue\n\n        case S.CDATA_ENDING:\n          if (c === ']') {\n            parser.state = S.CDATA_ENDING_2\n          } else {\n            parser.cdata += ']' + c\n            parser.state = S.CDATA\n          }\n          continue\n\n        case S.CDATA_ENDING_2:\n          if (c === '>') {\n            if (parser.cdata) {\n              emitNode(parser, 'oncdata', parser.cdata)\n            }\n            emitNode(parser, 'onclosecdata')\n            parser.cdata = ''\n            parser.state = S.TEXT\n          } else if (c === ']') {\n            parser.cdata += ']'\n          } else {\n            parser.cdata += ']]' + c\n            parser.state = S.CDATA\n          }\n          continue\n\n        case S.PROC_INST:\n          if (c === '?') {\n            parser.state = S.PROC_INST_ENDING\n          } else if (isWhitespace(c)) {\n            parser.state = S.PROC_INST_BODY\n          } else {\n            parser.procInstName += c\n          }\n          continue\n\n        case S.PROC_INST_BODY:\n          if (!parser.procInstBody && isWhitespace(c)) {\n            continue\n          } else if (c === '?') {\n            parser.state = S.PROC_INST_ENDING\n          } else {\n            parser.procInstBody += c\n          }\n          continue\n\n        case S.PROC_INST_ENDING:\n          if (c === '>') {\n            emitNode(parser, 'onprocessinginstruction', {\n              name: parser.procInstName,\n              body: parser.procInstBody\n            })\n            parser.procInstName = parser.procInstBody = ''\n            parser.state = S.TEXT\n          } else {\n            parser.procInstBody += '?' + c\n            parser.state = S.PROC_INST_BODY\n          }\n          continue\n\n        case S.OPEN_TAG:\n          if (isMatch(nameBody, c)) {\n            parser.tagName += c\n          } else {\n            newTag(parser)\n            if (c === '>') {\n              openTag(parser)\n            } else if (c === '/') {\n              parser.state = S.OPEN_TAG_SLASH\n            } else {\n              if (!isWhitespace(c)) {\n                strictFail(parser, 'Invalid character in tag name')\n              }\n              parser.state = S.ATTRIB\n            }\n          }\n          continue\n\n        case S.OPEN_TAG_SLASH:\n          if (c === '>') {\n            openTag(parser, true)\n            closeTag(parser)\n          } else {\n            strictFail(parser, 'Forward-slash in opening tag not followed by >')\n            parser.state = S.ATTRIB\n          }\n          continue\n\n        case S.ATTRIB:\n          // haven't read the attribute name yet.\n          if (isWhitespace(c)) {\n            continue\n          } else if (c === '>') {\n            openTag(parser)\n          } else if (c === '/') {\n            parser.state = S.OPEN_TAG_SLASH\n          } else if (isMatch(nameStart, c)) {\n            parser.attribName = c\n            parser.attribValue = ''\n            parser.state = S.ATTRIB_NAME\n          } else {\n            strictFail(parser, 'Invalid attribute name')\n          }\n          continue\n\n        case S.ATTRIB_NAME:\n          if (c === '=') {\n            parser.state = S.ATTRIB_VALUE\n          } else if (c === '>') {\n            strictFail(parser, 'Attribute without value')\n            parser.attribValue = parser.attribName\n            attrib(parser)\n            openTag(parser)\n          } else if (isWhitespace(c)) {\n            parser.state = S.ATTRIB_NAME_SAW_WHITE\n          } else if (isMatch(nameBody, c)) {\n            parser.attribName += c\n          } else {\n            strictFail(parser, 'Invalid attribute name')\n          }\n          continue\n\n        case S.ATTRIB_NAME_SAW_WHITE:\n          if (c === '=') {\n            parser.state = S.ATTRIB_VALUE\n          } else if (isWhitespace(c)) {\n            continue\n          } else {\n            strictFail(parser, 'Attribute without value')\n            parser.tag.attributes[parser.attribName] = ''\n            parser.attribValue = ''\n            emitNode(parser, 'onattribute', {\n              name: parser.attribName,\n              value: ''\n            })\n            parser.attribName = ''\n            if (c === '>') {\n              openTag(parser)\n            } else if (isMatch(nameStart, c)) {\n              parser.attribName = c\n              parser.state = S.ATTRIB_NAME\n            } else {\n              strictFail(parser, 'Invalid attribute name')\n              parser.state = S.ATTRIB\n            }\n          }\n          continue\n\n        case S.ATTRIB_VALUE:\n          if (isWhitespace(c)) {\n            continue\n          } else if (isQuote(c)) {\n            parser.q = c\n            parser.state = S.ATTRIB_VALUE_QUOTED\n          } else {\n            strictFail(parser, 'Unquoted attribute value')\n            parser.state = S.ATTRIB_VALUE_UNQUOTED\n            parser.attribValue = c\n          }\n          continue\n\n        case S.ATTRIB_VALUE_QUOTED:\n          if (c !== parser.q) {\n            if (c === '&') {\n              parser.state = S.ATTRIB_VALUE_ENTITY_Q\n            } else {\n              parser.attribValue += c\n            }\n            continue\n          }\n          attrib(parser)\n          parser.q = ''\n          parser.state = S.ATTRIB_VALUE_CLOSED\n          continue\n\n        case S.ATTRIB_VALUE_CLOSED:\n          if (isWhitespace(c)) {\n            parser.state = S.ATTRIB\n          } else if (c === '>') {\n            openTag(parser)\n          } else if (c === '/') {\n            parser.state = S.OPEN_TAG_SLASH\n          } else if (isMatch(nameStart, c)) {\n            strictFail(parser, 'No whitespace between attributes')\n            parser.attribName = c\n            parser.attribValue = ''\n            parser.state = S.ATTRIB_NAME\n          } else {\n            strictFail(parser, 'Invalid attribute name')\n          }\n          continue\n\n        case S.ATTRIB_VALUE_UNQUOTED:\n          if (!isAttribEnd(c)) {\n            if (c === '&') {\n              parser.state = S.ATTRIB_VALUE_ENTITY_U\n            } else {\n              parser.attribValue += c\n            }\n            continue\n          }\n          attrib(parser)\n          if (c === '>') {\n            openTag(parser)\n          } else {\n            parser.state = S.ATTRIB\n          }\n          continue\n\n        case S.CLOSE_TAG:\n          if (!parser.tagName) {\n            if (isWhitespace(c)) {\n              continue\n            } else if (notMatch(nameStart, c)) {\n              if (parser.script) {\n                parser.script += '</' + c\n                parser.state = S.SCRIPT\n              } else {\n                strictFail(parser, 'Invalid tagname in closing tag.')\n              }\n            } else {\n              parser.tagName = c\n            }\n          } else if (c === '>') {\n            closeTag(parser)\n          } else if (isMatch(nameBody, c)) {\n            parser.tagName += c\n          } else if (parser.script) {\n            parser.script += '</' + parser.tagName\n            parser.tagName = ''\n            parser.state = S.SCRIPT\n          } else {\n            if (!isWhitespace(c)) {\n              strictFail(parser, 'Invalid tagname in closing tag')\n            }\n            parser.state = S.CLOSE_TAG_SAW_WHITE\n          }\n          continue\n\n        case S.CLOSE_TAG_SAW_WHITE:\n          if (isWhitespace(c)) {\n            continue\n          }\n          if (c === '>') {\n            closeTag(parser)\n          } else {\n            strictFail(parser, 'Invalid characters in closing tag')\n          }\n          continue\n\n        case S.TEXT_ENTITY:\n        case S.ATTRIB_VALUE_ENTITY_Q:\n        case S.ATTRIB_VALUE_ENTITY_U:\n          var returnState\n          var buffer\n          switch (parser.state) {\n            case S.TEXT_ENTITY:\n              returnState = S.TEXT\n              buffer = 'textNode'\n              break\n\n            case S.ATTRIB_VALUE_ENTITY_Q:\n              returnState = S.ATTRIB_VALUE_QUOTED\n              buffer = 'attribValue'\n              break\n\n            case S.ATTRIB_VALUE_ENTITY_U:\n              returnState = S.ATTRIB_VALUE_UNQUOTED\n              buffer = 'attribValue'\n              break\n          }\n\n          if (c === ';') {\n            parser[buffer] += parseEntity(parser)\n            parser.entity = ''\n            parser.state = returnState\n          } else if (isMatch(parser.entity.length ? entityBody : entityStart, c)) {\n            parser.entity += c\n          } else {\n            strictFail(parser, 'Invalid character in entity name')\n            parser[buffer] += '&' + parser.entity + c\n            parser.entity = ''\n            parser.state = returnState\n          }\n\n          continue\n\n        default:\n          throw new Error(parser, 'Unknown state: ' + parser.state)\n      }\n    } // while\n\n    if (parser.position >= parser.bufferCheckPosition) {\n      checkBufferLength(parser)\n    }\n    return parser\n  }\n\n  /*! http://mths.be/fromcodepoint v0.1.0 by @mathias */\n  /* istanbul ignore next */\n  if (!String.fromCodePoint) {\n    (function () {\n      var stringFromCharCode = String.fromCharCode\n      var floor = Math.floor\n      var fromCodePoint = function () {\n        var MAX_SIZE = 0x4000\n        var codeUnits = []\n        var highSurrogate\n        var lowSurrogate\n        var index = -1\n        var length = arguments.length\n        if (!length) {\n          return ''\n        }\n        var result = ''\n        while (++index < length) {\n          var codePoint = Number(arguments[index])\n          if (\n            !isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n            codePoint < 0 || // not a valid Unicode code point\n            codePoint > 0x10FFFF || // not a valid Unicode code point\n            floor(codePoint) !== codePoint // not an integer\n          ) {\n            throw RangeError('Invalid code point: ' + codePoint)\n          }\n          if (codePoint <= 0xFFFF) { // BMP code point\n            codeUnits.push(codePoint)\n          } else { // Astral code point; split in surrogate halves\n            // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n            codePoint -= 0x10000\n            highSurrogate = (codePoint >> 10) + 0xD800\n            lowSurrogate = (codePoint % 0x400) + 0xDC00\n            codeUnits.push(highSurrogate, lowSurrogate)\n          }\n          if (index + 1 === length || codeUnits.length > MAX_SIZE) {\n            result += stringFromCharCode.apply(null, codeUnits)\n            codeUnits.length = 0\n          }\n        }\n        return result\n      }\n      /* istanbul ignore next */\n      if (Object.defineProperty) {\n        Object.defineProperty(String, 'fromCodePoint', {\n          value: fromCodePoint,\n          configurable: true,\n          writable: true\n        })\n      } else {\n        String.fromCodePoint = fromCodePoint\n      }\n    }())\n  }\n})(typeof exports === 'undefined' ? this.sax = {} : exports)\n","self.global = global;","\nvar inherits;\nif (typeof Object.create === 'function'){\n  inherits = function inherits(ctor, superCtor) {\n    // implementation from standard node.js 'util' module\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  inherits = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\nexport default inherits;\n","var toString = {}.toString;\n\nexport default Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","//Types of elements found in the DOM\nmodule.exports = {\n\tText: \"text\", //Text\n\tDirective: \"directive\", //<? ... ?>\n\tComment: \"comment\", //<!-- ... -->\n\tScript: \"script\", //<script> tags\n\tStyle: \"style\", //<style> tags\n\tTag: \"tag\", //Any tag\n\tCDATA: \"cdata\", //<![CDATA[ ... ]]>\n\tDoctype: \"doctype\",\n\n\tisTag: function(elem){\n\t\treturn elem.type === \"tag\" || elem.type === \"script\" || elem.type === \"style\";\n\t}\n};\n","//Types of elements found in the DOM\nmodule.exports = {\n\tText: \"text\", //Text\n\tDirective: \"directive\", //<? ... ?>\n\tComment: \"comment\", //<!-- ... -->\n\tScript: \"script\", //<script> tags\n\tStyle: \"style\", //<style> tags\n\tTag: \"tag\", //Any tag\n\tCDATA: \"cdata\", //<![CDATA[ ... ]]>\n\n\tisTag: function(elem){\n\t\treturn elem.type === \"tag\" || elem.type === \"script\" || elem.type === \"style\";\n\t}\n};","var decodeMap = require(\"../maps/decode.json\");\n\nmodule.exports = decodeCodePoint;\n\n// modified version of https://github.com/mathiasbynens/he/blob/master/src/he.js#L94-L119\nfunction decodeCodePoint(codePoint) {\n    if ((codePoint >= 0xd800 && codePoint <= 0xdfff) || codePoint > 0x10ffff) {\n        return \"\\uFFFD\";\n    }\n\n    if (codePoint in decodeMap) {\n        codePoint = decodeMap[codePoint];\n    }\n\n    var output = \"\";\n\n    if (codePoint > 0xffff) {\n        codePoint -= 0x10000;\n        output += String.fromCharCode(((codePoint >>> 10) & 0x3ff) | 0xd800);\n        codePoint = 0xdc00 | (codePoint & 0x3ff);\n    }\n\n    output += String.fromCharCode(codePoint);\n    return output;\n}\n","var encode = require(\"./lib/encode.js\"),\n    decode = require(\"./lib/decode.js\");\n\nexports.decode = function(data, level) {\n    return (!level || level <= 0 ? decode.XML : decode.HTML)(data);\n};\n\nexports.decodeStrict = function(data, level) {\n    return (!level || level <= 0 ? decode.XML : decode.HTMLStrict)(data);\n};\n\nexports.encode = function(data, level) {\n    return (!level || level <= 0 ? encode.XML : encode.HTML)(data);\n};\n\nexports.encodeXML = encode.XML;\n\nexports.encodeHTML4 = exports.encodeHTML5 = exports.encodeHTML = encode.HTML;\n\nexports.decodeXML = exports.decodeXMLStrict = decode.XML;\n\nexports.decodeHTML4 = exports.decodeHTML5 = exports.decodeHTML = decode.HTML;\n\nexports.decodeHTML4Strict = exports.decodeHTML5Strict = exports.decodeHTMLStrict = decode.HTMLStrict;\n\nexports.escape = encode.escape;\n","/*\n  Module dependencies\n*/\nvar ElementType = require('domelementtype');\nvar entities = require('entities');\n\n/*\n  Boolean Attributes\n*/\nvar booleanAttributes = {\n  __proto__: null,\n  allowfullscreen: true,\n  async: true,\n  autofocus: true,\n  autoplay: true,\n  checked: true,\n  controls: true,\n  default: true,\n  defer: true,\n  disabled: true,\n  hidden: true,\n  ismap: true,\n  loop: true,\n  multiple: true,\n  muted: true,\n  open: true,\n  readonly: true,\n  required: true,\n  reversed: true,\n  scoped: true,\n  seamless: true,\n  selected: true,\n  typemustmatch: true\n};\n\nvar unencodedElements = {\n  __proto__: null,\n  style: true,\n  script: true,\n  xmp: true,\n  iframe: true,\n  noembed: true,\n  noframes: true,\n  plaintext: true,\n  noscript: true\n};\n\n/*\n  Format attributes\n*/\nfunction formatAttrs(attributes, opts) {\n  if (!attributes) return;\n\n  var output = '',\n      value;\n\n  // Loop through the attributes\n  for (var key in attributes) {\n    value = attributes[key];\n    if (output) {\n      output += ' ';\n    }\n\n    if (!value && booleanAttributes[key]) {\n      output += key;\n    } else {\n      output += key + '=\"' + (opts.decodeEntities ? entities.encodeXML(value) : value) + '\"';\n    }\n  }\n\n  return output;\n}\n\n/*\n  Self-enclosing tags (stolen from node-htmlparser)\n*/\nvar singleTag = {\n  __proto__: null,\n  area: true,\n  base: true,\n  basefont: true,\n  br: true,\n  col: true,\n  command: true,\n  embed: true,\n  frame: true,\n  hr: true,\n  img: true,\n  input: true,\n  isindex: true,\n  keygen: true,\n  link: true,\n  meta: true,\n  param: true,\n  source: true,\n  track: true,\n  wbr: true,\n};\n\n\nvar render = module.exports = function(dom, opts) {\n  if (!Array.isArray(dom) && !dom.cheerio) dom = [dom];\n  opts = opts || {};\n\n  var output = '';\n\n  for(var i = 0; i < dom.length; i++){\n    var elem = dom[i];\n\n    if (elem.type === 'root')\n      output += render(elem.children, opts);\n    else if (ElementType.isTag(elem))\n      output += renderTag(elem, opts);\n    else if (elem.type === ElementType.Directive)\n      output += renderDirective(elem);\n    else if (elem.type === ElementType.Comment)\n      output += renderComment(elem);\n    else if (elem.type === ElementType.CDATA)\n      output += renderCdata(elem);\n    else\n      output += renderText(elem, opts);\n  }\n\n  return output;\n};\n\nfunction renderTag(elem, opts) {\n  // Handle SVG\n  if (elem.name === \"svg\") opts = {decodeEntities: opts.decodeEntities, xmlMode: true};\n\n  var tag = '<' + elem.name,\n      attribs = formatAttrs(elem.attribs, opts);\n\n  if (attribs) {\n    tag += ' ' + attribs;\n  }\n\n  if (\n    opts.xmlMode\n    && (!elem.children || elem.children.length === 0)\n  ) {\n    tag += '/>';\n  } else {\n    tag += '>';\n    if (elem.children) {\n      tag += render(elem.children, opts);\n    }\n\n    if (!singleTag[elem.name] || opts.xmlMode) {\n      tag += '</' + elem.name + '>';\n    }\n  }\n\n  return tag;\n}\n\nfunction renderDirective(elem) {\n  return '<' + elem.data + '>';\n}\n\nfunction renderText(elem, opts) {\n  var data = elem.data || '';\n\n  // if entities weren't decoded, no need to encode them back\n  if (opts.decodeEntities && !(elem.parent && elem.parent.name in unencodedElements)) {\n    data = entities.encodeXML(data);\n  }\n\n  return data;\n}\n\nfunction renderCdata(elem) {\n  return '<![CDATA[' + elem.children[0].data + ']]>';\n}\n\nfunction renderComment(elem) {\n  return '<!--' + elem.data + '-->';\n}\n","var getChildren = exports.getChildren = function(elem){\n\treturn elem.children;\n};\n\nvar getParent = exports.getParent = function(elem){\n\treturn elem.parent;\n};\n\nexports.getSiblings = function(elem){\n\tvar parent = getParent(elem);\n\treturn parent ? getChildren(parent) : [elem];\n};\n\nexports.getAttributeValue = function(elem, name){\n\treturn elem.attribs && elem.attribs[name];\n};\n\nexports.hasAttrib = function(elem, name){\n\treturn !!elem.attribs && hasOwnProperty.call(elem.attribs, name);\n};\n\nexports.getName = function(elem){\n\treturn elem.name;\n};\n","exports.removeElement = function(elem){\n\tif(elem.prev) elem.prev.next = elem.next;\n\tif(elem.next) elem.next.prev = elem.prev;\n\n\tif(elem.parent){\n\t\tvar childs = elem.parent.children;\n\t\tchilds.splice(childs.lastIndexOf(elem), 1);\n\t}\n};\n\nexports.replaceElement = function(elem, replacement){\n\tvar prev = replacement.prev = elem.prev;\n\tif(prev){\n\t\tprev.next = replacement;\n\t}\n\n\tvar next = replacement.next = elem.next;\n\tif(next){\n\t\tnext.prev = replacement;\n\t}\n\n\tvar parent = replacement.parent = elem.parent;\n\tif(parent){\n\t\tvar childs = parent.children;\n\t\tchilds[childs.lastIndexOf(elem)] = replacement;\n\t}\n};\n\nexports.appendChild = function(elem, child){\n\tchild.parent = elem;\n\n\tif(elem.children.push(child) !== 1){\n\t\tvar sibling = elem.children[elem.children.length - 2];\n\t\tsibling.next = child;\n\t\tchild.prev = sibling;\n\t\tchild.next = null;\n\t}\n};\n\nexports.append = function(elem, next){\n\tvar parent = elem.parent,\n\t\tcurrNext = elem.next;\n\n\tnext.next = currNext;\n\tnext.prev = elem;\n\telem.next = next;\n\tnext.parent = parent;\n\n\tif(currNext){\n\t\tcurrNext.prev = next;\n\t\tif(parent){\n\t\t\tvar childs = parent.children;\n\t\t\tchilds.splice(childs.lastIndexOf(currNext), 0, next);\n\t\t}\n\t} else if(parent){\n\t\tparent.children.push(next);\n\t}\n};\n\nexports.prepend = function(elem, prev){\n\tvar parent = elem.parent;\n\tif(parent){\n\t\tvar childs = parent.children;\n\t\tchilds.splice(childs.lastIndexOf(elem), 0, prev);\n\t}\n\n\tif(elem.prev){\n\t\telem.prev.next = prev;\n\t}\n\t\n\tprev.parent = parent;\n\tprev.prev = elem.prev;\n\tprev.next = elem;\n\telem.prev = prev;\n};\n\n\n","var ElementType = require(\"domelementtype\");\nvar isTag = exports.isTag = ElementType.isTag;\n\nexports.testElement = function(options, element){\n\tfor(var key in options){\n\t\tif(!options.hasOwnProperty(key));\n\t\telse if(key === \"tag_name\"){\n\t\t\tif(!isTag(element) || !options.tag_name(element.name)){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else if(key === \"tag_type\"){\n\t\t\tif(!options.tag_type(element.type)) return false;\n\t\t} else if(key === \"tag_contains\"){\n\t\t\tif(isTag(element) || !options.tag_contains(element.data)){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else if(!element.attribs || !options[key](element.attribs[key])){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n};\n\nvar Checks = {\n\ttag_name: function(name){\n\t\tif(typeof name === \"function\"){\n\t\t\treturn function(elem){ return isTag(elem) && name(elem.name); };\n\t\t} else if(name === \"*\"){\n\t\t\treturn isTag;\n\t\t} else {\n\t\t\treturn function(elem){ return isTag(elem) && elem.name === name; };\n\t\t}\n\t},\n\ttag_type: function(type){\n\t\tif(typeof type === \"function\"){\n\t\t\treturn function(elem){ return type(elem.type); };\n\t\t} else {\n\t\t\treturn function(elem){ return elem.type === type; };\n\t\t}\n\t},\n\ttag_contains: function(data){\n\t\tif(typeof data === \"function\"){\n\t\t\treturn function(elem){ return !isTag(elem) && data(elem.data); };\n\t\t} else {\n\t\t\treturn function(elem){ return !isTag(elem) && elem.data === data; };\n\t\t}\n\t}\n};\n\nfunction getAttribCheck(attrib, value){\n\tif(typeof value === \"function\"){\n\t\treturn function(elem){ return elem.attribs && value(elem.attribs[attrib]); };\n\t} else {\n\t\treturn function(elem){ return elem.attribs && elem.attribs[attrib] === value; };\n\t}\n}\n\nfunction combineFuncs(a, b){\n\treturn function(elem){\n\t\treturn a(elem) || b(elem);\n\t};\n}\n\nexports.getElements = function(options, element, recurse, limit){\n\tvar funcs = Object.keys(options).map(function(key){\n\t\tvar value = options[key];\n\t\treturn key in Checks ? Checks[key](value) : getAttribCheck(key, value);\n\t});\n\n\treturn funcs.length === 0 ? [] : this.filter(\n\t\tfuncs.reduce(combineFuncs),\n\t\telement, recurse, limit\n\t);\n};\n\nexports.getElementById = function(id, element, recurse){\n\tif(!Array.isArray(element)) element = [element];\n\treturn this.findOne(getAttribCheck(\"id\", id), element, recurse !== false);\n};\n\nexports.getElementsByTagName = function(name, element, recurse, limit){\n\treturn this.filter(Checks.tag_name(name), element, recurse, limit);\n};\n\nexports.getElementsByTagType = function(type, element, recurse, limit){\n\treturn this.filter(Checks.tag_type(type), element, recurse, limit);\n};\n","// removeSubsets\n// Given an array of nodes, remove any member that is contained by another.\nexports.removeSubsets = function(nodes) {\n\tvar idx = nodes.length, node, ancestor, replace;\n\n\t// Check if each node (or one of its ancestors) is already contained in the\n\t// array.\n\twhile (--idx > -1) {\n\t\tnode = ancestor = nodes[idx];\n\n\t\t// Temporarily remove the node under consideration\n\t\tnodes[idx] = null;\n\t\treplace = true;\n\n\t\twhile (ancestor) {\n\t\t\tif (nodes.indexOf(ancestor) > -1) {\n\t\t\t\treplace = false;\n\t\t\t\tnodes.splice(idx, 1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tancestor = ancestor.parent;\n\t\t}\n\n\t\t// If the node has been found to be unique, re-insert it.\n\t\tif (replace) {\n\t\t\tnodes[idx] = node;\n\t\t}\n\t}\n\n\treturn nodes;\n};\n\n// Source: http://dom.spec.whatwg.org/#dom-node-comparedocumentposition\nvar POSITION = {\n\tDISCONNECTED: 1,\n\tPRECEDING: 2,\n\tFOLLOWING: 4,\n\tCONTAINS: 8,\n\tCONTAINED_BY: 16\n};\n\n// Compare the position of one node against another node in any other document.\n// The return value is a bitmask with the following values:\n//\n// document order:\n// > There is an ordering, document order, defined on all the nodes in the\n// > document corresponding to the order in which the first character of the\n// > XML representation of each node occurs in the XML representation of the\n// > document after expansion of general entities. Thus, the document element\n// > node will be the first node. Element nodes occur before their children.\n// > Thus, document order orders element nodes in order of the occurrence of\n// > their start-tag in the XML (after expansion of entities). The attribute\n// > nodes of an element occur after the element and before its children. The\n// > relative order of attribute nodes is implementation-dependent./\n// Source:\n// http://www.w3.org/TR/DOM-Level-3-Core/glossary.html#dt-document-order\n//\n// @argument {Node} nodaA The first node to use in the comparison\n// @argument {Node} nodeB The second node to use in the comparison\n//\n// @return {Number} A bitmask describing the input nodes' relative position.\n//         See http://dom.spec.whatwg.org/#dom-node-comparedocumentposition for\n//         a description of these values.\nvar comparePos = exports.compareDocumentPosition = function(nodeA, nodeB) {\n\tvar aParents = [];\n\tvar bParents = [];\n\tvar current, sharedParent, siblings, aSibling, bSibling, idx;\n\n\tif (nodeA === nodeB) {\n\t\treturn 0;\n\t}\n\n\tcurrent = nodeA;\n\twhile (current) {\n\t\taParents.unshift(current);\n\t\tcurrent = current.parent;\n\t}\n\tcurrent = nodeB;\n\twhile (current) {\n\t\tbParents.unshift(current);\n\t\tcurrent = current.parent;\n\t}\n\n\tidx = 0;\n\twhile (aParents[idx] === bParents[idx]) {\n\t\tidx++;\n\t}\n\n\tif (idx === 0) {\n\t\treturn POSITION.DISCONNECTED;\n\t}\n\n\tsharedParent = aParents[idx - 1];\n\tsiblings = sharedParent.children;\n\taSibling = aParents[idx];\n\tbSibling = bParents[idx];\n\n\tif (siblings.indexOf(aSibling) > siblings.indexOf(bSibling)) {\n\t\tif (sharedParent === nodeB) {\n\t\t\treturn POSITION.FOLLOWING | POSITION.CONTAINED_BY;\n\t\t}\n\t\treturn POSITION.FOLLOWING;\n\t} else {\n\t\tif (sharedParent === nodeA) {\n\t\t\treturn POSITION.PRECEDING | POSITION.CONTAINS;\n\t\t}\n\t\treturn POSITION.PRECEDING;\n\t}\n};\n\n// Sort an array of nodes based on their relative position in the document and\n// remove any duplicate nodes. If the array contains nodes that do not belong\n// to the same document, sort order is unspecified.\n//\n// @argument {Array} nodes Array of DOM nodes\n//\n// @returns {Array} collection of unique nodes, sorted in document order\nexports.uniqueSort = function(nodes) {\n\tvar idx = nodes.length, node, position;\n\n\tnodes = nodes.slice();\n\n\twhile (--idx > -1) {\n\t\tnode = nodes[idx];\n\t\tposition = nodes.indexOf(node);\n\t\tif (position > -1 && position < idx) {\n\t\t\tnodes.splice(idx, 1);\n\t\t}\n\t}\n\tnodes.sort(function(a, b) {\n\t\tvar relative = comparePos(a, b);\n\t\tif (relative & POSITION.PRECEDING) {\n\t\t\treturn -1;\n\t\t} else if (relative & POSITION.FOLLOWING) {\n\t\t\treturn 1;\n\t\t}\n\t\treturn 0;\n\t});\n\n\treturn nodes;\n};\n","var DomUtils = module.exports;\n\n[\n\trequire(\"./lib/stringify\"),\n\trequire(\"./lib/traversal\"),\n\trequire(\"./lib/manipulation\"),\n\trequire(\"./lib/querying\"),\n\trequire(\"./lib/legacy\"),\n\trequire(\"./lib/helpers\")\n].forEach(function(ext){\n\tObject.keys(ext).forEach(function(key){\n\t\tDomUtils[key] = ext[key].bind(DomUtils);\n\t});\n});\n","module.exports = {\n\ttrueFunc: function trueFunc(){\n\t\treturn true;\n\t},\n\tfalseFunc: function falseFunc(){\n\t\treturn false;\n\t}\n};","var falseFunc = require(\"boolbase\").falseFunc;\n\n//https://github.com/slevithan/XRegExp/blob/master/src/xregexp.js#L469\nvar reChars = /[-[\\]{}()*+?.,\\\\^$|#\\s]/g;\n\n/*\n\tattribute selectors\n*/\nvar attributeRules = {\n    __proto__: null,\n    equals: function(next, data, options) {\n        var name = data.name;\n        var value = data.value;\n        var adapter = options.adapter;\n\n        if (data.ignoreCase) {\n            value = value.toLowerCase();\n\n            return function equalsIC(elem) {\n                var attr = adapter.getAttributeValue(elem, name);\n                return attr != null && attr.toLowerCase() === value && next(elem);\n            };\n        }\n\n        return function equals(elem) {\n            return adapter.getAttributeValue(elem, name) === value && next(elem);\n        };\n    },\n    hyphen: function(next, data, options) {\n        var name = data.name;\n        var value = data.value;\n        var len = value.length;\n        var adapter = options.adapter;\n\n        if (data.ignoreCase) {\n            value = value.toLowerCase();\n\n            return function hyphenIC(elem) {\n                var attr = adapter.getAttributeValue(elem, name);\n                return (\n                    attr != null &&\n                    (attr.length === len || attr.charAt(len) === \"-\") &&\n                    attr.substr(0, len).toLowerCase() === value &&\n                    next(elem)\n                );\n            };\n        }\n\n        return function hyphen(elem) {\n            var attr = adapter.getAttributeValue(elem, name);\n            return (\n                attr != null &&\n                attr.substr(0, len) === value &&\n                (attr.length === len || attr.charAt(len) === \"-\") &&\n                next(elem)\n            );\n        };\n    },\n    element: function(next, data, options) {\n        var name = data.name;\n        var value = data.value;\n        var adapter = options.adapter;\n\n        if (/\\s/.test(value)) {\n            return falseFunc;\n        }\n\n        value = value.replace(reChars, \"\\\\$&\");\n\n        var pattern = \"(?:^|\\\\s)\" + value + \"(?:$|\\\\s)\",\n            flags = data.ignoreCase ? \"i\" : \"\",\n            regex = new RegExp(pattern, flags);\n\n        return function element(elem) {\n            var attr = adapter.getAttributeValue(elem, name);\n            return attr != null && regex.test(attr) && next(elem);\n        };\n    },\n    exists: function(next, data, options) {\n        var name = data.name;\n        var adapter = options.adapter;\n\n        return function exists(elem) {\n            return adapter.hasAttrib(elem, name) && next(elem);\n        };\n    },\n    start: function(next, data, options) {\n        var name = data.name;\n        var value = data.value;\n        var len = value.length;\n        var adapter = options.adapter;\n\n        if (len === 0) {\n            return falseFunc;\n        }\n\n        if (data.ignoreCase) {\n            value = value.toLowerCase();\n\n            return function startIC(elem) {\n                var attr = adapter.getAttributeValue(elem, name);\n                return attr != null && attr.substr(0, len).toLowerCase() === value && next(elem);\n            };\n        }\n\n        return function start(elem) {\n            var attr = adapter.getAttributeValue(elem, name);\n            return attr != null && attr.substr(0, len) === value && next(elem);\n        };\n    },\n    end: function(next, data, options) {\n        var name = data.name;\n        var value = data.value;\n        var len = -value.length;\n        var adapter = options.adapter;\n\n        if (len === 0) {\n            return falseFunc;\n        }\n\n        if (data.ignoreCase) {\n            value = value.toLowerCase();\n\n            return function endIC(elem) {\n                var attr = adapter.getAttributeValue(elem, name);\n                return attr != null && attr.substr(len).toLowerCase() === value && next(elem);\n            };\n        }\n\n        return function end(elem) {\n            var attr = adapter.getAttributeValue(elem, name);\n            return attr != null && attr.substr(len) === value && next(elem);\n        };\n    },\n    any: function(next, data, options) {\n        var name = data.name;\n        var value = data.value;\n        var adapter = options.adapter;\n\n        if (value === \"\") {\n            return falseFunc;\n        }\n\n        if (data.ignoreCase) {\n            var regex = new RegExp(value.replace(reChars, \"\\\\$&\"), \"i\");\n\n            return function anyIC(elem) {\n                var attr = adapter.getAttributeValue(elem, name);\n                return attr != null && regex.test(attr) && next(elem);\n            };\n        }\n\n        return function any(elem) {\n            var attr = adapter.getAttributeValue(elem, name);\n            return attr != null && attr.indexOf(value) >= 0 && next(elem);\n        };\n    },\n    not: function(next, data, options) {\n        var name = data.name;\n        var value = data.value;\n        var adapter = options.adapter;\n\n        if (value === \"\") {\n            return function notEmpty(elem) {\n                return !!adapter.getAttributeValue(elem, name) && next(elem);\n            };\n        } else if (data.ignoreCase) {\n            value = value.toLowerCase();\n\n            return function notIC(elem) {\n                var attr = adapter.getAttributeValue(elem, name);\n                return attr != null && attr.toLowerCase() !== value && next(elem);\n            };\n        }\n\n        return function not(elem) {\n            return adapter.getAttributeValue(elem, name) !== value && next(elem);\n        };\n    }\n};\n\nmodule.exports = {\n    compile: function(next, data, options) {\n        if (options && options.strict && (data.ignoreCase || data.action === \"not\")) {\n            throw new Error(\"Unsupported attribute selector\");\n        }\n        return attributeRules[data.action](next, data, options);\n    },\n    rules: attributeRules\n};\n","module.exports = parse;\n\n//following http://www.w3.org/TR/css3-selectors/#nth-child-pseudo\n\n//[ ['-'|'+']? INTEGER? {N} [ S* ['-'|'+'] S* INTEGER ]?\nvar re_nthElement = /^([+\\-]?\\d*n)?\\s*(?:([+\\-]?)\\s*(\\d+))?$/;\n\n/*\n\tparses a nth-check formula, returns an array of two numbers\n*/\nfunction parse(formula){\n\tformula = formula.trim().toLowerCase();\n\n\tif(formula === \"even\"){\n\t\treturn [2, 0];\n\t} else if(formula === \"odd\"){\n\t\treturn [2, 1];\n\t} else {\n\t\tvar parsed = formula.match(re_nthElement);\n\n\t\tif(!parsed){\n\t\t\tthrow new SyntaxError(\"n-th rule couldn't be parsed ('\" + formula + \"')\");\n\t\t}\n\n\t\tvar a;\n\n\t\tif(parsed[1]){\n\t\t\ta = parseInt(parsed[1], 10);\n\t\t\tif(isNaN(a)){\n\t\t\t\tif(parsed[1].charAt(0) === \"-\") a = -1;\n\t\t\t\telse a = 1;\n\t\t\t}\n\t\t} else a = 0;\n\n\t\treturn [\n\t\t\ta,\n\t\t\tparsed[3] ? parseInt((parsed[2] || \"\") + parsed[3], 10) : 0\n\t\t];\n\t}\n}\n","module.exports = compile;\n\nvar BaseFuncs = require(\"boolbase\"),\n    trueFunc  = BaseFuncs.trueFunc,\n    falseFunc = BaseFuncs.falseFunc;\n\n/*\n\treturns a function that checks if an elements index matches the given rule\n\thighly optimized to return the fastest solution\n*/\nfunction compile(parsed){\n\tvar a = parsed[0],\n\t    b = parsed[1] - 1;\n\n\t//when b <= 0, a*n won't be possible for any matches when a < 0\n\t//besides, the specification says that no element is matched when a and b are 0\n\tif(b < 0 && a <= 0) return falseFunc;\n\n\t//when a is in the range -1..1, it matches any element (so only b is checked)\n\tif(a ===-1) return function(pos){ return pos <= b; };\n\tif(a === 0) return function(pos){ return pos === b; };\n\t//when b <= 0 and a === 1, they match any element\n\tif(a === 1) return b < 0 ? trueFunc : function(pos){ return pos >= b; };\n\n\t//when a > 0, modulo can be used to check if there is a match\n\tvar bMod = b % a;\n\tif(bMod < 0) bMod += a;\n\n\tif(a > 1){\n\t\treturn function(pos){\n\t\t\treturn pos >= b && pos % a === bMod;\n\t\t};\n\t}\n\n\ta *= -1; //make `a` positive\n\n\treturn function(pos){\n\t\treturn pos <= b && pos % a === bMod;\n\t};\n}","var parse = require(\"./parse.js\"),\n    compile = require(\"./compile.js\");\n\nmodule.exports = function nthCheck(formula){\n\treturn compile(parse(formula));\n};\n\nmodule.exports.parse = parse;\nmodule.exports.compile = compile;","var attributes = require(\"./attributes.js\");\nvar Pseudos = require(\"./pseudos\");\n\n/*\n\tall available rules\n*/\nmodule.exports = {\n    __proto__: null,\n\n    attribute: attributes.compile,\n    pseudo: Pseudos.compile,\n\n    //tags\n    tag: function(next, data, options) {\n        var name = data.name;\n        var adapter = options.adapter;\n\n        return function tag(elem) {\n            return adapter.getName(elem) === name && next(elem);\n        };\n    },\n\n    //traversal\n    descendant: function(next, data, options) {\n        // eslint-disable-next-line no-undef\n        var isFalseCache = typeof WeakSet !== \"undefined\" ? new WeakSet() : null;\n        var adapter = options.adapter;\n\n        return function descendant(elem) {\n            var found = false;\n\n            while (!found && (elem = adapter.getParent(elem))) {\n                if (!isFalseCache || !isFalseCache.has(elem)) {\n                    found = next(elem);\n                    if (!found && isFalseCache) {\n                        isFalseCache.add(elem);\n                    }\n                }\n            }\n\n            return found;\n        };\n    },\n    _flexibleDescendant: function(next, data, options) {\n        var adapter = options.adapter;\n\n        // Include element itself, only used while querying an array\n        return function descendant(elem) {\n            var found = next(elem);\n\n            while (!found && (elem = adapter.getParent(elem))) {\n                found = next(elem);\n            }\n\n            return found;\n        };\n    },\n    parent: function(next, data, options) {\n        if (options && options.strict) {\n            throw new Error(\"Parent selector isn't part of CSS3\");\n        }\n\n        var adapter = options.adapter;\n\n        return function parent(elem) {\n            return adapter.getChildren(elem).some(test);\n        };\n\n        function test(elem) {\n            return adapter.isTag(elem) && next(elem);\n        }\n    },\n    child: function(next, data, options) {\n        var adapter = options.adapter;\n\n        return function child(elem) {\n            var parent = adapter.getParent(elem);\n            return !!parent && next(parent);\n        };\n    },\n    sibling: function(next, data, options) {\n        var adapter = options.adapter;\n\n        return function sibling(elem) {\n            var siblings = adapter.getSiblings(elem);\n\n            for (var i = 0; i < siblings.length; i++) {\n                if (adapter.isTag(siblings[i])) {\n                    if (siblings[i] === elem) break;\n                    if (next(siblings[i])) return true;\n                }\n            }\n\n            return false;\n        };\n    },\n    adjacent: function(next, data, options) {\n        var adapter = options.adapter;\n\n        return function adjacent(elem) {\n            var siblings = adapter.getSiblings(elem),\n                lastElement;\n\n            for (var i = 0; i < siblings.length; i++) {\n                if (adapter.isTag(siblings[i])) {\n                    if (siblings[i] === elem) break;\n                    lastElement = siblings[i];\n                }\n            }\n\n            return !!lastElement && next(lastElement);\n        };\n    },\n    universal: function(next) {\n        return next;\n    }\n};\n","'use strict';\n\nvar baseCssAdapter = require('css-select-base-adapter');\n\n/**\n * DOMUtils API for SVGO AST (used by css-select)\n */\nvar svgoCssSelectAdapterMin = {\n\n    // is the node a tag?\n    // isTag: ( node:Node ) => isTag:Boolean\n    isTag: function(node) {\n        return node.isElem();\n    },\n\n    // get the parent of the node\n    // getParent: ( node:Node ) => parentNode:Node\n    // returns null when no parent exists\n    getParent: function(node) {\n        return node.parentNode || null;\n    },\n\n    // get the node's children\n    // getChildren: ( node:Node ) => children:[Node]\n    getChildren: function(node) {\n        return node.content || [];\n    },\n\n    // get the name of the tag\n    // getName: ( elem:ElementNode ) => tagName:String\n    getName: function(elemAst) {\n        return elemAst.elem;\n    },\n\n    // get the text content of the node, and its children if it has any\n    // getText: ( node:Node ) => text:String\n    // returns empty string when there is no text\n    getText: function(node) {\n        return node.content[0].text || node.content[0].cdata || '';\n    },\n\n    // get the attribute value\n    // getAttributeValue: ( elem:ElementNode, name:String ) => value:String\n    // returns null when attribute doesn't exist\n    getAttributeValue: function(elem, name) {\n        return elem.hasAttr(name) ? elem.attr(name).value : null;\n    }\n};\n\n// use base adapter for default implementation\nvar svgoCssSelectAdapter = baseCssAdapter(svgoCssSelectAdapterMin);\n\nmodule.exports = svgoCssSelectAdapter;\n","'use strict';\n\nvar cssSelect = require('css-select');\n\nvar svgoCssSelectAdapter = require('./css-select-adapter');\nvar cssSelectOpts = {\n  xmlMode: true,\n  adapter: svgoCssSelectAdapter\n};\n\nvar JSAPI = module.exports = function(data, parentNode) {\n    Object.assign(this, data);\n    if (parentNode) {\n        Object.defineProperty(this, 'parentNode', {\n            writable: true,\n            value: parentNode\n        });\n    }\n};\n\n/**\n * Perform a deep clone of this node.\n *\n * @return {Object} element\n */\nJSAPI.prototype.clone = function() {\n    var node = this;\n    var nodeData = {};\n\n    Object.keys(node).forEach(function(key) {\n        if (key !== 'class' && key !== 'style' && key !== 'content') {\n            nodeData[key] = node[key];\n        }\n    });\n\n    // Deep-clone node data.\n    nodeData = JSON.parse(JSON.stringify(nodeData));\n\n    // parentNode gets set to a proper object by the parent clone,\n    // but it needs to be true/false now to do the right thing\n    // in the constructor.\n    var clonedNode = new JSAPI(nodeData, !!node.parentNode);\n\n    if (node.class) {\n        clonedNode.class = node.class.clone(clonedNode);\n    }\n    if (node.style) {\n        clonedNode.style = node.style.clone(clonedNode);\n    }\n    if (node.content) {\n        clonedNode.content = node.content.map(function(childNode) {\n            var clonedChild = childNode.clone();\n            clonedChild.parentNode = clonedNode;\n            return clonedChild;\n        });\n    }\n\n    return clonedNode;\n};\n\n/**\n * Determine if item is an element\n * (any, with a specific name or in a names array).\n *\n * @param {String|Array} [param] element name or names arrays\n * @return {Boolean}\n */\nJSAPI.prototype.isElem = function(param) {\n\n    if (!param) return !!this.elem;\n\n    if (Array.isArray(param)) return !!this.elem && (param.indexOf(this.elem) > -1);\n\n    return !!this.elem && this.elem === param;\n\n};\n\n/**\n * Renames an element\n *\n * @param {String} name new element name\n * @return {Object} element\n */\nJSAPI.prototype.renameElem = function(name) {\n\n    if (name && typeof name === 'string')\n        this.elem = this.local = name;\n\n    return this;\n\n};\n\n/**\n * Determine if element is empty.\n *\n * @return {Boolean}\n */\n JSAPI.prototype.isEmpty = function() {\n\n    return !this.content || !this.content.length;\n\n};\n\n/**\n * Find the closest ancestor of the current element.\n * @param elemName\n *\n * @return {?Object}\n */\n JSAPI.prototype.closestElem = function(elemName) {\n    var elem = this;\n\n    while ((elem = elem.parentNode) && !elem.isElem(elemName));\n\n    return elem;\n};\n\n/**\n * Changes content by removing elements and/or adding new elements.\n *\n * @param {Number} start Index at which to start changing the content.\n * @param {Number} n Number of elements to remove.\n * @param {Array|Object} [insertion] Elements to add to the content.\n * @return {Array} Removed elements.\n */\n JSAPI.prototype.spliceContent = function(start, n, insertion) {\n\n    if (arguments.length < 2) return [];\n\n    if (!Array.isArray(insertion))\n        insertion = Array.apply(null, arguments).slice(2);\n\n    insertion.forEach(function(inner) { inner.parentNode = this }, this);\n\n    return this.content.splice.apply(this.content, [start, n].concat(insertion));\n\n\n};\n\n/**\n * Determine if element has an attribute\n * (any, or by name or by name + value).\n *\n * @param {String} [name] attribute name\n * @param {String} [val] attribute value (will be toString()'ed)\n * @return {Boolean}\n */\n JSAPI.prototype.hasAttr = function(name, val) {\n\n    if (!this.attrs || !Object.keys(this.attrs).length) return false;\n\n    if (!arguments.length) return !!this.attrs;\n\n    if (val !== undefined) return !!this.attrs[name] && this.attrs[name].value === val.toString();\n\n    return !!this.attrs[name];\n\n};\n\n/**\n * Determine if element has an attribute by local name\n * (any, or by name or by name + value).\n *\n * @param {String} [localName] local attribute name\n * @param {Number|String|RegExp|Function} [val] attribute value (will be toString()'ed or executed, otherwise ignored)\n * @return {Boolean}\n */\n JSAPI.prototype.hasAttrLocal = function(localName, val) {\n\n    if (!this.attrs || !Object.keys(this.attrs).length) return false;\n\n    if (!arguments.length) return !!this.attrs;\n\n    var callback;\n\n    switch (val != null && val.constructor && val.constructor.name) {\n        case 'Number':   // same as String\n        case 'String':   callback = stringValueTest; break;\n        case 'RegExp':   callback = regexpValueTest; break;\n        case 'Function': callback = funcValueTest; break;\n        default:         callback = nameTest;\n    }\n    return this.someAttr(callback);\n\n    function nameTest(attr) {\n        return attr.local === localName;\n    }\n\n    function stringValueTest(attr) {\n        return attr.local === localName && val == attr.value;\n    }\n\n    function regexpValueTest(attr) {\n        return attr.local === localName && val.test(attr.value);\n    }\n\n    function funcValueTest(attr) {\n        return attr.local === localName && val(attr.value);\n    }\n\n};\n\n/**\n * Get a specific attribute from an element\n * (by name or name + value).\n *\n * @param {String} name attribute name\n * @param {String} [val] attribute value (will be toString()'ed)\n * @return {Object|Undefined}\n */\n JSAPI.prototype.attr = function(name, val) {\n\n    if (!this.hasAttr() || !arguments.length) return undefined;\n\n    if (val !== undefined) return this.hasAttr(name, val) ? this.attrs[name] : undefined;\n\n    return this.attrs[name];\n\n};\n\n/**\n * Get computed attribute value from an element\n *\n * @param {String} name attribute name\n * @return {Object|Undefined}\n */\n JSAPI.prototype.computedAttr = function(name, val) {\n    /* jshint eqnull: true */\n    if (!arguments.length) return;\n\n    for (var elem = this; elem && (!elem.hasAttr(name) || !elem.attr(name).value); elem = elem.parentNode);\n\n    if (val != null) {\n        return elem ? elem.hasAttr(name, val) : false;\n    } else if (elem && elem.hasAttr(name)) {\n        return elem.attrs[name].value;\n    }\n\n};\n\n/**\n * Remove a specific attribute.\n *\n * @param {String|Array} name attribute name\n * @param {String} [val] attribute value\n * @return {Boolean}\n */\n JSAPI.prototype.removeAttr = function(name, val, recursive) {\n\n    if (!arguments.length) return false;\n\n    if (Array.isArray(name)) {\n        name.forEach(this.removeAttr, this);\n        return false;\n    }\n\n    if (!this.hasAttr(name)) return false;\n\n    if (!recursive && val && this.attrs[name].value !== val) return false;\n\n    delete this.attrs[name];\n\n    if (!Object.keys(this.attrs).length) delete this.attrs;\n\n    return true;\n\n};\n\n/**\n * Add attribute.\n *\n * @param {Object} [attr={}] attribute object\n * @return {Object|Boolean} created attribute or false if no attr was passed in\n */\n JSAPI.prototype.addAttr = function(attr) {\n    attr = attr || {};\n\n    if (attr.name === undefined ||\n        attr.prefix === undefined ||\n        attr.local === undefined\n    ) return false;\n\n    this.attrs = this.attrs || {};\n    this.attrs[attr.name] = attr;\n\n    if(attr.name === 'class') { // newly added class attribute\n        this.class.hasClass();\n    }\n\n    if(attr.name === 'style') { // newly added style attribute\n        this.style.hasStyle();\n    }\n\n    return this.attrs[attr.name];\n\n};\n\n/**\n * Iterates over all attributes.\n *\n * @param {Function} callback callback\n * @param {Object} [context] callback context\n * @return {Boolean} false if there are no any attributes\n */\n JSAPI.prototype.eachAttr = function(callback, context) {\n\n    if (!this.hasAttr()) return false;\n\n    for (var name in this.attrs) {\n        callback.call(context, this.attrs[name]);\n    }\n\n    return true;\n\n};\n\n/**\n * Tests whether some attribute passes the test.\n *\n * @param {Function} callback callback\n * @param {Object} [context] callback context\n * @return {Boolean} false if there are no any attributes\n */\n JSAPI.prototype.someAttr = function(callback, context) {\n\n    if (!this.hasAttr()) return false;\n\n    for (var name in this.attrs) {\n        if (callback.call(context, this.attrs[name])) return true;\n    }\n\n    return false;\n\n};\n\n/**\n * Evaluate a string of CSS selectors against the element and returns matched elements.\n *\n * @param {String} selectors CSS selector(s) string\n * @return {Array} null if no elements matched\n */\n JSAPI.prototype.querySelectorAll = function(selectors) {\n\n   var matchedEls = cssSelect(selectors, this, cssSelectOpts);\n\n   return matchedEls.length > 0 ? matchedEls : null;\n\n};\n\n/**\n * Evaluate a string of CSS selectors against the element and returns only the first matched element.\n *\n * @param {String} selectors CSS selector(s) string\n * @return {Array} null if no element matched\n */\n JSAPI.prototype.querySelector = function(selectors) {\n\n   return cssSelect.selectOne(selectors, this, cssSelectOpts);\n\n};\n\n/**\n * Test if a selector matches a given element.\n *\n * @param {String} selector CSS selector string\n * @return {Boolean} true if element would be selected by selector string, false if it does not\n */\n JSAPI.prototype.matches = function(selector) {\n\n   return cssSelect.is(this, selector, cssSelectOpts);\n\n};\n","'use strict';\n\nvar toStr = Object.prototype.toString;\n\nmodule.exports = function isArguments(value) {\n\tvar str = toStr.call(value);\n\tvar isArgs = str === '[object Arguments]';\n\tif (!isArgs) {\n\t\tisArgs = str !== '[object Array]' &&\n\t\t\tvalue !== null &&\n\t\t\ttypeof value === 'object' &&\n\t\t\ttypeof value.length === 'number' &&\n\t\t\tvalue.length >= 0 &&\n\t\t\ttoStr.call(value.callee) === '[object Function]';\n\t}\n\treturn isArgs;\n};\n","'use strict';\n\n// modified from https://github.com/es-shims/es5-shim\nvar has = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar slice = Array.prototype.slice;\nvar isArgs = require('./isArguments');\nvar isEnumerable = Object.prototype.propertyIsEnumerable;\nvar hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');\nvar hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');\nvar dontEnums = [\n\t'toString',\n\t'toLocaleString',\n\t'valueOf',\n\t'hasOwnProperty',\n\t'isPrototypeOf',\n\t'propertyIsEnumerable',\n\t'constructor'\n];\nvar equalsConstructorPrototype = function (o) {\n\tvar ctor = o.constructor;\n\treturn ctor && ctor.prototype === o;\n};\nvar excludedKeys = {\n\t$applicationCache: true,\n\t$console: true,\n\t$external: true,\n\t$frame: true,\n\t$frameElement: true,\n\t$frames: true,\n\t$innerHeight: true,\n\t$innerWidth: true,\n\t$outerHeight: true,\n\t$outerWidth: true,\n\t$pageXOffset: true,\n\t$pageYOffset: true,\n\t$parent: true,\n\t$scrollLeft: true,\n\t$scrollTop: true,\n\t$scrollX: true,\n\t$scrollY: true,\n\t$self: true,\n\t$webkitIndexedDB: true,\n\t$webkitStorageInfo: true,\n\t$window: true\n};\nvar hasAutomationEqualityBug = (function () {\n\t/* global window */\n\tif (typeof window === 'undefined') { return false; }\n\tfor (var k in window) {\n\t\ttry {\n\t\t\tif (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {\n\t\t\t\ttry {\n\t\t\t\t\tequalsConstructorPrototype(window[k]);\n\t\t\t\t} catch (e) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}());\nvar equalsConstructorPrototypeIfNotBuggy = function (o) {\n\t/* global window */\n\tif (typeof window === 'undefined' || !hasAutomationEqualityBug) {\n\t\treturn equalsConstructorPrototype(o);\n\t}\n\ttry {\n\t\treturn equalsConstructorPrototype(o);\n\t} catch (e) {\n\t\treturn false;\n\t}\n};\n\nvar keysShim = function keys(object) {\n\tvar isObject = object !== null && typeof object === 'object';\n\tvar isFunction = toStr.call(object) === '[object Function]';\n\tvar isArguments = isArgs(object);\n\tvar isString = isObject && toStr.call(object) === '[object String]';\n\tvar theKeys = [];\n\n\tif (!isObject && !isFunction && !isArguments) {\n\t\tthrow new TypeError('Object.keys called on a non-object');\n\t}\n\n\tvar skipProto = hasProtoEnumBug && isFunction;\n\tif (isString && object.length > 0 && !has.call(object, 0)) {\n\t\tfor (var i = 0; i < object.length; ++i) {\n\t\t\ttheKeys.push(String(i));\n\t\t}\n\t}\n\n\tif (isArguments && object.length > 0) {\n\t\tfor (var j = 0; j < object.length; ++j) {\n\t\t\ttheKeys.push(String(j));\n\t\t}\n\t} else {\n\t\tfor (var name in object) {\n\t\t\tif (!(skipProto && name === 'prototype') && has.call(object, name)) {\n\t\t\t\ttheKeys.push(String(name));\n\t\t\t}\n\t\t}\n\t}\n\n\tif (hasDontEnumBug) {\n\t\tvar skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);\n\n\t\tfor (var k = 0; k < dontEnums.length; ++k) {\n\t\t\tif (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {\n\t\t\t\ttheKeys.push(dontEnums[k]);\n\t\t\t}\n\t\t}\n\t}\n\treturn theKeys;\n};\n\nkeysShim.shim = function shimObjectKeys() {\n\tif (Object.keys) {\n\t\tvar keysWorksWithArguments = (function () {\n\t\t\t// Safari 5.0 bug\n\t\t\treturn (Object.keys(arguments) || '').length === 2;\n\t\t}(1, 2));\n\t\tif (!keysWorksWithArguments) {\n\t\t\tvar originalKeys = Object.keys;\n\t\t\tObject.keys = function keys(object) { // eslint-disable-line func-name-matching\n\t\t\t\tif (isArgs(object)) {\n\t\t\t\t\treturn originalKeys(slice.call(object));\n\t\t\t\t} else {\n\t\t\t\t\treturn originalKeys(object);\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t} else {\n\t\tObject.keys = keysShim;\n\t}\n\treturn Object.keys || keysShim;\n};\n\nmodule.exports = keysShim;\n","'use strict';\n\nvar keys = require('object-keys');\nvar hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';\n\nvar toStr = Object.prototype.toString;\nvar concat = Array.prototype.concat;\nvar origDefineProperty = Object.defineProperty;\n\nvar isFunction = function (fn) {\n\treturn typeof fn === 'function' && toStr.call(fn) === '[object Function]';\n};\n\nvar arePropertyDescriptorsSupported = function () {\n\tvar obj = {};\n\ttry {\n\t\torigDefineProperty(obj, 'x', { enumerable: false, value: obj });\n\t\t// eslint-disable-next-line no-unused-vars, no-restricted-syntax\n\t\tfor (var _ in obj) { // jscs:ignore disallowUnusedVariables\n\t\t\treturn false;\n\t\t}\n\t\treturn obj.x === obj;\n\t} catch (e) { /* this is IE 8. */\n\t\treturn false;\n\t}\n};\nvar supportsDescriptors = origDefineProperty && arePropertyDescriptorsSupported();\n\nvar defineProperty = function (object, name, value, predicate) {\n\tif (name in object && (!isFunction(predicate) || !predicate())) {\n\t\treturn;\n\t}\n\tif (supportsDescriptors) {\n\t\torigDefineProperty(object, name, {\n\t\t\tconfigurable: true,\n\t\t\tenumerable: false,\n\t\t\tvalue: value,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\tobject[name] = value;\n\t}\n};\n\nvar defineProperties = function (object, map) {\n\tvar predicates = arguments.length > 2 ? arguments[2] : {};\n\tvar props = keys(map);\n\tif (hasSymbols) {\n\t\tprops = concat.call(props, Object.getOwnPropertySymbols(map));\n\t}\n\tfor (var i = 0; i < props.length; i += 1) {\n\t\tdefineProperty(object, props[i], map[props[i]], predicates[props[i]]);\n\t}\n};\n\ndefineProperties.supportsDescriptors = !!supportsDescriptors;\n\nmodule.exports = defineProperties;\n","'use strict';\n\n/* eslint no-invalid-this: 1 */\n\nvar ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';\nvar slice = Array.prototype.slice;\nvar toStr = Object.prototype.toString;\nvar funcType = '[object Function]';\n\nmodule.exports = function bind(that) {\n    var target = this;\n    if (typeof target !== 'function' || toStr.call(target) !== funcType) {\n        throw new TypeError(ERROR_MESSAGE + target);\n    }\n    var args = slice.call(arguments, 1);\n\n    var bound;\n    var binder = function () {\n        if (this instanceof bound) {\n            var result = target.apply(\n                this,\n                args.concat(slice.call(arguments))\n            );\n            if (Object(result) === result) {\n                return result;\n            }\n            return this;\n        } else {\n            return target.apply(\n                that,\n                args.concat(slice.call(arguments))\n            );\n        }\n    };\n\n    var boundLength = Math.max(0, target.length - args.length);\n    var boundArgs = [];\n    for (var i = 0; i < boundLength; i++) {\n        boundArgs.push('$' + i);\n    }\n\n    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);\n\n    if (target.prototype) {\n        var Empty = function Empty() {};\n        Empty.prototype = target.prototype;\n        bound.prototype = new Empty();\n        Empty.prototype = null;\n    }\n\n    return bound;\n};\n","'use strict';\n\nvar implementation = require('./implementation');\n\nmodule.exports = Function.prototype.bind || implementation;\n","'use strict';\n\nvar bind = require('function-bind');\n\nmodule.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);\n","module.exports = function isPrimitive(value) {\n\treturn value === null || (typeof value !== 'function' && typeof value !== 'object');\n};\n","'use strict';\n\nvar fnToStr = Function.prototype.toString;\n\nvar constructorRegex = /^\\s*class\\b/;\nvar isES6ClassFn = function isES6ClassFunction(value) {\n\ttry {\n\t\tvar fnStr = fnToStr.call(value);\n\t\treturn constructorRegex.test(fnStr);\n\t} catch (e) {\n\t\treturn false; // not a function\n\t}\n};\n\nvar tryFunctionObject = function tryFunctionToStr(value) {\n\ttry {\n\t\tif (isES6ClassFn(value)) { return false; }\n\t\tfnToStr.call(value);\n\t\treturn true;\n\t} catch (e) {\n\t\treturn false;\n\t}\n};\nvar toStr = Object.prototype.toString;\nvar fnClass = '[object Function]';\nvar genClass = '[object GeneratorFunction]';\nvar hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';\n\nmodule.exports = function isCallable(value) {\n\tif (!value) { return false; }\n\tif (typeof value !== 'function' && typeof value !== 'object') { return false; }\n\tif (typeof value === 'function' && !value.prototype) { return true; }\n\tif (hasToStringTag) { return tryFunctionObject(value); }\n\tif (isES6ClassFn(value)) { return false; }\n\tvar strClass = toStr.call(value);\n\treturn strClass === fnClass || strClass === genClass;\n};\n","'use strict';\n\nvar getDay = Date.prototype.getDay;\nvar tryDateObject = function tryDateObject(value) {\n\ttry {\n\t\tgetDay.call(value);\n\t\treturn true;\n\t} catch (e) {\n\t\treturn false;\n\t}\n};\n\nvar toStr = Object.prototype.toString;\nvar dateClass = '[object Date]';\nvar hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';\n\nmodule.exports = function isDateObject(value) {\n\tif (typeof value !== 'object' || value === null) { return false; }\n\treturn hasToStringTag ? tryDateObject(value) : toStr.call(value) === dateClass;\n};\n","'use strict';\n\n/* eslint complexity: [2, 17], max-statements: [2, 33] */\nmodule.exports = function hasSymbols() {\n\tif (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }\n\tif (typeof Symbol.iterator === 'symbol') { return true; }\n\n\tvar obj = {};\n\tvar sym = Symbol('test');\n\tvar symObj = Object(sym);\n\tif (typeof sym === 'string') { return false; }\n\n\tif (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }\n\tif (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }\n\n\t// temp disabled per https://github.com/ljharb/object.assign/issues/17\n\t// if (sym instanceof Symbol) { return false; }\n\t// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4\n\t// if (!(symObj instanceof Symbol)) { return false; }\n\n\t// if (typeof Symbol.prototype.toString !== 'function') { return false; }\n\t// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }\n\n\tvar symVal = 42;\n\tobj[sym] = symVal;\n\tfor (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax\n\tif (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }\n\n\tif (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }\n\n\tvar syms = Object.getOwnPropertySymbols(obj);\n\tif (syms.length !== 1 || syms[0] !== sym) { return false; }\n\n\tif (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }\n\n\tif (typeof Object.getOwnPropertyDescriptor === 'function') {\n\t\tvar descriptor = Object.getOwnPropertyDescriptor(obj, sym);\n\t\tif (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nvar origSymbol = global.Symbol;\nvar hasSymbolSham = require('./shams');\n\nmodule.exports = function hasNativeSymbols() {\n\tif (typeof origSymbol !== 'function') { return false; }\n\tif (typeof Symbol !== 'function') { return false; }\n\tif (typeof origSymbol('foo') !== 'symbol') { return false; }\n\tif (typeof Symbol('bar') !== 'symbol') { return false; }\n\n\treturn hasSymbolSham();\n};\n","'use strict';\n\nvar toStr = Object.prototype.toString;\nvar hasSymbols = require('has-symbols')();\n\nif (hasSymbols) {\n\tvar symToStr = Symbol.prototype.toString;\n\tvar symStringRegex = /^Symbol\\(.*\\)$/;\n\tvar isSymbolObject = function isRealSymbolObject(value) {\n\t\tif (typeof value.valueOf() !== 'symbol') {\n\t\t\treturn false;\n\t\t}\n\t\treturn symStringRegex.test(symToStr.call(value));\n\t};\n\n\tmodule.exports = function isSymbol(value) {\n\t\tif (typeof value === 'symbol') {\n\t\t\treturn true;\n\t\t}\n\t\tif (toStr.call(value) !== '[object Symbol]') {\n\t\t\treturn false;\n\t\t}\n\t\ttry {\n\t\t\treturn isSymbolObject(value);\n\t\t} catch (e) {\n\t\t\treturn false;\n\t\t}\n\t};\n} else {\n\n\tmodule.exports = function isSymbol(value) {\n\t\t// this environment does not support Symbols.\n\t\treturn false && value;\n\t};\n}\n","'use strict';\n\nvar hasSymbols = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol';\n\nvar isPrimitive = require('./helpers/isPrimitive');\nvar isCallable = require('is-callable');\nvar isDate = require('is-date-object');\nvar isSymbol = require('is-symbol');\n\nvar ordinaryToPrimitive = function OrdinaryToPrimitive(O, hint) {\n\tif (typeof O === 'undefined' || O === null) {\n\t\tthrow new TypeError('Cannot call method on ' + O);\n\t}\n\tif (typeof hint !== 'string' || (hint !== 'number' && hint !== 'string')) {\n\t\tthrow new TypeError('hint must be \"string\" or \"number\"');\n\t}\n\tvar methodNames = hint === 'string' ? ['toString', 'valueOf'] : ['valueOf', 'toString'];\n\tvar method, result, i;\n\tfor (i = 0; i < methodNames.length; ++i) {\n\t\tmethod = O[methodNames[i]];\n\t\tif (isCallable(method)) {\n\t\t\tresult = method.call(O);\n\t\t\tif (isPrimitive(result)) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t}\n\tthrow new TypeError('No default value');\n};\n\nvar GetMethod = function GetMethod(O, P) {\n\tvar func = O[P];\n\tif (func !== null && typeof func !== 'undefined') {\n\t\tif (!isCallable(func)) {\n\t\t\tthrow new TypeError(func + ' returned for property ' + P + ' of object ' + O + ' is not a function');\n\t\t}\n\t\treturn func;\n\t}\n\treturn void 0;\n};\n\n// http://www.ecma-international.org/ecma-262/6.0/#sec-toprimitive\nmodule.exports = function ToPrimitive(input) {\n\tif (isPrimitive(input)) {\n\t\treturn input;\n\t}\n\tvar hint = 'default';\n\tif (arguments.length > 1) {\n\t\tif (arguments[1] === String) {\n\t\t\thint = 'string';\n\t\t} else if (arguments[1] === Number) {\n\t\t\thint = 'number';\n\t\t}\n\t}\n\n\tvar exoticToPrim;\n\tif (hasSymbols) {\n\t\tif (Symbol.toPrimitive) {\n\t\t\texoticToPrim = GetMethod(input, Symbol.toPrimitive);\n\t\t} else if (isSymbol(input)) {\n\t\t\texoticToPrim = Symbol.prototype.valueOf;\n\t\t}\n\t}\n\tif (typeof exoticToPrim !== 'undefined') {\n\t\tvar result = exoticToPrim.call(input, hint);\n\t\tif (isPrimitive(result)) {\n\t\t\treturn result;\n\t\t}\n\t\tthrow new TypeError('unable to convert exotic object to primitive');\n\t}\n\tif (hint === 'default' && (isDate(input) || isSymbol(input))) {\n\t\thint = 'string';\n\t}\n\treturn ordinaryToPrimitive(input, hint === 'default' ? 'number' : hint);\n};\n","'use strict';\n\nmodule.exports = require('./es2015');\n","'use strict';\n\n/* globals\n\tSet,\n\tMap,\n\tWeakSet,\n\tWeakMap,\n\n\tPromise,\n\n\tSymbol,\n\tProxy,\n\n\tAtomics,\n\tSharedArrayBuffer,\n\n\tArrayBuffer,\n\tDataView,\n\tUint8Array,\n\tFloat32Array,\n\tFloat64Array,\n\tInt8Array,\n\tInt16Array,\n\tInt32Array,\n\tUint8ClampedArray,\n\tUint16Array,\n\tUint32Array,\n*/\n\nvar undefined; // eslint-disable-line no-shadow-restricted-names\n\nvar ThrowTypeError = Object.getOwnPropertyDescriptor\n\t? (function () { return Object.getOwnPropertyDescriptor(arguments, 'callee').get; }())\n\t: function () { throw new TypeError(); };\n\nvar hasSymbols = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol';\n\nvar getProto = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto\n\nvar generator; // = function * () {};\nvar generatorFunction = generator ? getProto(generator) : undefined;\nvar asyncFn; // async function() {};\nvar asyncFunction = asyncFn ? asyncFn.constructor : undefined;\nvar asyncGen; // async function * () {};\nvar asyncGenFunction = asyncGen ? getProto(asyncGen) : undefined;\nvar asyncGenIterator = asyncGen ? asyncGen() : undefined;\n\nvar TypedArray = typeof Uint8Array === 'undefined' ? undefined : getProto(Uint8Array);\n\nvar INTRINSICS = {\n\t'$ %Array%': Array,\n\t'$ %ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,\n\t'$ %ArrayBufferPrototype%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer.prototype,\n\t'$ %ArrayIteratorPrototype%': hasSymbols ? getProto([][Symbol.iterator]()) : undefined,\n\t'$ %ArrayPrototype%': Array.prototype,\n\t'$ %ArrayProto_entries%': Array.prototype.entries,\n\t'$ %ArrayProto_forEach%': Array.prototype.forEach,\n\t'$ %ArrayProto_keys%': Array.prototype.keys,\n\t'$ %ArrayProto_values%': Array.prototype.values,\n\t'$ %AsyncFromSyncIteratorPrototype%': undefined,\n\t'$ %AsyncFunction%': asyncFunction,\n\t'$ %AsyncFunctionPrototype%': asyncFunction ? asyncFunction.prototype : undefined,\n\t'$ %AsyncGenerator%': asyncGen ? getProto(asyncGenIterator) : undefined,\n\t'$ %AsyncGeneratorFunction%': asyncGenFunction,\n\t'$ %AsyncGeneratorPrototype%': asyncGenFunction ? asyncGenFunction.prototype : undefined,\n\t'$ %AsyncIteratorPrototype%': asyncGenIterator && hasSymbols && Symbol.asyncIterator ? asyncGenIterator[Symbol.asyncIterator]() : undefined,\n\t'$ %Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,\n\t'$ %Boolean%': Boolean,\n\t'$ %BooleanPrototype%': Boolean.prototype,\n\t'$ %DataView%': typeof DataView === 'undefined' ? undefined : DataView,\n\t'$ %DataViewPrototype%': typeof DataView === 'undefined' ? undefined : DataView.prototype,\n\t'$ %Date%': Date,\n\t'$ %DatePrototype%': Date.prototype,\n\t'$ %decodeURI%': decodeURI,\n\t'$ %decodeURIComponent%': decodeURIComponent,\n\t'$ %encodeURI%': encodeURI,\n\t'$ %encodeURIComponent%': encodeURIComponent,\n\t'$ %Error%': Error,\n\t'$ %ErrorPrototype%': Error.prototype,\n\t'$ %eval%': eval, // eslint-disable-line no-eval\n\t'$ %EvalError%': EvalError,\n\t'$ %EvalErrorPrototype%': EvalError.prototype,\n\t'$ %Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,\n\t'$ %Float32ArrayPrototype%': typeof Float32Array === 'undefined' ? undefined : Float32Array.prototype,\n\t'$ %Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,\n\t'$ %Float64ArrayPrototype%': typeof Float64Array === 'undefined' ? undefined : Float64Array.prototype,\n\t'$ %Function%': Function,\n\t'$ %FunctionPrototype%': Function.prototype,\n\t'$ %Generator%': generator ? getProto(generator()) : undefined,\n\t'$ %GeneratorFunction%': generatorFunction,\n\t'$ %GeneratorPrototype%': generatorFunction ? generatorFunction.prototype : undefined,\n\t'$ %Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,\n\t'$ %Int8ArrayPrototype%': typeof Int8Array === 'undefined' ? undefined : Int8Array.prototype,\n\t'$ %Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,\n\t'$ %Int16ArrayPrototype%': typeof Int16Array === 'undefined' ? undefined : Int8Array.prototype,\n\t'$ %Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,\n\t'$ %Int32ArrayPrototype%': typeof Int32Array === 'undefined' ? undefined : Int32Array.prototype,\n\t'$ %isFinite%': isFinite,\n\t'$ %isNaN%': isNaN,\n\t'$ %IteratorPrototype%': hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined,\n\t'$ %JSON%': JSON,\n\t'$ %JSONParse%': JSON.parse,\n\t'$ %Map%': typeof Map === 'undefined' ? undefined : Map,\n\t'$ %MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols ? undefined : getProto(new Map()[Symbol.iterator]()),\n\t'$ %MapPrototype%': typeof Map === 'undefined' ? undefined : Map.prototype,\n\t'$ %Math%': Math,\n\t'$ %Number%': Number,\n\t'$ %NumberPrototype%': Number.prototype,\n\t'$ %Object%': Object,\n\t'$ %ObjectPrototype%': Object.prototype,\n\t'$ %ObjProto_toString%': Object.prototype.toString,\n\t'$ %ObjProto_valueOf%': Object.prototype.valueOf,\n\t'$ %parseFloat%': parseFloat,\n\t'$ %parseInt%': parseInt,\n\t'$ %Promise%': typeof Promise === 'undefined' ? undefined : Promise,\n\t'$ %PromisePrototype%': typeof Promise === 'undefined' ? undefined : Promise.prototype,\n\t'$ %PromiseProto_then%': typeof Promise === 'undefined' ? undefined : Promise.prototype.then,\n\t'$ %Promise_all%': typeof Promise === 'undefined' ? undefined : Promise.all,\n\t'$ %Promise_reject%': typeof Promise === 'undefined' ? undefined : Promise.reject,\n\t'$ %Promise_resolve%': typeof Promise === 'undefined' ? undefined : Promise.resolve,\n\t'$ %Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,\n\t'$ %RangeError%': RangeError,\n\t'$ %RangeErrorPrototype%': RangeError.prototype,\n\t'$ %ReferenceError%': ReferenceError,\n\t'$ %ReferenceErrorPrototype%': ReferenceError.prototype,\n\t'$ %Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,\n\t'$ %RegExp%': RegExp,\n\t'$ %RegExpPrototype%': RegExp.prototype,\n\t'$ %Set%': typeof Set === 'undefined' ? undefined : Set,\n\t'$ %SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols ? undefined : getProto(new Set()[Symbol.iterator]()),\n\t'$ %SetPrototype%': typeof Set === 'undefined' ? undefined : Set.prototype,\n\t'$ %SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,\n\t'$ %SharedArrayBufferPrototype%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer.prototype,\n\t'$ %String%': String,\n\t'$ %StringIteratorPrototype%': hasSymbols ? getProto(''[Symbol.iterator]()) : undefined,\n\t'$ %StringPrototype%': String.prototype,\n\t'$ %Symbol%': hasSymbols ? Symbol : undefined,\n\t'$ %SymbolPrototype%': hasSymbols ? Symbol.prototype : undefined,\n\t'$ %SyntaxError%': SyntaxError,\n\t'$ %SyntaxErrorPrototype%': SyntaxError.prototype,\n\t'$ %ThrowTypeError%': ThrowTypeError,\n\t'$ %TypedArray%': TypedArray,\n\t'$ %TypedArrayPrototype%': TypedArray ? TypedArray.prototype : undefined,\n\t'$ %TypeError%': TypeError,\n\t'$ %TypeErrorPrototype%': TypeError.prototype,\n\t'$ %Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,\n\t'$ %Uint8ArrayPrototype%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array.prototype,\n\t'$ %Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,\n\t'$ %Uint8ClampedArrayPrototype%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray.prototype,\n\t'$ %Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,\n\t'$ %Uint16ArrayPrototype%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array.prototype,\n\t'$ %Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,\n\t'$ %Uint32ArrayPrototype%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array.prototype,\n\t'$ %URIError%': URIError,\n\t'$ %URIErrorPrototype%': URIError.prototype,\n\t'$ %WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,\n\t'$ %WeakMapPrototype%': typeof WeakMap === 'undefined' ? undefined : WeakMap.prototype,\n\t'$ %WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet,\n\t'$ %WeakSetPrototype%': typeof WeakSet === 'undefined' ? undefined : WeakSet.prototype\n};\n\nmodule.exports = function GetIntrinsic(name, allowMissing) {\n\tif (arguments.length > 1 && typeof allowMissing !== 'boolean') {\n\t\tthrow new TypeError('\"allowMissing\" argument must be a boolean');\n\t}\n\n\tvar key = '$ ' + name;\n\tif (!(key in INTRINSICS)) {\n\t\tthrow new SyntaxError('intrinsic ' + name + ' does not exist!');\n\t}\n\n\t// istanbul ignore if // hopefully this is impossible to test :-)\n\tif (typeof INTRINSICS[key] === 'undefined' && !allowMissing) {\n\t\tthrow new TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');\n\t}\n\treturn INTRINSICS[key];\n};\n","var $isNaN = Number.isNaN || function (a) { return a !== a; };\n\nmodule.exports = Number.isFinite || function (x) { return typeof x === 'number' && !$isNaN(x) && x !== Infinity && x !== -Infinity; };\n","var bind = require('function-bind');\nvar has = bind.call(Function.call, Object.prototype.hasOwnProperty);\n\nvar $assign = Object.assign;\n\nmodule.exports = function assign(target, source) {\n\tif ($assign) {\n\t\treturn $assign(target, source);\n\t}\n\n\tfor (var key in source) {\n\t\tif (has(source, key)) {\n\t\t\ttarget[key] = source[key];\n\t\t}\n\t}\n\treturn target;\n};\n","module.exports = function sign(number) {\n\treturn number >= 0 ? 1 : -1;\n};\n","module.exports = function mod(number, modulo) {\n\tvar remain = number % modulo;\n\treturn Math.floor(remain >= 0 ? remain : remain + modulo);\n};\n","module.exports = function isPrimitive(value) {\n\treturn value === null || (typeof value !== 'function' && typeof value !== 'object');\n};\n","'use strict';\n\nvar toStr = Object.prototype.toString;\n\nvar isPrimitive = require('./helpers/isPrimitive');\n\nvar isCallable = require('is-callable');\n\n// http://ecma-international.org/ecma-262/5.1/#sec-8.12.8\nvar ES5internalSlots = {\n\t'[[DefaultValue]]': function (O) {\n\t\tvar actualHint;\n\t\tif (arguments.length > 1) {\n\t\t\tactualHint = arguments[1];\n\t\t} else {\n\t\t\tactualHint = toStr.call(O) === '[object Date]' ? String : Number;\n\t\t}\n\n\t\tif (actualHint === String || actualHint === Number) {\n\t\t\tvar methods = actualHint === String ? ['toString', 'valueOf'] : ['valueOf', 'toString'];\n\t\t\tvar value, i;\n\t\t\tfor (i = 0; i < methods.length; ++i) {\n\t\t\t\tif (isCallable(O[methods[i]])) {\n\t\t\t\t\tvalue = O[methods[i]]();\n\t\t\t\t\tif (isPrimitive(value)) {\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthrow new TypeError('No default value');\n\t\t}\n\t\tthrow new TypeError('invalid [[DefaultValue]] hint supplied');\n\t}\n};\n\n// http://ecma-international.org/ecma-262/5.1/#sec-9.1\nmodule.exports = function ToPrimitive(input) {\n\tif (isPrimitive(input)) {\n\t\treturn input;\n\t}\n\tif (arguments.length > 1) {\n\t\treturn ES5internalSlots['[[DefaultValue]]'](input, arguments[1]);\n\t}\n\treturn ES5internalSlots['[[DefaultValue]]'](input);\n};\n","'use strict';\n\nvar GetIntrinsic = require('./GetIntrinsic');\n\nvar $Object = GetIntrinsic('%Object%');\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar $String = GetIntrinsic('%String%');\n\nvar $isNaN = require('./helpers/isNaN');\nvar $isFinite = require('./helpers/isFinite');\n\nvar sign = require('./helpers/sign');\nvar mod = require('./helpers/mod');\n\nvar IsCallable = require('is-callable');\nvar toPrimitive = require('es-to-primitive/es5');\n\nvar has = require('has');\n\n// https://es5.github.io/#x9\nvar ES5 = {\n\tToPrimitive: toPrimitive,\n\n\tToBoolean: function ToBoolean(value) {\n\t\treturn !!value;\n\t},\n\tToNumber: function ToNumber(value) {\n\t\treturn +value; // eslint-disable-line no-implicit-coercion\n\t},\n\tToInteger: function ToInteger(value) {\n\t\tvar number = this.ToNumber(value);\n\t\tif ($isNaN(number)) { return 0; }\n\t\tif (number === 0 || !$isFinite(number)) { return number; }\n\t\treturn sign(number) * Math.floor(Math.abs(number));\n\t},\n\tToInt32: function ToInt32(x) {\n\t\treturn this.ToNumber(x) >> 0;\n\t},\n\tToUint32: function ToUint32(x) {\n\t\treturn this.ToNumber(x) >>> 0;\n\t},\n\tToUint16: function ToUint16(value) {\n\t\tvar number = this.ToNumber(value);\n\t\tif ($isNaN(number) || number === 0 || !$isFinite(number)) { return 0; }\n\t\tvar posInt = sign(number) * Math.floor(Math.abs(number));\n\t\treturn mod(posInt, 0x10000);\n\t},\n\tToString: function ToString(value) {\n\t\treturn $String(value);\n\t},\n\tToObject: function ToObject(value) {\n\t\tthis.CheckObjectCoercible(value);\n\t\treturn $Object(value);\n\t},\n\tCheckObjectCoercible: function CheckObjectCoercible(value, optMessage) {\n\t\t/* jshint eqnull:true */\n\t\tif (value == null) {\n\t\t\tthrow new $TypeError(optMessage || 'Cannot call method on ' + value);\n\t\t}\n\t\treturn value;\n\t},\n\tIsCallable: IsCallable,\n\tSameValue: function SameValue(x, y) {\n\t\tif (x === y) { // 0 === -0, but they are not identical.\n\t\t\tif (x === 0) { return 1 / x === 1 / y; }\n\t\t\treturn true;\n\t\t}\n\t\treturn $isNaN(x) && $isNaN(y);\n\t},\n\n\t// https://www.ecma-international.org/ecma-262/5.1/#sec-8\n\tType: function Type(x) {\n\t\tif (x === null) {\n\t\t\treturn 'Null';\n\t\t}\n\t\tif (typeof x === 'undefined') {\n\t\t\treturn 'Undefined';\n\t\t}\n\t\tif (typeof x === 'function' || typeof x === 'object') {\n\t\t\treturn 'Object';\n\t\t}\n\t\tif (typeof x === 'number') {\n\t\t\treturn 'Number';\n\t\t}\n\t\tif (typeof x === 'boolean') {\n\t\t\treturn 'Boolean';\n\t\t}\n\t\tif (typeof x === 'string') {\n\t\t\treturn 'String';\n\t\t}\n\t},\n\n\t// https://ecma-international.org/ecma-262/6.0/#sec-property-descriptor-specification-type\n\tIsPropertyDescriptor: function IsPropertyDescriptor(Desc) {\n\t\tif (this.Type(Desc) !== 'Object') {\n\t\t\treturn false;\n\t\t}\n\t\tvar allowed = {\n\t\t\t'[[Configurable]]': true,\n\t\t\t'[[Enumerable]]': true,\n\t\t\t'[[Get]]': true,\n\t\t\t'[[Set]]': true,\n\t\t\t'[[Value]]': true,\n\t\t\t'[[Writable]]': true\n\t\t};\n\t\t// jscs:disable\n\t\tfor (var key in Desc) { // eslint-disable-line\n\t\t\tif (has(Desc, key) && !allowed[key]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t// jscs:enable\n\t\tvar isData = has(Desc, '[[Value]]');\n\t\tvar IsAccessor = has(Desc, '[[Get]]') || has(Desc, '[[Set]]');\n\t\tif (isData && IsAccessor) {\n\t\t\tthrow new $TypeError('Property Descriptors may not be both accessor and data descriptors');\n\t\t}\n\t\treturn true;\n\t},\n\n\t// https://ecma-international.org/ecma-262/5.1/#sec-8.10.1\n\tIsAccessorDescriptor: function IsAccessorDescriptor(Desc) {\n\t\tif (typeof Desc === 'undefined') {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!this.IsPropertyDescriptor(Desc)) {\n\t\t\tthrow new $TypeError('Desc must be a Property Descriptor');\n\t\t}\n\n\t\tif (!has(Desc, '[[Get]]') && !has(Desc, '[[Set]]')) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t// https://ecma-international.org/ecma-262/5.1/#sec-8.10.2\n\tIsDataDescriptor: function IsDataDescriptor(Desc) {\n\t\tif (typeof Desc === 'undefined') {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!this.IsPropertyDescriptor(Desc)) {\n\t\t\tthrow new $TypeError('Desc must be a Property Descriptor');\n\t\t}\n\n\t\tif (!has(Desc, '[[Value]]') && !has(Desc, '[[Writable]]')) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t// https://ecma-international.org/ecma-262/5.1/#sec-8.10.3\n\tIsGenericDescriptor: function IsGenericDescriptor(Desc) {\n\t\tif (typeof Desc === 'undefined') {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!this.IsPropertyDescriptor(Desc)) {\n\t\t\tthrow new $TypeError('Desc must be a Property Descriptor');\n\t\t}\n\n\t\tif (!this.IsAccessorDescriptor(Desc) && !this.IsDataDescriptor(Desc)) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t},\n\n\t// https://ecma-international.org/ecma-262/5.1/#sec-8.10.4\n\tFromPropertyDescriptor: function FromPropertyDescriptor(Desc) {\n\t\tif (typeof Desc === 'undefined') {\n\t\t\treturn Desc;\n\t\t}\n\n\t\tif (!this.IsPropertyDescriptor(Desc)) {\n\t\t\tthrow new $TypeError('Desc must be a Property Descriptor');\n\t\t}\n\n\t\tif (this.IsDataDescriptor(Desc)) {\n\t\t\treturn {\n\t\t\t\tvalue: Desc['[[Value]]'],\n\t\t\t\twritable: !!Desc['[[Writable]]'],\n\t\t\t\tenumerable: !!Desc['[[Enumerable]]'],\n\t\t\t\tconfigurable: !!Desc['[[Configurable]]']\n\t\t\t};\n\t\t} else if (this.IsAccessorDescriptor(Desc)) {\n\t\t\treturn {\n\t\t\t\tget: Desc['[[Get]]'],\n\t\t\t\tset: Desc['[[Set]]'],\n\t\t\t\tenumerable: !!Desc['[[Enumerable]]'],\n\t\t\t\tconfigurable: !!Desc['[[Configurable]]']\n\t\t\t};\n\t\t} else {\n\t\t\tthrow new $TypeError('FromPropertyDescriptor must be called with a fully populated Property Descriptor');\n\t\t}\n\t},\n\n\t// https://ecma-international.org/ecma-262/5.1/#sec-8.10.5\n\tToPropertyDescriptor: function ToPropertyDescriptor(Obj) {\n\t\tif (this.Type(Obj) !== 'Object') {\n\t\t\tthrow new $TypeError('ToPropertyDescriptor requires an object');\n\t\t}\n\n\t\tvar desc = {};\n\t\tif (has(Obj, 'enumerable')) {\n\t\t\tdesc['[[Enumerable]]'] = this.ToBoolean(Obj.enumerable);\n\t\t}\n\t\tif (has(Obj, 'configurable')) {\n\t\t\tdesc['[[Configurable]]'] = this.ToBoolean(Obj.configurable);\n\t\t}\n\t\tif (has(Obj, 'value')) {\n\t\t\tdesc['[[Value]]'] = Obj.value;\n\t\t}\n\t\tif (has(Obj, 'writable')) {\n\t\t\tdesc['[[Writable]]'] = this.ToBoolean(Obj.writable);\n\t\t}\n\t\tif (has(Obj, 'get')) {\n\t\t\tvar getter = Obj.get;\n\t\t\tif (typeof getter !== 'undefined' && !this.IsCallable(getter)) {\n\t\t\t\tthrow new TypeError('getter must be a function');\n\t\t\t}\n\t\t\tdesc['[[Get]]'] = getter;\n\t\t}\n\t\tif (has(Obj, 'set')) {\n\t\t\tvar setter = Obj.set;\n\t\t\tif (typeof setter !== 'undefined' && !this.IsCallable(setter)) {\n\t\t\t\tthrow new $TypeError('setter must be a function');\n\t\t\t}\n\t\t\tdesc['[[Set]]'] = setter;\n\t\t}\n\n\t\tif ((has(desc, '[[Get]]') || has(desc, '[[Set]]')) && (has(desc, '[[Value]]') || has(desc, '[[Writable]]'))) {\n\t\t\tthrow new $TypeError('Invalid property descriptor. Cannot both specify accessors and a value or writable attribute');\n\t\t}\n\t\treturn desc;\n\t}\n};\n\nmodule.exports = ES5;\n","'use strict';\n\nvar has = require('has');\nvar regexExec = RegExp.prototype.exec;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar tryRegexExecCall = function tryRegexExec(value) {\n\ttry {\n\t\tvar lastIndex = value.lastIndex;\n\t\tvalue.lastIndex = 0;\n\n\t\tregexExec.call(value);\n\t\treturn true;\n\t} catch (e) {\n\t\treturn false;\n\t} finally {\n\t\tvalue.lastIndex = lastIndex;\n\t}\n};\nvar toStr = Object.prototype.toString;\nvar regexClass = '[object RegExp]';\nvar hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';\n\nmodule.exports = function isRegex(value) {\n\tif (!value || typeof value !== 'object') {\n\t\treturn false;\n\t}\n\tif (!hasToStringTag) {\n\t\treturn toStr.call(value) === regexClass;\n\t}\n\n\tvar descriptor = gOPD(value, 'lastIndex');\n\tvar hasLastIndexDataProperty = descriptor && has(descriptor, 'value');\n\tif (!hasLastIndexDataProperty) {\n\t\treturn false;\n\t}\n\n\treturn tryRegexExecCall(value);\n};\n","'use strict';\n\nvar has = require('has');\nvar toPrimitive = require('es-to-primitive/es6');\n\nvar GetIntrinsic = require('./GetIntrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar $SyntaxError = GetIntrinsic('%SyntaxError%');\nvar $Array = GetIntrinsic('%Array%');\nvar $String = GetIntrinsic('%String%');\nvar $Object = GetIntrinsic('%Object%');\nvar $Number = GetIntrinsic('%Number%');\nvar $Symbol = GetIntrinsic('%Symbol%', true);\nvar $RegExp = GetIntrinsic('%RegExp%');\n\nvar hasSymbols = !!$Symbol;\n\nvar $isNaN = require('./helpers/isNaN');\nvar $isFinite = require('./helpers/isFinite');\nvar MAX_SAFE_INTEGER = $Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;\n\nvar assign = require('./helpers/assign');\nvar sign = require('./helpers/sign');\nvar mod = require('./helpers/mod');\nvar isPrimitive = require('./helpers/isPrimitive');\nvar parseInteger = parseInt;\nvar bind = require('function-bind');\nvar arraySlice = bind.call(Function.call, $Array.prototype.slice);\nvar strSlice = bind.call(Function.call, $String.prototype.slice);\nvar isBinary = bind.call(Function.call, $RegExp.prototype.test, /^0b[01]+$/i);\nvar isOctal = bind.call(Function.call, $RegExp.prototype.test, /^0o[0-7]+$/i);\nvar regexExec = bind.call(Function.call, $RegExp.prototype.exec);\nvar nonWS = ['\\u0085', '\\u200b', '\\ufffe'].join('');\nvar nonWSregex = new $RegExp('[' + nonWS + ']', 'g');\nvar hasNonWS = bind.call(Function.call, $RegExp.prototype.test, nonWSregex);\nvar invalidHexLiteral = /^[-+]0x[0-9a-f]+$/i;\nvar isInvalidHexLiteral = bind.call(Function.call, $RegExp.prototype.test, invalidHexLiteral);\nvar $charCodeAt = bind.call(Function.call, $String.prototype.charCodeAt);\n\nvar toStr = bind.call(Function.call, Object.prototype.toString);\n\nvar $floor = Math.floor;\nvar $abs = Math.abs;\n\nvar $ObjectCreate = Object.create;\nvar $gOPD = $Object.getOwnPropertyDescriptor;\n\nvar $isExtensible = $Object.isExtensible;\n\n// whitespace from: http://es5.github.io/#x15.5.4.20\n// implementation from https://github.com/es-shims/es5-shim/blob/v3.4.0/es5-shim.js#L1304-L1324\nvar ws = [\n\t'\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003',\n\t'\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028',\n\t'\\u2029\\uFEFF'\n].join('');\nvar trimRegex = new RegExp('(^[' + ws + ']+)|([' + ws + ']+$)', 'g');\nvar replace = bind.call(Function.call, $String.prototype.replace);\nvar trim = function (value) {\n\treturn replace(value, trimRegex, '');\n};\n\nvar ES5 = require('./es5');\n\nvar hasRegExpMatcher = require('is-regex');\n\n// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-abstract-operations\nvar ES6 = assign(assign({}, ES5), {\n\n\t// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-call-f-v-args\n\tCall: function Call(F, V) {\n\t\tvar args = arguments.length > 2 ? arguments[2] : [];\n\t\tif (!this.IsCallable(F)) {\n\t\t\tthrow new $TypeError(F + ' is not a function');\n\t\t}\n\t\treturn F.apply(V, args);\n\t},\n\n\t// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-toprimitive\n\tToPrimitive: toPrimitive,\n\n\t// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-toboolean\n\t// ToBoolean: ES5.ToBoolean,\n\n\t// https://ecma-international.org/ecma-262/6.0/#sec-tonumber\n\tToNumber: function ToNumber(argument) {\n\t\tvar value = isPrimitive(argument) ? argument : toPrimitive(argument, $Number);\n\t\tif (typeof value === 'symbol') {\n\t\t\tthrow new $TypeError('Cannot convert a Symbol value to a number');\n\t\t}\n\t\tif (typeof value === 'string') {\n\t\t\tif (isBinary(value)) {\n\t\t\t\treturn this.ToNumber(parseInteger(strSlice(value, 2), 2));\n\t\t\t} else if (isOctal(value)) {\n\t\t\t\treturn this.ToNumber(parseInteger(strSlice(value, 2), 8));\n\t\t\t} else if (hasNonWS(value) || isInvalidHexLiteral(value)) {\n\t\t\t\treturn NaN;\n\t\t\t} else {\n\t\t\t\tvar trimmed = trim(value);\n\t\t\t\tif (trimmed !== value) {\n\t\t\t\t\treturn this.ToNumber(trimmed);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $Number(value);\n\t},\n\n\t// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tointeger\n\t// ToInteger: ES5.ToNumber,\n\n\t// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-toint32\n\t// ToInt32: ES5.ToInt32,\n\n\t// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-touint32\n\t// ToUint32: ES5.ToUint32,\n\n\t// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-toint16\n\tToInt16: function ToInt16(argument) {\n\t\tvar int16bit = this.ToUint16(argument);\n\t\treturn int16bit >= 0x8000 ? int16bit - 0x10000 : int16bit;\n\t},\n\n\t// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-touint16\n\t// ToUint16: ES5.ToUint16,\n\n\t// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-toint8\n\tToInt8: function ToInt8(argument) {\n\t\tvar int8bit = this.ToUint8(argument);\n\t\treturn int8bit >= 0x80 ? int8bit - 0x100 : int8bit;\n\t},\n\n\t// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-touint8\n\tToUint8: function ToUint8(argument) {\n\t\tvar number = this.ToNumber(argument);\n\t\tif ($isNaN(number) || number === 0 || !$isFinite(number)) { return 0; }\n\t\tvar posInt = sign(number) * $floor($abs(number));\n\t\treturn mod(posInt, 0x100);\n\t},\n\n\t// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-touint8clamp\n\tToUint8Clamp: function ToUint8Clamp(argument) {\n\t\tvar number = this.ToNumber(argument);\n\t\tif ($isNaN(number) || number <= 0) { return 0; }\n\t\tif (number >= 0xFF) { return 0xFF; }\n\t\tvar f = $floor(argument);\n\t\tif (f + 0.5 < number) { return f + 1; }\n\t\tif (number < f + 0.5) { return f; }\n\t\tif (f % 2 !== 0) { return f + 1; }\n\t\treturn f;\n\t},\n\n\t// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tostring\n\tToString: function ToString(argument) {\n\t\tif (typeof argument === 'symbol') {\n\t\t\tthrow new $TypeError('Cannot convert a Symbol value to a string');\n\t\t}\n\t\treturn $String(argument);\n\t},\n\n\t// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-toobject\n\tToObject: function ToObject(value) {\n\t\tthis.RequireObjectCoercible(value);\n\t\treturn $Object(value);\n\t},\n\n\t// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-topropertykey\n\tToPropertyKey: function ToPropertyKey(argument) {\n\t\tvar key = this.ToPrimitive(argument, $String);\n\t\treturn typeof key === 'symbol' ? key : this.ToString(key);\n\t},\n\n\t// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength\n\tToLength: function ToLength(argument) {\n\t\tvar len = this.ToInteger(argument);\n\t\tif (len <= 0) { return 0; } // includes converting -0 to +0\n\t\tif (len > MAX_SAFE_INTEGER) { return MAX_SAFE_INTEGER; }\n\t\treturn len;\n\t},\n\n\t// https://ecma-international.org/ecma-262/6.0/#sec-canonicalnumericindexstring\n\tCanonicalNumericIndexString: function CanonicalNumericIndexString(argument) {\n\t\tif (toStr(argument) !== '[object String]') {\n\t\t\tthrow new $TypeError('must be a string');\n\t\t}\n\t\tif (argument === '-0') { return -0; }\n\t\tvar n = this.ToNumber(argument);\n\t\tif (this.SameValue(this.ToString(n), argument)) { return n; }\n\t\treturn void 0;\n\t},\n\n\t// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-requireobjectcoercible\n\tRequireObjectCoercible: ES5.CheckObjectCoercible,\n\n\t// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isarray\n\tIsArray: $Array.isArray || function IsArray(argument) {\n\t\treturn toStr(argument) === '[object Array]';\n\t},\n\n\t// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-iscallable\n\t// IsCallable: ES5.IsCallable,\n\n\t// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isconstructor\n\tIsConstructor: function IsConstructor(argument) {\n\t\treturn typeof argument === 'function' && !!argument.prototype; // unfortunately there's no way to truly check this without try/catch `new argument`\n\t},\n\n\t// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isextensible-o\n\tIsExtensible: Object.preventExtensions\n\t\t? function IsExtensible(obj) {\n\t\t\tif (isPrimitive(obj)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn $isExtensible(obj);\n\t\t}\n\t\t: function isExtensible(obj) { return true; }, // eslint-disable-line no-unused-vars\n\n\t// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isinteger\n\tIsInteger: function IsInteger(argument) {\n\t\tif (typeof argument !== 'number' || $isNaN(argument) || !$isFinite(argument)) {\n\t\t\treturn false;\n\t\t}\n\t\tvar abs = $abs(argument);\n\t\treturn $floor(abs) === abs;\n\t},\n\n\t// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ispropertykey\n\tIsPropertyKey: function IsPropertyKey(argument) {\n\t\treturn typeof argument === 'string' || typeof argument === 'symbol';\n\t},\n\n\t// https://ecma-international.org/ecma-262/6.0/#sec-isregexp\n\tIsRegExp: function IsRegExp(argument) {\n\t\tif (!argument || typeof argument !== 'object') {\n\t\t\treturn false;\n\t\t}\n\t\tif (hasSymbols) {\n\t\t\tvar isRegExp = argument[$Symbol.match];\n\t\t\tif (typeof isRegExp !== 'undefined') {\n\t\t\t\treturn ES5.ToBoolean(isRegExp);\n\t\t\t}\n\t\t}\n\t\treturn hasRegExpMatcher(argument);\n\t},\n\n\t// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevalue\n\t// SameValue: ES5.SameValue,\n\n\t// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero\n\tSameValueZero: function SameValueZero(x, y) {\n\t\treturn (x === y) || ($isNaN(x) && $isNaN(y));\n\t},\n\n\t/**\n\t * 7.3.2 GetV (V, P)\n\t * 1. Assert: IsPropertyKey(P) is true.\n\t * 2. Let O be ToObject(V).\n\t * 3. ReturnIfAbrupt(O).\n\t * 4. Return O.[[Get]](P, V).\n\t */\n\tGetV: function GetV(V, P) {\n\t\t// 7.3.2.1\n\t\tif (!this.IsPropertyKey(P)) {\n\t\t\tthrow new $TypeError('Assertion failed: IsPropertyKey(P) is not true');\n\t\t}\n\n\t\t// 7.3.2.2-3\n\t\tvar O = this.ToObject(V);\n\n\t\t// 7.3.2.4\n\t\treturn O[P];\n\t},\n\n\t/**\n\t * 7.3.9 - https://ecma-international.org/ecma-262/6.0/#sec-getmethod\n\t * 1. Assert: IsPropertyKey(P) is true.\n\t * 2. Let func be GetV(O, P).\n\t * 3. ReturnIfAbrupt(func).\n\t * 4. If func is either undefined or null, return undefined.\n\t * 5. If IsCallable(func) is false, throw a TypeError exception.\n\t * 6. Return func.\n\t */\n\tGetMethod: function GetMethod(O, P) {\n\t\t// 7.3.9.1\n\t\tif (!this.IsPropertyKey(P)) {\n\t\t\tthrow new $TypeError('Assertion failed: IsPropertyKey(P) is not true');\n\t\t}\n\n\t\t// 7.3.9.2\n\t\tvar func = this.GetV(O, P);\n\n\t\t// 7.3.9.4\n\t\tif (func == null) {\n\t\t\treturn void 0;\n\t\t}\n\n\t\t// 7.3.9.5\n\t\tif (!this.IsCallable(func)) {\n\t\t\tthrow new $TypeError(P + 'is not a function');\n\t\t}\n\n\t\t// 7.3.9.6\n\t\treturn func;\n\t},\n\n\t/**\n\t * 7.3.1 Get (O, P) - https://ecma-international.org/ecma-262/6.0/#sec-get-o-p\n\t * 1. Assert: Type(O) is Object.\n\t * 2. Assert: IsPropertyKey(P) is true.\n\t * 3. Return O.[[Get]](P, O).\n\t */\n\tGet: function Get(O, P) {\n\t\t// 7.3.1.1\n\t\tif (this.Type(O) !== 'Object') {\n\t\t\tthrow new $TypeError('Assertion failed: Type(O) is not Object');\n\t\t}\n\t\t// 7.3.1.2\n\t\tif (!this.IsPropertyKey(P)) {\n\t\t\tthrow new $TypeError('Assertion failed: IsPropertyKey(P) is not true');\n\t\t}\n\t\t// 7.3.1.3\n\t\treturn O[P];\n\t},\n\n\tType: function Type(x) {\n\t\tif (typeof x === 'symbol') {\n\t\t\treturn 'Symbol';\n\t\t}\n\t\treturn ES5.Type(x);\n\t},\n\n\t// https://ecma-international.org/ecma-262/6.0/#sec-speciesconstructor\n\tSpeciesConstructor: function SpeciesConstructor(O, defaultConstructor) {\n\t\tif (this.Type(O) !== 'Object') {\n\t\t\tthrow new $TypeError('Assertion failed: Type(O) is not Object');\n\t\t}\n\t\tvar C = O.constructor;\n\t\tif (typeof C === 'undefined') {\n\t\t\treturn defaultConstructor;\n\t\t}\n\t\tif (this.Type(C) !== 'Object') {\n\t\t\tthrow new $TypeError('O.constructor is not an Object');\n\t\t}\n\t\tvar S = hasSymbols && $Symbol.species ? C[$Symbol.species] : void 0;\n\t\tif (S == null) {\n\t\t\treturn defaultConstructor;\n\t\t}\n\t\tif (this.IsConstructor(S)) {\n\t\t\treturn S;\n\t\t}\n\t\tthrow new $TypeError('no constructor found');\n\t},\n\n\t// https://ecma-international.org/ecma-262/6.0/#sec-completepropertydescriptor\n\tCompletePropertyDescriptor: function CompletePropertyDescriptor(Desc) {\n\t\tif (!this.IsPropertyDescriptor(Desc)) {\n\t\t\tthrow new $TypeError('Desc must be a Property Descriptor');\n\t\t}\n\n\t\tif (this.IsGenericDescriptor(Desc) || this.IsDataDescriptor(Desc)) {\n\t\t\tif (!has(Desc, '[[Value]]')) {\n\t\t\t\tDesc['[[Value]]'] = void 0;\n\t\t\t}\n\t\t\tif (!has(Desc, '[[Writable]]')) {\n\t\t\t\tDesc['[[Writable]]'] = false;\n\t\t\t}\n\t\t} else {\n\t\t\tif (!has(Desc, '[[Get]]')) {\n\t\t\t\tDesc['[[Get]]'] = void 0;\n\t\t\t}\n\t\t\tif (!has(Desc, '[[Set]]')) {\n\t\t\t\tDesc['[[Set]]'] = void 0;\n\t\t\t}\n\t\t}\n\t\tif (!has(Desc, '[[Enumerable]]')) {\n\t\t\tDesc['[[Enumerable]]'] = false;\n\t\t}\n\t\tif (!has(Desc, '[[Configurable]]')) {\n\t\t\tDesc['[[Configurable]]'] = false;\n\t\t}\n\t\treturn Desc;\n\t},\n\n\t// https://ecma-international.org/ecma-262/6.0/#sec-set-o-p-v-throw\n\tSet: function Set(O, P, V, Throw) {\n\t\tif (this.Type(O) !== 'Object') {\n\t\t\tthrow new $TypeError('O must be an Object');\n\t\t}\n\t\tif (!this.IsPropertyKey(P)) {\n\t\t\tthrow new $TypeError('P must be a Property Key');\n\t\t}\n\t\tif (this.Type(Throw) !== 'Boolean') {\n\t\t\tthrow new $TypeError('Throw must be a Boolean');\n\t\t}\n\t\tif (Throw) {\n\t\t\tO[P] = V;\n\t\t\treturn true;\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tO[P] = V;\n\t\t\t} catch (e) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t},\n\n\t// https://ecma-international.org/ecma-262/6.0/#sec-hasownproperty\n\tHasOwnProperty: function HasOwnProperty(O, P) {\n\t\tif (this.Type(O) !== 'Object') {\n\t\t\tthrow new $TypeError('O must be an Object');\n\t\t}\n\t\tif (!this.IsPropertyKey(P)) {\n\t\t\tthrow new $TypeError('P must be a Property Key');\n\t\t}\n\t\treturn has(O, P);\n\t},\n\n\t// https://ecma-international.org/ecma-262/6.0/#sec-hasproperty\n\tHasProperty: function HasProperty(O, P) {\n\t\tif (this.Type(O) !== 'Object') {\n\t\t\tthrow new $TypeError('O must be an Object');\n\t\t}\n\t\tif (!this.IsPropertyKey(P)) {\n\t\t\tthrow new $TypeError('P must be a Property Key');\n\t\t}\n\t\treturn P in O;\n\t},\n\n\t// https://ecma-international.org/ecma-262/6.0/#sec-isconcatspreadable\n\tIsConcatSpreadable: function IsConcatSpreadable(O) {\n\t\tif (this.Type(O) !== 'Object') {\n\t\t\treturn false;\n\t\t}\n\t\tif (hasSymbols && typeof $Symbol.isConcatSpreadable === 'symbol') {\n\t\t\tvar spreadable = this.Get(O, Symbol.isConcatSpreadable);\n\t\t\tif (typeof spreadable !== 'undefined') {\n\t\t\t\treturn this.ToBoolean(spreadable);\n\t\t\t}\n\t\t}\n\t\treturn this.IsArray(O);\n\t},\n\n\t// https://ecma-international.org/ecma-262/6.0/#sec-invoke\n\tInvoke: function Invoke(O, P) {\n\t\tif (!this.IsPropertyKey(P)) {\n\t\t\tthrow new $TypeError('P must be a Property Key');\n\t\t}\n\t\tvar argumentsList = arraySlice(arguments, 2);\n\t\tvar func = this.GetV(O, P);\n\t\treturn this.Call(func, O, argumentsList);\n\t},\n\n\t// https://ecma-international.org/ecma-262/6.0/#sec-getiterator\n\tGetIterator: function GetIterator(obj, method) {\n\t\tif (!hasSymbols) {\n\t\t\tthrow new SyntaxError('ES.GetIterator depends on native iterator support.');\n\t\t}\n\n\t\tvar actualMethod = method;\n\t\tif (arguments.length < 2) {\n\t\t\tactualMethod = this.GetMethod(obj, $Symbol.iterator);\n\t\t}\n\t\tvar iterator = this.Call(actualMethod, obj);\n\t\tif (this.Type(iterator) !== 'Object') {\n\t\t\tthrow new $TypeError('iterator must return an object');\n\t\t}\n\n\t\treturn iterator;\n\t},\n\n\t// https://ecma-international.org/ecma-262/6.0/#sec-iteratornext\n\tIteratorNext: function IteratorNext(iterator, value) {\n\t\tvar result = this.Invoke(iterator, 'next', arguments.length < 2 ? [] : [value]);\n\t\tif (this.Type(result) !== 'Object') {\n\t\t\tthrow new $TypeError('iterator next must return an object');\n\t\t}\n\t\treturn result;\n\t},\n\n\t// https://ecma-international.org/ecma-262/6.0/#sec-iteratorcomplete\n\tIteratorComplete: function IteratorComplete(iterResult) {\n\t\tif (this.Type(iterResult) !== 'Object') {\n\t\t\tthrow new $TypeError('Assertion failed: Type(iterResult) is not Object');\n\t\t}\n\t\treturn this.ToBoolean(this.Get(iterResult, 'done'));\n\t},\n\n\t// https://ecma-international.org/ecma-262/6.0/#sec-iteratorvalue\n\tIteratorValue: function IteratorValue(iterResult) {\n\t\tif (this.Type(iterResult) !== 'Object') {\n\t\t\tthrow new $TypeError('Assertion failed: Type(iterResult) is not Object');\n\t\t}\n\t\treturn this.Get(iterResult, 'value');\n\t},\n\n\t// https://ecma-international.org/ecma-262/6.0/#sec-iteratorstep\n\tIteratorStep: function IteratorStep(iterator) {\n\t\tvar result = this.IteratorNext(iterator);\n\t\tvar done = this.IteratorComplete(result);\n\t\treturn done === true ? false : result;\n\t},\n\n\t// https://ecma-international.org/ecma-262/6.0/#sec-iteratorclose\n\tIteratorClose: function IteratorClose(iterator, completion) {\n\t\tif (this.Type(iterator) !== 'Object') {\n\t\t\tthrow new $TypeError('Assertion failed: Type(iterator) is not Object');\n\t\t}\n\t\tif (!this.IsCallable(completion)) {\n\t\t\tthrow new $TypeError('Assertion failed: completion is not a thunk for a Completion Record');\n\t\t}\n\t\tvar completionThunk = completion;\n\n\t\tvar iteratorReturn = this.GetMethod(iterator, 'return');\n\n\t\tif (typeof iteratorReturn === 'undefined') {\n\t\t\treturn completionThunk();\n\t\t}\n\n\t\tvar completionRecord;\n\t\ttry {\n\t\t\tvar innerResult = this.Call(iteratorReturn, iterator, []);\n\t\t} catch (e) {\n\t\t\t// if we hit here, then \"e\" is the innerResult completion that needs re-throwing\n\n\t\t\t// if the completion is of type \"throw\", this will throw.\n\t\t\tcompletionRecord = completionThunk();\n\t\t\tcompletionThunk = null; // ensure it's not called twice.\n\n\t\t\t// if not, then return the innerResult completion\n\t\t\tthrow e;\n\t\t}\n\t\tcompletionRecord = completionThunk(); // if innerResult worked, then throw if the completion does\n\t\tcompletionThunk = null; // ensure it's not called twice.\n\n\t\tif (this.Type(innerResult) !== 'Object') {\n\t\t\tthrow new $TypeError('iterator .return must return an object');\n\t\t}\n\n\t\treturn completionRecord;\n\t},\n\n\t// https://ecma-international.org/ecma-262/6.0/#sec-createiterresultobject\n\tCreateIterResultObject: function CreateIterResultObject(value, done) {\n\t\tif (this.Type(done) !== 'Boolean') {\n\t\t\tthrow new $TypeError('Assertion failed: Type(done) is not Boolean');\n\t\t}\n\t\treturn {\n\t\t\tvalue: value,\n\t\t\tdone: done\n\t\t};\n\t},\n\n\t// https://ecma-international.org/ecma-262/6.0/#sec-regexpexec\n\tRegExpExec: function RegExpExec(R, S) {\n\t\tif (this.Type(R) !== 'Object') {\n\t\t\tthrow new $TypeError('R must be an Object');\n\t\t}\n\t\tif (this.Type(S) !== 'String') {\n\t\t\tthrow new $TypeError('S must be a String');\n\t\t}\n\t\tvar exec = this.Get(R, 'exec');\n\t\tif (this.IsCallable(exec)) {\n\t\t\tvar result = this.Call(exec, R, [S]);\n\t\t\tif (result === null || this.Type(result) === 'Object') {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tthrow new $TypeError('\"exec\" method must return `null` or an Object');\n\t\t}\n\t\treturn regexExec(R, S);\n\t},\n\n\t// https://ecma-international.org/ecma-262/6.0/#sec-arrayspeciescreate\n\tArraySpeciesCreate: function ArraySpeciesCreate(originalArray, length) {\n\t\tif (!this.IsInteger(length) || length < 0) {\n\t\t\tthrow new $TypeError('Assertion failed: length must be an integer >= 0');\n\t\t}\n\t\tvar len = length === 0 ? 0 : length;\n\t\tvar C;\n\t\tvar isArray = this.IsArray(originalArray);\n\t\tif (isArray) {\n\t\t\tC = this.Get(originalArray, 'constructor');\n\t\t\t// TODO: figure out how to make a cross-realm normal Array, a same-realm Array\n\t\t\t// if (this.IsConstructor(C)) {\n\t\t\t// \tif C is another realm's Array, C = undefined\n\t\t\t// \tObject.getPrototypeOf(Object.getPrototypeOf(Object.getPrototypeOf(Array))) === null ?\n\t\t\t// }\n\t\t\tif (this.Type(C) === 'Object' && hasSymbols && $Symbol.species) {\n\t\t\t\tC = this.Get(C, $Symbol.species);\n\t\t\t\tif (C === null) {\n\t\t\t\t\tC = void 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (typeof C === 'undefined') {\n\t\t\treturn $Array(len);\n\t\t}\n\t\tif (!this.IsConstructor(C)) {\n\t\t\tthrow new $TypeError('C must be a constructor');\n\t\t}\n\t\treturn new C(len); // this.Construct(C, len);\n\t},\n\n\tCreateDataProperty: function CreateDataProperty(O, P, V) {\n\t\tif (this.Type(O) !== 'Object') {\n\t\t\tthrow new $TypeError('Assertion failed: Type(O) is not Object');\n\t\t}\n\t\tif (!this.IsPropertyKey(P)) {\n\t\t\tthrow new $TypeError('Assertion failed: IsPropertyKey(P) is not true');\n\t\t}\n\t\tvar oldDesc = $gOPD(O, P);\n\t\tvar extensible = oldDesc || (typeof $isExtensible !== 'function' || $isExtensible(O));\n\t\tvar immutable = oldDesc && (!oldDesc.writable || !oldDesc.configurable);\n\t\tif (immutable || !extensible) {\n\t\t\treturn false;\n\t\t}\n\t\tvar newDesc = {\n\t\t\tconfigurable: true,\n\t\t\tenumerable: true,\n\t\t\tvalue: V,\n\t\t\twritable: true\n\t\t};\n\t\tObject.defineProperty(O, P, newDesc);\n\t\treturn true;\n\t},\n\n\t// https://ecma-international.org/ecma-262/6.0/#sec-createdatapropertyorthrow\n\tCreateDataPropertyOrThrow: function CreateDataPropertyOrThrow(O, P, V) {\n\t\tif (this.Type(O) !== 'Object') {\n\t\t\tthrow new $TypeError('Assertion failed: Type(O) is not Object');\n\t\t}\n\t\tif (!this.IsPropertyKey(P)) {\n\t\t\tthrow new $TypeError('Assertion failed: IsPropertyKey(P) is not true');\n\t\t}\n\t\tvar success = this.CreateDataProperty(O, P, V);\n\t\tif (!success) {\n\t\t\tthrow new $TypeError('unable to create data property');\n\t\t}\n\t\treturn success;\n\t},\n\n\t// https://www.ecma-international.org/ecma-262/6.0/#sec-objectcreate\n\tObjectCreate: function ObjectCreate(proto, internalSlotsList) {\n\t\tif (proto !== null && this.Type(proto) !== 'Object') {\n\t\t\tthrow new $TypeError('Assertion failed: proto must be null or an object');\n\t\t}\n\t\tvar slots = arguments.length < 2 ? [] : internalSlotsList;\n\t\tif (slots.length > 0) {\n\t\t\tthrow new $SyntaxError('es-abstract does not yet support internal slots');\n\t\t}\n\n\t\tif (proto === null && !$ObjectCreate) {\n\t\t\tthrow new $SyntaxError('native Object.create support is required to create null objects');\n\t\t}\n\n\t\treturn $ObjectCreate(proto);\n\t},\n\n\t// https://ecma-international.org/ecma-262/6.0/#sec-advancestringindex\n\tAdvanceStringIndex: function AdvanceStringIndex(S, index, unicode) {\n\t\tif (this.Type(S) !== 'String') {\n\t\t\tthrow new $TypeError('S must be a String');\n\t\t}\n\t\tif (!this.IsInteger(index) || index < 0 || index > MAX_SAFE_INTEGER) {\n\t\t\tthrow new $TypeError('Assertion failed: length must be an integer >= 0 and <= 2**53');\n\t\t}\n\t\tif (this.Type(unicode) !== 'Boolean') {\n\t\t\tthrow new $TypeError('Assertion failed: unicode must be a Boolean');\n\t\t}\n\t\tif (!unicode) {\n\t\t\treturn index + 1;\n\t\t}\n\t\tvar length = S.length;\n\t\tif ((index + 1) >= length) {\n\t\t\treturn index + 1;\n\t\t}\n\n\t\tvar first = $charCodeAt(S, index);\n\t\tif (first < 0xD800 || first > 0xDBFF) {\n\t\t\treturn index + 1;\n\t\t}\n\n\t\tvar second = $charCodeAt(S, index + 1);\n\t\tif (second < 0xDC00 || second > 0xDFFF) {\n\t\t\treturn index + 1;\n\t\t}\n\n\t\treturn index + 2;\n\t}\n});\n\ndelete ES6.CheckObjectCoercible; // renamed in ES6 to RequireObjectCoercible\n\nmodule.exports = ES6;\n","'use strict';\n\nvar ES2015 = require('./es2015');\nvar assign = require('./helpers/assign');\n\nvar ES2016 = assign(assign({}, ES2015), {\n\t// https://github.com/tc39/ecma262/pull/60\n\tSameValueNonNumber: function SameValueNonNumber(x, y) {\n\t\tif (typeof x === 'number' || typeof x !== typeof y) {\n\t\t\tthrow new TypeError('SameValueNonNumber requires two non-number values of the same type.');\n\t\t}\n\t\treturn this.SameValue(x, y);\n\t}\n});\n\nmodule.exports = ES2016;\n","'use strict';\n\nvar ES = require('es-abstract/es7');\nvar has = require('has');\nvar bind = require('function-bind');\nvar isEnumerable = bind.call(Function.call, Object.prototype.propertyIsEnumerable);\n\nmodule.exports = function values(O) {\n\tvar obj = ES.RequireObjectCoercible(O);\n\tvar vals = [];\n\tfor (var key in obj) {\n\t\tif (has(obj, key) && isEnumerable(obj, key)) {\n\t\t\tvals.push(obj[key]);\n\t\t}\n\t}\n\treturn vals;\n};\n","'use strict';\n\nvar implementation = require('./implementation');\n\nmodule.exports = function getPolyfill() {\n\treturn typeof Object.values === 'function' ? Object.values : implementation;\n};\n","'use strict';\n\nvar define = require('define-properties');\n\nvar implementation = require('./implementation');\nvar getPolyfill = require('./polyfill');\nvar shim = require('./shim');\n\nvar polyfill = getPolyfill();\n\ndefine(polyfill, {\n\tgetPolyfill: getPolyfill,\n\timplementation: implementation,\n\tshim: shim\n});\n\nmodule.exports = polyfill;\n","'use strict';\n\nvar getPolyfill = require('./polyfill');\nvar define = require('define-properties');\n\nmodule.exports = function shimValues() {\n\tvar polyfill = getPolyfill();\n\tdefine(Object, { values: polyfill }, {\n\t\tvalues: function testValues() {\n\t\t\treturn Object.values !== polyfill;\n\t\t}\n\t});\n\treturn polyfill;\n};\n","'use strict';\n\nvar values = require('object.values');\nif (!Object.values) {\n    values.shim();\n}\n\n\nvar CSSClassList = function(node) {\n    this.parentNode = node;\n    this.classNames = new Set();\n    this.classAttr = null;\n    //this.classValue = null;\n};\n\n/**\n * Performs a deep clone of this object.\n *\n * @param parentNode the parentNode to assign to the cloned result\n */\nCSSClassList.prototype.clone = function(parentNode) {\n    var node = this;\n    var nodeData = {};\n\n    Object.keys(node).forEach(function(key) {\n        if (key !== 'parentNode') {\n            nodeData[key] = node[key];\n        }\n    });\n\n    // Deep-clone node data.\n    nodeData = JSON.parse(JSON.stringify(nodeData));\n\n    var clone = new CSSClassList(parentNode);\n   Object.assign(clone, nodeData);\n    return clone;\n};\n\nCSSClassList.prototype.hasClass = function() {\n    this.classAttr = { // empty class attr\n        'name': 'class',\n        'value': null\n    };\n\n    this.addClassHandler();\n};\n\n\n// attr.class\n\nCSSClassList.prototype.addClassHandler = function() {\n\n    Object.defineProperty(this.parentNode.attrs, 'class', {\n        get: this.getClassAttr.bind(this),\n        set: this.setClassAttr.bind(this),\n        enumerable: true,\n        configurable: true\n    });\n\n    this.addClassValueHandler();\n};\n\n// attr.class.value\n\nCSSClassList.prototype.addClassValueHandler = function() {\n\n    Object.defineProperty(this.classAttr, 'value', {\n        get: this.getClassValue.bind(this),\n        set: this.setClassValue.bind(this),\n        enumerable: true,\n        configurable: true\n    });\n};\n\nCSSClassList.prototype.getClassAttr = function() {\n    return this.classAttr;\n};\n\nCSSClassList.prototype.setClassAttr = function(newClassAttr) {\n    this.setClassValue(newClassAttr.value); // must before applying value handler!\n\n    this.classAttr = newClassAttr;\n    this.addClassValueHandler();\n};\n\nCSSClassList.prototype.getClassValue = function() {\n    var arrClassNames = Array.from(this.classNames);\n    return arrClassNames.join(' ');\n};\n\nCSSClassList.prototype.setClassValue = function(newValue) {\n    if(typeof newValue === 'undefined') {\n      this.classNames.clear();\n      return;\n    }\n    var arrClassNames = newValue.split(' ');\n    this.classNames = new Set(arrClassNames);\n};\n\n\nCSSClassList.prototype.add = function(/* variadic */) {\n    this.hasClass();\n    Object.values(arguments).forEach(this._addSingle.bind(this));\n};\n\nCSSClassList.prototype._addSingle = function(className) {\n    this.classNames.add(className);\n};\n\n\nCSSClassList.prototype.remove = function(/* variadic */) {\n    this.hasClass();\n    Object.values(arguments).forEach(this._removeSingle.bind(this));\n};\n\nCSSClassList.prototype._removeSingle = function(className) {\n    this.classNames.delete(className);\n};\n\n\nCSSClassList.prototype.item = function(index) {\n    var arrClassNames = Array.from(this.classNames);\n    return arrClassNames[index];\n};\n\nCSSClassList.prototype.toggle = function(className, force) {\n    if(this.contains(className) || force === false) {\n        this.classNames.delete(className);\n    }\n    this.classNames.add(className);\n};\n\nCSSClassList.prototype.contains = function(className) {\n    return this.classNames.has(className);\n};\n\n\nmodule.exports = CSSClassList;","module.exports = function createCustomError(name, message) {\n    // use Object.create(), because some VMs prevent setting line/column otherwise\n    // (iOS Safari 10 even throws an exception)\n    var error = Object.create(SyntaxError.prototype);\n    var errorStack = new Error();\n\n    error.name = name;\n    error.message = message;\n\n    Object.defineProperty(error, 'stack', {\n        get: function() {\n            return (errorStack.stack || '').replace(/^(.+\\n){1,3}/, name + ': ' + message + '\\n');\n        }\n    });\n\n    return error;\n};\n","'use strict';\n\n// token types (note: value shouldn't intersect with used char codes)\nvar WHITESPACE = 1;\nvar IDENTIFIER = 2;\nvar NUMBER = 3;\nvar STRING = 4;\nvar COMMENT = 5;\nvar PUNCTUATOR = 6;\nvar CDO = 7;\nvar CDC = 8;\nvar ATRULE = 14;\nvar FUNCTION = 15;\nvar URL = 16;\nvar RAW = 17;\n\nvar TAB = 9;\nvar N = 10;\nvar F = 12;\nvar R = 13;\nvar SPACE = 32;\n\nvar TYPE = {\n    WhiteSpace:   WHITESPACE,\n    Identifier:   IDENTIFIER,\n    Number:           NUMBER,\n    String:           STRING,\n    Comment:         COMMENT,\n    Punctuator:   PUNCTUATOR,\n    CDO:                 CDO,\n    CDC:                 CDC,\n    Atrule:           ATRULE,\n    Function:       FUNCTION,\n    Url:                 URL,\n    Raw:                 RAW,\n\n    ExclamationMark:      33,  // !\n    QuotationMark:        34,  // \"\n    NumberSign:           35,  // #\n    DollarSign:           36,  // $\n    PercentSign:          37,  // %\n    Ampersand:            38,  // &\n    Apostrophe:           39,  // '\n    LeftParenthesis:      40,  // (\n    RightParenthesis:     41,  // )\n    Asterisk:             42,  // *\n    PlusSign:             43,  // +\n    Comma:                44,  // ,\n    HyphenMinus:          45,  // -\n    FullStop:             46,  // .\n    Solidus:              47,  // /\n    Colon:                58,  // :\n    Semicolon:            59,  // ;\n    LessThanSign:         60,  // <\n    EqualsSign:           61,  // =\n    GreaterThanSign:      62,  // >\n    QuestionMark:         63,  // ?\n    CommercialAt:         64,  // @\n    LeftSquareBracket:    91,  // [\n    Backslash:            92,  // \\\n    RightSquareBracket:   93,  // ]\n    CircumflexAccent:     94,  // ^\n    LowLine:              95,  // _\n    GraveAccent:          96,  // `\n    LeftCurlyBracket:    123,  // {\n    VerticalLine:        124,  // |\n    RightCurlyBracket:   125,  // }\n    Tilde:               126   // ~\n};\n\nvar NAME = Object.keys(TYPE).reduce(function(result, key) {\n    result[TYPE[key]] = key;\n    return result;\n}, {});\n\n// https://drafts.csswg.org/css-syntax/#tokenizer-definitions\n// > non-ASCII code point\n// >   A code point with a value equal to or greater than U+0080 <control>\n// > name-start code point\n// >   A letter, a non-ASCII code point, or U+005F LOW LINE (_).\n// > name code point\n// >   A name-start code point, a digit, or U+002D HYPHEN-MINUS (-)\n// That means only ASCII code points has a special meaning and we a maps for 0..127 codes only\nvar SafeUint32Array = typeof Uint32Array !== 'undefined' ? Uint32Array : Array; // fallback on Array when TypedArray is not supported\nvar SYMBOL_TYPE = new SafeUint32Array(0x80);\nvar PUNCTUATION = new SafeUint32Array(0x80);\nvar STOP_URL_RAW = new SafeUint32Array(0x80);\n\nfor (var i = 0; i < SYMBOL_TYPE.length; i++) {\n    SYMBOL_TYPE[i] = IDENTIFIER;\n}\n\n// fill categories\n[\n    TYPE.ExclamationMark,    // !\n    TYPE.QuotationMark,      // \"\n    TYPE.NumberSign,         // #\n    TYPE.DollarSign,         // $\n    TYPE.PercentSign,        // %\n    TYPE.Ampersand,          // &\n    TYPE.Apostrophe,         // '\n    TYPE.LeftParenthesis,    // (\n    TYPE.RightParenthesis,   // )\n    TYPE.Asterisk,           // *\n    TYPE.PlusSign,           // +\n    TYPE.Comma,              // ,\n    TYPE.HyphenMinus,        // -\n    TYPE.FullStop,           // .\n    TYPE.Solidus,            // /\n    TYPE.Colon,              // :\n    TYPE.Semicolon,          // ;\n    TYPE.LessThanSign,       // <\n    TYPE.EqualsSign,         // =\n    TYPE.GreaterThanSign,    // >\n    TYPE.QuestionMark,       // ?\n    TYPE.CommercialAt,       // @\n    TYPE.LeftSquareBracket,  // [\n    // TYPE.Backslash,          // \\\n    TYPE.RightSquareBracket, // ]\n    TYPE.CircumflexAccent,   // ^\n    // TYPE.LowLine,            // _\n    TYPE.GraveAccent,        // `\n    TYPE.LeftCurlyBracket,   // {\n    TYPE.VerticalLine,       // |\n    TYPE.RightCurlyBracket,  // }\n    TYPE.Tilde               // ~\n].forEach(function(key) {\n    SYMBOL_TYPE[Number(key)] = PUNCTUATOR;\n    PUNCTUATION[Number(key)] = PUNCTUATOR;\n});\n\nfor (var i = 48; i <= 57; i++) {\n    SYMBOL_TYPE[i] = NUMBER;\n}\n\nSYMBOL_TYPE[SPACE] = WHITESPACE;\nSYMBOL_TYPE[TAB] = WHITESPACE;\nSYMBOL_TYPE[N] = WHITESPACE;\nSYMBOL_TYPE[R] = WHITESPACE;\nSYMBOL_TYPE[F] = WHITESPACE;\n\nSYMBOL_TYPE[TYPE.Apostrophe] = STRING;\nSYMBOL_TYPE[TYPE.QuotationMark] = STRING;\n\nSTOP_URL_RAW[SPACE] = 1;\nSTOP_URL_RAW[TAB] = 1;\nSTOP_URL_RAW[N] = 1;\nSTOP_URL_RAW[R] = 1;\nSTOP_URL_RAW[F] = 1;\nSTOP_URL_RAW[TYPE.Apostrophe] = 1;\nSTOP_URL_RAW[TYPE.QuotationMark] = 1;\nSTOP_URL_RAW[TYPE.LeftParenthesis] = 1;\nSTOP_URL_RAW[TYPE.RightParenthesis] = 1;\n\n// whitespace is punctuation ...\nPUNCTUATION[SPACE] = PUNCTUATOR;\nPUNCTUATION[TAB] = PUNCTUATOR;\nPUNCTUATION[N] = PUNCTUATOR;\nPUNCTUATION[R] = PUNCTUATOR;\nPUNCTUATION[F] = PUNCTUATOR;\n// ... hyper minus is not\nPUNCTUATION[TYPE.HyphenMinus] = 0;\n\nmodule.exports = {\n    TYPE: TYPE,\n    NAME: NAME,\n\n    SYMBOL_TYPE: SYMBOL_TYPE,\n    PUNCTUATION: PUNCTUATION,\n    STOP_URL_RAW: STOP_URL_RAW\n};\n","'use strict';\n\nvar createCustomError = require('../../utils/createCustomError');\n\nvar SyntaxParseError = function(message, syntaxStr, offset) {\n    var error = createCustomError('SyntaxParseError', message);\n\n    error.rawMessage = message;\n    error.syntax = syntaxStr;\n    error.offset = offset;\n    error.message = error.rawMessage + '\\n' +\n        '  ' + error.syntax + '\\n' +\n        '--' + new Array((error.offset || error.syntax.length) + 1).join('-') + '^';\n\n    return error;\n};\n\nmodule.exports = {\n    SyntaxParseError: SyntaxParseError\n};\n","module.exports = {\n    SyntaxParseError: require('./error').SyntaxParseError,\n    parse: require('./parse'),\n    generate: require('./generate'),\n    walk: require('./walk')\n};\n","var TYPE = require('../tokenizer').TYPE;\nvar WHITESPACE = TYPE.WhiteSpace;\nvar COMMENT = TYPE.Comment;\n\nmodule.exports = function readSequence(recognizer) {\n    var children = this.createList();\n    var child = null;\n    var context = {\n        recognizer: recognizer,\n        space: null,\n        ignoreWS: false,\n        ignoreWSAfter: false\n    };\n\n    this.scanner.skipSC();\n\n    while (!this.scanner.eof) {\n        switch (this.scanner.tokenType) {\n            case COMMENT:\n                this.scanner.next();\n                continue;\n\n            case WHITESPACE:\n                if (context.ignoreWS) {\n                    this.scanner.next();\n                } else {\n                    context.space = this.WhiteSpace();\n                }\n                continue;\n        }\n\n        child = recognizer.getNode.call(this, context);\n\n        if (child === undefined) {\n            break;\n        }\n\n        if (context.space !== null) {\n            children.push(context.space);\n            context.space = null;\n        }\n\n        children.push(child);\n\n        if (context.ignoreWSAfter) {\n            context.ignoreWSAfter = false;\n            context.ignoreWS = true;\n        } else {\n            context.ignoreWS = false;\n        }\n    }\n\n    return children;\n};\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n/**\n * Encode an integer in the range of 0 to 63 to a single base 64 digit.\n */\nexports.encode = function (number) {\n  if (0 <= number && number < intToCharMap.length) {\n    return intToCharMap[number];\n  }\n  throw new TypeError(\"Must be between 0 and 63: \" + number);\n};\n\n/**\n * Decode a single base 64 character code digit to an integer. Returns -1 on\n * failure.\n */\nexports.decode = function (charCode) {\n  var bigA = 65;     // 'A'\n  var bigZ = 90;     // 'Z'\n\n  var littleA = 97;  // 'a'\n  var littleZ = 122; // 'z'\n\n  var zero = 48;     // '0'\n  var nine = 57;     // '9'\n\n  var plus = 43;     // '+'\n  var slash = 47;    // '/'\n\n  var littleOffset = 26;\n  var numberOffset = 52;\n\n  // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ\n  if (bigA <= charCode && charCode <= bigZ) {\n    return (charCode - bigA);\n  }\n\n  // 26 - 51: abcdefghijklmnopqrstuvwxyz\n  if (littleA <= charCode && charCode <= littleZ) {\n    return (charCode - littleA + littleOffset);\n  }\n\n  // 52 - 61: 0123456789\n  if (zero <= charCode && charCode <= nine) {\n    return (charCode - zero + numberOffset);\n  }\n\n  // 62: +\n  if (charCode == plus) {\n    return 62;\n  }\n\n  // 63: /\n  if (charCode == slash) {\n    return 63;\n  }\n\n  // Invalid base64 digit.\n  return -1;\n};\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\n/**\n * This is a helper function for getting values from parameter/options\n * objects.\n *\n * @param args The object we are extracting values from\n * @param name The name of the property we are getting.\n * @param defaultValue An optional value to return if the property is missing\n * from the object. If this is not specified and the property is missing, an\n * error will be thrown.\n */\nfunction getArg(aArgs, aName, aDefaultValue) {\n  if (aName in aArgs) {\n    return aArgs[aName];\n  } else if (arguments.length === 3) {\n    return aDefaultValue;\n  } else {\n    throw new Error('\"' + aName + '\" is a required argument.');\n  }\n}\nexports.getArg = getArg;\n\nvar urlRegexp = /^(?:([\\w+\\-.]+):)?\\/\\/(?:(\\w+:\\w+)@)?([\\w.]*)(?::(\\d+))?(\\S*)$/;\nvar dataUrlRegexp = /^data:.+\\,.+$/;\n\nfunction urlParse(aUrl) {\n  var match = aUrl.match(urlRegexp);\n  if (!match) {\n    return null;\n  }\n  return {\n    scheme: match[1],\n    auth: match[2],\n    host: match[3],\n    port: match[4],\n    path: match[5]\n  };\n}\nexports.urlParse = urlParse;\n\nfunction urlGenerate(aParsedUrl) {\n  var url = '';\n  if (aParsedUrl.scheme) {\n    url += aParsedUrl.scheme + ':';\n  }\n  url += '//';\n  if (aParsedUrl.auth) {\n    url += aParsedUrl.auth + '@';\n  }\n  if (aParsedUrl.host) {\n    url += aParsedUrl.host;\n  }\n  if (aParsedUrl.port) {\n    url += \":\" + aParsedUrl.port\n  }\n  if (aParsedUrl.path) {\n    url += aParsedUrl.path;\n  }\n  return url;\n}\nexports.urlGenerate = urlGenerate;\n\n/**\n * Normalizes a path, or the path portion of a URL:\n *\n * - Replaces consecutive slashes with one slash.\n * - Removes unnecessary '.' parts.\n * - Removes unnecessary '<dir>/..' parts.\n *\n * Based on code in the Node.js 'path' core module.\n *\n * @param aPath The path or url to normalize.\n */\nfunction normalize(aPath) {\n  var path = aPath;\n  var url = urlParse(aPath);\n  if (url) {\n    if (!url.path) {\n      return aPath;\n    }\n    path = url.path;\n  }\n  var isAbsolute = exports.isAbsolute(path);\n\n  var parts = path.split(/\\/+/);\n  for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {\n    part = parts[i];\n    if (part === '.') {\n      parts.splice(i, 1);\n    } else if (part === '..') {\n      up++;\n    } else if (up > 0) {\n      if (part === '') {\n        // The first part is blank if the path is absolute. Trying to go\n        // above the root is a no-op. Therefore we can remove all '..' parts\n        // directly after the root.\n        parts.splice(i + 1, up);\n        up = 0;\n      } else {\n        parts.splice(i, 2);\n        up--;\n      }\n    }\n  }\n  path = parts.join('/');\n\n  if (path === '') {\n    path = isAbsolute ? '/' : '.';\n  }\n\n  if (url) {\n    url.path = path;\n    return urlGenerate(url);\n  }\n  return path;\n}\nexports.normalize = normalize;\n\n/**\n * Joins two paths/URLs.\n *\n * @param aRoot The root path or URL.\n * @param aPath The path or URL to be joined with the root.\n *\n * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a\n *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended\n *   first.\n * - Otherwise aPath is a path. If aRoot is a URL, then its path portion\n *   is updated with the result and aRoot is returned. Otherwise the result\n *   is returned.\n *   - If aPath is absolute, the result is aPath.\n *   - Otherwise the two paths are joined with a slash.\n * - Joining for example 'http://' and 'www.example.com' is also supported.\n */\nfunction join(aRoot, aPath) {\n  if (aRoot === \"\") {\n    aRoot = \".\";\n  }\n  if (aPath === \"\") {\n    aPath = \".\";\n  }\n  var aPathUrl = urlParse(aPath);\n  var aRootUrl = urlParse(aRoot);\n  if (aRootUrl) {\n    aRoot = aRootUrl.path || '/';\n  }\n\n  // `join(foo, '//www.example.org')`\n  if (aPathUrl && !aPathUrl.scheme) {\n    if (aRootUrl) {\n      aPathUrl.scheme = aRootUrl.scheme;\n    }\n    return urlGenerate(aPathUrl);\n  }\n\n  if (aPathUrl || aPath.match(dataUrlRegexp)) {\n    return aPath;\n  }\n\n  // `join('http://', 'www.example.com')`\n  if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {\n    aRootUrl.host = aPath;\n    return urlGenerate(aRootUrl);\n  }\n\n  var joined = aPath.charAt(0) === '/'\n    ? aPath\n    : normalize(aRoot.replace(/\\/+$/, '') + '/' + aPath);\n\n  if (aRootUrl) {\n    aRootUrl.path = joined;\n    return urlGenerate(aRootUrl);\n  }\n  return joined;\n}\nexports.join = join;\n\nexports.isAbsolute = function (aPath) {\n  return aPath.charAt(0) === '/' || !!aPath.match(urlRegexp);\n};\n\n/**\n * Make a path relative to a URL or another path.\n *\n * @param aRoot The root path or URL.\n * @param aPath The path or URL to be made relative to aRoot.\n */\nfunction relative(aRoot, aPath) {\n  if (aRoot === \"\") {\n    aRoot = \".\";\n  }\n\n  aRoot = aRoot.replace(/\\/$/, '');\n\n  // It is possible for the path to be above the root. In this case, simply\n  // checking whether the root is a prefix of the path won't work. Instead, we\n  // need to remove components from the root one by one, until either we find\n  // a prefix that fits, or we run out of components to remove.\n  var level = 0;\n  while (aPath.indexOf(aRoot + '/') !== 0) {\n    var index = aRoot.lastIndexOf(\"/\");\n    if (index < 0) {\n      return aPath;\n    }\n\n    // If the only part of the root that is left is the scheme (i.e. http://,\n    // file:///, etc.), one or more slashes (/), or simply nothing at all, we\n    // have exhausted all components, so the path is not relative to the root.\n    aRoot = aRoot.slice(0, index);\n    if (aRoot.match(/^([^\\/]+:\\/)?\\/*$/)) {\n      return aPath;\n    }\n\n    ++level;\n  }\n\n  // Make sure we add a \"../\" for each component we removed from the root.\n  return Array(level + 1).join(\"../\") + aPath.substr(aRoot.length + 1);\n}\nexports.relative = relative;\n\nvar supportsNullProto = (function () {\n  var obj = Object.create(null);\n  return !('__proto__' in obj);\n}());\n\nfunction identity (s) {\n  return s;\n}\n\n/**\n * Because behavior goes wacky when you set `__proto__` on objects, we\n * have to prefix all the strings in our set with an arbitrary character.\n *\n * See https://github.com/mozilla/source-map/pull/31 and\n * https://github.com/mozilla/source-map/issues/30\n *\n * @param String aStr\n */\nfunction toSetString(aStr) {\n  if (isProtoString(aStr)) {\n    return '$' + aStr;\n  }\n\n  return aStr;\n}\nexports.toSetString = supportsNullProto ? identity : toSetString;\n\nfunction fromSetString(aStr) {\n  if (isProtoString(aStr)) {\n    return aStr.slice(1);\n  }\n\n  return aStr;\n}\nexports.fromSetString = supportsNullProto ? identity : fromSetString;\n\nfunction isProtoString(s) {\n  if (!s) {\n    return false;\n  }\n\n  var length = s.length;\n\n  if (length < 9 /* \"__proto__\".length */) {\n    return false;\n  }\n\n  if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||\n      s.charCodeAt(length - 2) !== 95  /* '_' */ ||\n      s.charCodeAt(length - 3) !== 111 /* 'o' */ ||\n      s.charCodeAt(length - 4) !== 116 /* 't' */ ||\n      s.charCodeAt(length - 5) !== 111 /* 'o' */ ||\n      s.charCodeAt(length - 6) !== 114 /* 'r' */ ||\n      s.charCodeAt(length - 7) !== 112 /* 'p' */ ||\n      s.charCodeAt(length - 8) !== 95  /* '_' */ ||\n      s.charCodeAt(length - 9) !== 95  /* '_' */) {\n    return false;\n  }\n\n  for (var i = length - 10; i >= 0; i--) {\n    if (s.charCodeAt(i) !== 36 /* '$' */) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Comparator between two mappings where the original positions are compared.\n *\n * Optionally pass in `true` as `onlyCompareGenerated` to consider two\n * mappings with the same original source/line/column, but different generated\n * line and column the same. Useful when searching for a mapping with a\n * stubbed out mapping.\n */\nfunction compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {\n  var cmp = mappingA.source - mappingB.source;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0 || onlyCompareOriginal) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return mappingA.name - mappingB.name;\n}\nexports.compareByOriginalPositions = compareByOriginalPositions;\n\n/**\n * Comparator between two mappings with deflated source and name indices where\n * the generated positions are compared.\n *\n * Optionally pass in `true` as `onlyCompareGenerated` to consider two\n * mappings with the same generated line and column, but different\n * source/name/original line and column the same. Useful when searching for a\n * mapping with a stubbed out mapping.\n */\nfunction compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {\n  var cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0 || onlyCompareGenerated) {\n    return cmp;\n  }\n\n  cmp = mappingA.source - mappingB.source;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return mappingA.name - mappingB.name;\n}\nexports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;\n\nfunction strcmp(aStr1, aStr2) {\n  if (aStr1 === aStr2) {\n    return 0;\n  }\n\n  if (aStr1 > aStr2) {\n    return 1;\n  }\n\n  return -1;\n}\n\n/**\n * Comparator between two mappings with inflated source and name strings where\n * the generated positions are compared.\n */\nfunction compareByGeneratedPositionsInflated(mappingA, mappingB) {\n  var cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = strcmp(mappingA.source, mappingB.source);\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nexports.GREATEST_LOWER_BOUND = 1;\nexports.LEAST_UPPER_BOUND = 2;\n\n/**\n * Recursive implementation of binary search.\n *\n * @param aLow Indices here and lower do not contain the needle.\n * @param aHigh Indices here and higher do not contain the needle.\n * @param aNeedle The element being searched for.\n * @param aHaystack The non-empty array being searched.\n * @param aCompare Function which takes two elements and returns -1, 0, or 1.\n * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or\n *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n */\nfunction recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {\n  // This function terminates when one of the following is true:\n  //\n  //   1. We find the exact element we are looking for.\n  //\n  //   2. We did not find the exact element, but we can return the index of\n  //      the next-closest element.\n  //\n  //   3. We did not find the exact element, and there is no next-closest\n  //      element than the one we are searching for, so we return -1.\n  var mid = Math.floor((aHigh - aLow) / 2) + aLow;\n  var cmp = aCompare(aNeedle, aHaystack[mid], true);\n  if (cmp === 0) {\n    // Found the element we are looking for.\n    return mid;\n  }\n  else if (cmp > 0) {\n    // Our needle is greater than aHaystack[mid].\n    if (aHigh - mid > 1) {\n      // The element is in the upper half.\n      return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);\n    }\n\n    // The exact needle element was not found in this haystack. Determine if\n    // we are in termination case (3) or (2) and return the appropriate thing.\n    if (aBias == exports.LEAST_UPPER_BOUND) {\n      return aHigh < aHaystack.length ? aHigh : -1;\n    } else {\n      return mid;\n    }\n  }\n  else {\n    // Our needle is less than aHaystack[mid].\n    if (mid - aLow > 1) {\n      // The element is in the lower half.\n      return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);\n    }\n\n    // we are in termination case (3) or (2) and return the appropriate thing.\n    if (aBias == exports.LEAST_UPPER_BOUND) {\n      return mid;\n    } else {\n      return aLow < 0 ? -1 : aLow;\n    }\n  }\n}\n\n/**\n * This is an implementation of binary search which will always try and return\n * the index of the closest element if there is no exact hit. This is because\n * mappings between original and generated line/col pairs are single points,\n * and there is an implicit region between each of them, so a miss just means\n * that you aren't on the very start of a region.\n *\n * @param aNeedle The element you are looking for.\n * @param aHaystack The array that is being searched.\n * @param aCompare A function which takes the needle and an element in the\n *     array and returns -1, 0, or 1 depending on whether the needle is less\n *     than, equal to, or greater than the element, respectively.\n * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or\n *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.\n */\nexports.search = function search(aNeedle, aHaystack, aCompare, aBias) {\n  if (aHaystack.length === 0) {\n    return -1;\n  }\n\n  var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,\n                              aCompare, aBias || exports.GREATEST_LOWER_BOUND);\n  if (index < 0) {\n    return -1;\n  }\n\n  // We have found either the exact element, or the next-closest element than\n  // the one we are searching for. However, there may be more than one such\n  // element. Make sure we always return the smallest of these.\n  while (index - 1 >= 0) {\n    if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {\n      break;\n    }\n    --index;\n  }\n\n  return index;\n};\n","/*\n * Copyright 2009-2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE.txt or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nexports.SourceMapGenerator = require('./lib/source-map-generator').SourceMapGenerator;\nexports.SourceMapConsumer = require('./lib/source-map-consumer').SourceMapConsumer;\nexports.SourceNode = require('./lib/source-node').SourceNode;\n","'use strict';\n\nvar SourceMapGenerator = require('source-map').SourceMapGenerator;\nvar trackNodes = {\n    Atrule: true,\n    Selector: true,\n    Declaration: true\n};\n\nmodule.exports = function generateSourceMap(handlers) {\n    var map = new SourceMapGenerator();\n    var line = 1;\n    var column = 0;\n    var generated = {\n        line: 1,\n        column: 0\n    };\n    var original = {\n        line: 0, // should be zero to add first mapping\n        column: 0\n    };\n    var sourceMappingActive = false;\n    var activatedGenerated = {\n        line: 1,\n        column: 0\n    };\n    var activatedMapping = {\n        generated: activatedGenerated\n    };\n\n    var handlersNode = handlers.node;\n    handlers.node = function(node) {\n        if (node.loc && node.loc.start && trackNodes.hasOwnProperty(node.type)) {\n            var nodeLine = node.loc.start.line;\n            var nodeColumn = node.loc.start.column - 1;\n\n            if (original.line !== nodeLine ||\n                original.column !== nodeColumn) {\n                original.line = nodeLine;\n                original.column = nodeColumn;\n\n                generated.line = line;\n                generated.column = column;\n\n                if (sourceMappingActive) {\n                    sourceMappingActive = false;\n                    if (generated.line !== activatedGenerated.line ||\n                        generated.column !== activatedGenerated.column) {\n                        map.addMapping(activatedMapping);\n                    }\n                }\n\n                sourceMappingActive = true;\n                map.addMapping({\n                    source: node.loc.source,\n                    original: original,\n                    generated: generated\n                });\n            }\n        }\n\n        handlersNode.call(this, node);\n\n        if (sourceMappingActive && trackNodes.hasOwnProperty(node.type)) {\n            activatedGenerated.line = line;\n            activatedGenerated.column = column;\n        }\n    };\n\n    var handlersChunk = handlers.chunk;\n    handlers.chunk = function(chunk) {\n        for (var i = 0; i < chunk.length; i++) {\n            if (chunk.charCodeAt(i) === 10) { // \\n\n                line++;\n                column = 0;\n            } else {\n                column++;\n            }\n        }\n\n        handlersChunk(chunk);\n    };\n\n    var handlersResult = handlers.result;\n    handlers.result = function() {\n        if (sourceMappingActive) {\n            map.addMapping(activatedMapping);\n        }\n\n        return {\n            css: handlersResult(),\n            map: map\n        };\n    };\n\n    return handlers;\n};\n","var List = require('../utils/list');\n\nmodule.exports = function createConvertors(walk) {\n    return {\n        fromPlainObject: function(ast) {\n            walk(ast, {\n                enter: function(node) {\n                    if (node.children && node.children instanceof List === false) {\n                        node.children = new List().fromArray(node.children);\n                    }\n                }\n            });\n\n            return ast;\n        },\n        toPlainObject: function(ast) {\n            walk(ast, {\n                leave: function(node) {\n                    if (node.children && node.children instanceof List) {\n                        node.children = node.children.toArray();\n                    }\n                }\n            });\n\n            return ast;\n        }\n    };\n};\n","'use strict';\n\nvar List = require('./list');\n\nmodule.exports = function clone(node) {\n    var result = {};\n\n    for (var key in node) {\n        var value = node[key];\n\n        if (value) {\n            if (Array.isArray(value) || value instanceof List) {\n                value = value.map(clone);\n            } else if (value.constructor === Object) {\n                value = clone(value);\n            }\n        }\n\n        result[key] = value;\n    }\n\n    return result;\n};\n","var TYPE = require('../../tokenizer').TYPE;\n\nvar SEMICOLON = TYPE.Semicolon;\nvar LEFTCURLYBRACKET = TYPE.LeftCurlyBracket;\n\nmodule.exports = {\n    name: 'AtrulePrelude',\n    structure: {\n        children: [[]]\n    },\n    parse: function(name) {\n        var children = null;\n\n        if (name !== null) {\n            name = name.toLowerCase();\n        }\n\n        this.scanner.skipSC();\n\n        if (this.atrule.hasOwnProperty(name) &&\n            typeof this.atrule[name].prelude === 'function') {\n            // custom consumer\n            children = this.atrule[name].prelude.call(this);\n        } else {\n            // default consumer\n            children = this.readSequence(this.scope.AtrulePrelude);\n        }\n\n        this.scanner.skipSC();\n\n        if (this.scanner.eof !== true &&\n            this.scanner.tokenType !== LEFTCURLYBRACKET &&\n            this.scanner.tokenType !== SEMICOLON) {\n            this.scanner.error('Semicolon or block is expected');\n        }\n\n        if (children === null) {\n            children = this.createList();\n        }\n\n        return {\n            type: 'AtrulePrelude',\n            loc: this.getLocationFromList(children),\n            children: children\n        };\n    },\n    generate: function(node) {\n        this.children(node);\n    },\n    walkContext: 'atrulePrelude'\n};\n","var TYPE = require('../../tokenizer').TYPE;\nvar LEFTSQUAREBRACKET = TYPE.LeftSquareBracket;\nvar RIGHTSQUAREBRACKET = TYPE.RightSquareBracket;\n\nmodule.exports = {\n    name: 'Brackets',\n    structure: {\n        children: [[]]\n    },\n    parse: function(readSequence, recognizer) {\n        var start = this.scanner.tokenStart;\n        var children = null;\n\n        this.scanner.eat(LEFTSQUAREBRACKET);\n\n        children = readSequence.call(this, recognizer);\n\n        if (!this.scanner.eof) {\n            this.scanner.eat(RIGHTSQUAREBRACKET);\n        }\n\n        return {\n            type: 'Brackets',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            children: children\n        };\n    },\n    generate: function(node) {\n        this.chunk('[');\n        this.children(node);\n        this.chunk(']');\n    }\n};\n","var CDC = require('../../tokenizer').TYPE.CDC;\n\nmodule.exports = {\n    name: 'CDC',\n    structure: [],\n    parse: function() {\n        var start = this.scanner.tokenStart;\n\n        this.scanner.eat(CDC); // -->\n\n        return {\n            type: 'CDC',\n            loc: this.getLocation(start, this.scanner.tokenStart)\n        };\n    },\n    generate: function() {\n        this.chunk('-->');\n    }\n};\n","var CDO = require('../../tokenizer').TYPE.CDO;\n\nmodule.exports = {\n    name: 'CDO',\n    structure: [],\n    parse: function() {\n        var start = this.scanner.tokenStart;\n\n        this.scanner.eat(CDO); // <!--\n\n        return {\n            type: 'CDO',\n            loc: this.getLocation(start, this.scanner.tokenStart)\n        };\n    },\n    generate: function() {\n        this.chunk('<!--');\n    }\n};\n","var TYPE = require('../../tokenizer').TYPE;\nvar IDENTIFIER = TYPE.Identifier;\nvar FULLSTOP = TYPE.FullStop;\n\n// '.' ident\nmodule.exports = {\n    name: 'ClassSelector',\n    structure: {\n        name: String\n    },\n    parse: function() {\n        this.scanner.eat(FULLSTOP);\n\n        return {\n            type: 'ClassSelector',\n            loc: this.getLocation(this.scanner.tokenStart - 1, this.scanner.tokenEnd),\n            name: this.scanner.consume(IDENTIFIER)\n        };\n    },\n    generate: function(node) {\n        this.chunk('.');\n        this.chunk(node.name);\n    }\n};\n","var TYPE = require('../../tokenizer').TYPE;\n\nvar PLUSSIGN = TYPE.PlusSign;\nvar SOLIDUS = TYPE.Solidus;\nvar GREATERTHANSIGN = TYPE.GreaterThanSign;\nvar TILDE = TYPE.Tilde;\n\n// + | > | ~ | /deep/\nmodule.exports = {\n    name: 'Combinator',\n    structure: {\n        name: String\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n\n        switch (this.scanner.tokenType) {\n            case GREATERTHANSIGN:\n            case PLUSSIGN:\n            case TILDE:\n                this.scanner.next();\n                break;\n\n            case SOLIDUS:\n                this.scanner.next();\n                this.scanner.expectIdentifier('deep');\n                this.scanner.eat(SOLIDUS);\n                break;\n\n            default:\n                this.scanner.error('Combinator is expected');\n        }\n\n        return {\n            type: 'Combinator',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            name: this.scanner.substrToCursor(start)\n        };\n    },\n    generate: function(node) {\n        this.chunk(node.name);\n    }\n};\n","var TYPE = require('../../tokenizer').TYPE;\n\nvar ASTERISK = TYPE.Asterisk;\nvar SOLIDUS = TYPE.Solidus;\n\n// '/*' .* '*/'\nmodule.exports = {\n    name: 'Comment',\n    structure: {\n        value: String\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var end = this.scanner.tokenEnd;\n\n        if ((end - start + 2) >= 2 &&\n            this.scanner.source.charCodeAt(end - 2) === ASTERISK &&\n            this.scanner.source.charCodeAt(end - 1) === SOLIDUS) {\n            end -= 2;\n        }\n\n        this.scanner.next();\n\n        return {\n            type: 'Comment',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            value: this.scanner.source.substring(start + 2, end)\n        };\n    },\n    generate: function(node) {\n        this.chunk('/*');\n        this.chunk(node.value);\n        this.chunk('*/');\n    }\n};\n","var TYPE = require('../../tokenizer').TYPE;\nvar RIGHTPARENTHESIS = TYPE.RightParenthesis;\n\n// <function-token> <sequence> ')'\nmodule.exports = {\n    name: 'Function',\n    structure: {\n        name: String,\n        children: [[]]\n    },\n    parse: function(readSequence, recognizer) {\n        var start = this.scanner.tokenStart;\n        var name = this.scanner.consumeFunctionName();\n        var nameLowerCase = name.toLowerCase();\n        var children;\n\n        children = recognizer.hasOwnProperty(nameLowerCase)\n            ? recognizer[nameLowerCase].call(this, recognizer)\n            : readSequence.call(this, recognizer);\n\n        if (!this.scanner.eof) {\n            this.scanner.eat(RIGHTPARENTHESIS);\n        }\n\n        return {\n            type: 'Function',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            name: name,\n            children: children\n        };\n    },\n    generate: function(node) {\n        this.chunk(node.name);\n        this.chunk('(');\n        this.children(node);\n        this.chunk(')');\n    },\n    walkContext: 'function'\n};\n","var TYPE = require('../../tokenizer').TYPE;\nvar IDENTIFIER = TYPE.Identifier;\n\nmodule.exports = {\n    name: 'Identifier',\n    structure: {\n        name: String\n    },\n    parse: function() {\n        return {\n            type: 'Identifier',\n            loc: this.getLocation(this.scanner.tokenStart, this.scanner.tokenEnd),\n            name: this.scanner.consume(IDENTIFIER)\n        };\n    },\n    generate: function(node) {\n        this.chunk(node.name);\n    }\n};\n","var TYPE = require('../../tokenizer').TYPE;\nvar IDENTIFIER = TYPE.Identifier;\nvar NUMBERSIGN = TYPE.NumberSign;\n\n// '#' ident\nmodule.exports = {\n    name: 'IdSelector',\n    structure: {\n        name: String\n    },\n    parse: function() {\n        this.scanner.eat(NUMBERSIGN);\n\n        return {\n            type: 'IdSelector',\n            loc: this.getLocation(this.scanner.tokenStart - 1, this.scanner.tokenEnd),\n            name: this.scanner.consume(IDENTIFIER)\n        };\n    },\n    generate: function(node) {\n        this.chunk('#');\n        this.chunk(node.name);\n    }\n};\n","var TYPE = require('../../tokenizer').TYPE;\n\nvar IDENTIFIER = TYPE.Identifier;\nvar NUMBER = TYPE.Number;\nvar LEFTPARENTHESIS = TYPE.LeftParenthesis;\nvar RIGHTPARENTHESIS = TYPE.RightParenthesis;\nvar COLON = TYPE.Colon;\nvar SOLIDUS = TYPE.Solidus;\n\nmodule.exports = {\n    name: 'MediaFeature',\n    structure: {\n        name: String,\n        value: ['Identifier', 'Number', 'Dimension', 'Ratio', null]\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var name;\n        var value = null;\n\n        this.scanner.eat(LEFTPARENTHESIS);\n        this.scanner.skipSC();\n\n        name = this.scanner.consume(IDENTIFIER);\n        this.scanner.skipSC();\n\n        if (this.scanner.tokenType !== RIGHTPARENTHESIS) {\n            this.scanner.eat(COLON);\n            this.scanner.skipSC();\n\n            switch (this.scanner.tokenType) {\n                case NUMBER:\n                    if (this.scanner.lookupType(1) === IDENTIFIER) {\n                        value = this.Dimension();\n                    } else if (this.scanner.lookupNonWSType(1) === SOLIDUS) {\n                        value = this.Ratio();\n                    } else {\n                        value = this.Number();\n                    }\n\n                    break;\n\n                case IDENTIFIER:\n                    value = this.Identifier();\n\n                    break;\n\n                default:\n                    this.scanner.error('Number, dimension, ratio or identifier is expected');\n            }\n\n            this.scanner.skipSC();\n        }\n\n        this.scanner.eat(RIGHTPARENTHESIS);\n\n        return {\n            type: 'MediaFeature',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            name: name,\n            value: value\n        };\n    },\n    generate: function(node) {\n        this.chunk('(');\n        this.chunk(node.name);\n        if (node.value !== null) {\n            this.chunk(':');\n            this.node(node.value);\n        }\n        this.chunk(')');\n    }\n};\n","var TYPE = require('../../tokenizer').TYPE;\n\nvar WHITESPACE = TYPE.WhiteSpace;\nvar COMMENT = TYPE.Comment;\nvar IDENTIFIER = TYPE.Identifier;\nvar LEFTPARENTHESIS = TYPE.LeftParenthesis;\n\nmodule.exports = {\n    name: 'MediaQuery',\n    structure: {\n        children: [[\n            'Identifier',\n            'MediaFeature',\n            'WhiteSpace'\n        ]]\n    },\n    parse: function() {\n        this.scanner.skipSC();\n\n        var children = this.createList();\n        var child = null;\n        var space = null;\n\n        scan:\n        while (!this.scanner.eof) {\n            switch (this.scanner.tokenType) {\n                case COMMENT:\n                    this.scanner.next();\n                    continue;\n\n                case WHITESPACE:\n                    space = this.WhiteSpace();\n                    continue;\n\n                case IDENTIFIER:\n                    child = this.Identifier();\n                    break;\n\n                case LEFTPARENTHESIS:\n                    child = this.MediaFeature();\n                    break;\n\n                default:\n                    break scan;\n            }\n\n            if (space !== null) {\n                children.push(space);\n                space = null;\n            }\n\n            children.push(child);\n        }\n\n        if (child === null) {\n            this.scanner.error('Identifier or parenthesis is expected');\n        }\n\n        return {\n            type: 'MediaQuery',\n            loc: this.getLocationFromList(children),\n            children: children\n        };\n    },\n    generate: function(node) {\n        this.children(node);\n    }\n};\n","var COMMA = require('../../tokenizer').TYPE.Comma;\n\nmodule.exports = {\n    name: 'MediaQueryList',\n    structure: {\n        children: [[\n            'MediaQuery'\n        ]]\n    },\n    parse: function(relative) {\n        var children = this.createList();\n\n        this.scanner.skipSC();\n\n        while (!this.scanner.eof) {\n            children.push(this.MediaQuery(relative));\n\n            if (this.scanner.tokenType !== COMMA) {\n                break;\n            }\n\n            this.scanner.next();\n        }\n\n        return {\n            type: 'MediaQueryList',\n            loc: this.getLocationFromList(children),\n            children: children\n        };\n    },\n    generate: function(node) {\n        this.children(node, function() {\n            this.chunk(',');\n        });\n    }\n};\n","var NUMBER = require('../../tokenizer').TYPE.Number;\n\nmodule.exports = {\n    name: 'Number',\n    structure: {\n        value: String\n    },\n    parse: function() {\n        return {\n            type: 'Number',\n            loc: this.getLocation(this.scanner.tokenStart, this.scanner.tokenEnd),\n            value: this.scanner.consume(NUMBER)\n        };\n    },\n    generate: function(node) {\n        this.chunk(node.value);\n    }\n};\n","// '/' | '*' | ',' | ':' | '+' | '-'\nmodule.exports = {\n    name: 'Operator',\n    structure: {\n        value: String\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n\n        this.scanner.next();\n\n        return {\n            type: 'Operator',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            value: this.scanner.substrToCursor(start)\n        };\n    },\n    generate: function(node) {\n        this.chunk(node.value);\n    }\n};\n","var TYPE = require('../../tokenizer').TYPE;\nvar LEFTPARENTHESIS = TYPE.LeftParenthesis;\nvar RIGHTPARENTHESIS = TYPE.RightParenthesis;\n\nmodule.exports = {\n    name: 'Parentheses',\n    structure: {\n        children: [[]]\n    },\n    parse: function(readSequence, recognizer) {\n        var start = this.scanner.tokenStart;\n        var children = null;\n\n        this.scanner.eat(LEFTPARENTHESIS);\n\n        children = readSequence.call(this, recognizer);\n\n        if (!this.scanner.eof) {\n            this.scanner.eat(RIGHTPARENTHESIS);\n        }\n\n        return {\n            type: 'Parentheses',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            children: children\n        };\n    },\n    generate: function(node) {\n        this.chunk('(');\n        this.children(node);\n        this.chunk(')');\n    }\n};\n","var TYPE = require('../../tokenizer').TYPE;\n\nvar NUMBER = TYPE.Number;\nvar PERCENTSIGN = TYPE.PercentSign;\n\nmodule.exports = {\n    name: 'Percentage',\n    structure: {\n        value: String\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var number = this.scanner.consume(NUMBER);\n\n        this.scanner.eat(PERCENTSIGN);\n\n        return {\n            type: 'Percentage',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            value: number\n        };\n    },\n    generate: function(node) {\n        this.chunk(node.value);\n        this.chunk('%');\n    }\n};\n","var TYPE = require('../../tokenizer').TYPE;\n\nvar IDENTIFIER = TYPE.Identifier;\nvar FUNCTION = TYPE.Function;\nvar COLON = TYPE.Colon;\nvar RIGHTPARENTHESIS = TYPE.RightParenthesis;\n\n// : ident [ '(' .. ')' ]?\nmodule.exports = {\n    name: 'PseudoClassSelector',\n    structure: {\n        name: String,\n        children: [['Raw'], null]\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var children = null;\n        var name;\n        var nameLowerCase;\n\n        this.scanner.eat(COLON);\n\n        if (this.scanner.tokenType === FUNCTION) {\n            name = this.scanner.consumeFunctionName();\n            nameLowerCase = name.toLowerCase();\n\n            if (this.pseudo.hasOwnProperty(nameLowerCase)) {\n                this.scanner.skipSC();\n                children = this.pseudo[nameLowerCase].call(this);\n                this.scanner.skipSC();\n            } else {\n                children = this.createList();\n                children.push(\n                    this.Raw(this.scanner.currentToken, 0, 0, false, false)\n                );\n            }\n\n            this.scanner.eat(RIGHTPARENTHESIS);\n        } else {\n            name = this.scanner.consume(IDENTIFIER);\n        }\n\n        return {\n            type: 'PseudoClassSelector',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            name: name,\n            children: children\n        };\n    },\n    generate: function(node) {\n        this.chunk(':');\n        this.chunk(node.name);\n\n        if (node.children !== null) {\n            this.chunk('(');\n            this.children(node);\n            this.chunk(')');\n        }\n    },\n    walkContext: 'function'\n};\n","var TYPE = require('../../tokenizer').TYPE;\n\nvar IDENTIFIER = TYPE.Identifier;\nvar FUNCTION = TYPE.Function;\nvar COLON = TYPE.Colon;\nvar RIGHTPARENTHESIS = TYPE.RightParenthesis;\n\n// :: ident [ '(' .. ')' ]?\nmodule.exports = {\n    name: 'PseudoElementSelector',\n    structure: {\n        name: String,\n        children: [['Raw'], null]\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var children = null;\n        var name;\n        var nameLowerCase;\n\n        this.scanner.eat(COLON);\n        this.scanner.eat(COLON);\n\n        if (this.scanner.tokenType === FUNCTION) {\n            name = this.scanner.consumeFunctionName();\n            nameLowerCase = name.toLowerCase();\n\n            if (this.pseudo.hasOwnProperty(nameLowerCase)) {\n                this.scanner.skipSC();\n                children = this.pseudo[nameLowerCase].call(this);\n                this.scanner.skipSC();\n            } else {\n                children = this.createList();\n                children.push(\n                    this.Raw(this.scanner.currentToken, 0, 0, false, false)\n                );\n            }\n\n            this.scanner.eat(RIGHTPARENTHESIS);\n        } else {\n            name = this.scanner.consume(IDENTIFIER);\n        }\n\n        return {\n            type: 'PseudoElementSelector',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            name: name,\n            children: children\n        };\n    },\n    generate: function(node) {\n        this.chunk('::');\n        this.chunk(node.name);\n\n        if (node.children !== null) {\n            this.chunk('(');\n            this.children(node);\n            this.chunk(')');\n        }\n    },\n    walkContext: 'function'\n};\n","module.exports = {\n    name: 'Raw',\n    structure: {\n        value: String\n    },\n    parse: function(startToken, endTokenType1, endTokenType2, includeTokenType2, excludeWhiteSpace) {\n        var startOffset = this.scanner.getTokenStart(startToken);\n        var endOffset;\n\n        this.scanner.skip(\n            this.scanner.getRawLength(\n                startToken,\n                endTokenType1,\n                endTokenType2,\n                includeTokenType2\n            )\n        );\n\n        if (excludeWhiteSpace && this.scanner.tokenStart > startOffset) {\n            endOffset = this.scanner.getOffsetExcludeWS();\n        } else {\n            endOffset = this.scanner.tokenStart;\n        }\n\n        return {\n            type: 'Raw',\n            loc: this.getLocation(startOffset, endOffset),\n            value: this.scanner.source.substring(startOffset, endOffset)\n        };\n    },\n    generate: function(node) {\n        this.chunk(node.value);\n    }\n};\n","var TYPE = require('../../tokenizer').TYPE;\n\nvar COMMA = TYPE.Comma;\n\nmodule.exports = {\n    name: 'SelectorList',\n    structure: {\n        children: [[\n            'Selector',\n            'Raw'\n        ]]\n    },\n    parse: function() {\n        var children = this.createList();\n\n        while (!this.scanner.eof) {\n            children.push(this.Selector());\n\n            if (this.scanner.tokenType === COMMA) {\n                this.scanner.next();\n                continue;\n            }\n\n            break;\n        }\n\n        return {\n            type: 'SelectorList',\n            loc: this.getLocationFromList(children),\n            children: children\n        };\n    },\n    generate: function(node) {\n        this.children(node, function() {\n            this.chunk(',');\n        });\n    },\n    walkContext: 'selector'\n};\n","var STRING = require('../../tokenizer').TYPE.String;\n\nmodule.exports = {\n    name: 'String',\n    structure: {\n        value: String\n    },\n    parse: function() {\n        return {\n            type: 'String',\n            loc: this.getLocation(this.scanner.tokenStart, this.scanner.tokenEnd),\n            value: this.scanner.consume(STRING)\n        };\n    },\n    generate: function(node) {\n        this.chunk(node.value);\n    }\n};\n","var TYPE = require('../../tokenizer').TYPE;\n\nvar STRING = TYPE.String;\nvar URL = TYPE.Url;\nvar RAW = TYPE.Raw;\nvar RIGHTPARENTHESIS = TYPE.RightParenthesis;\n\n// url '(' S* (string | raw) S* ')'\nmodule.exports = {\n    name: 'Url',\n    structure: {\n        value: ['String', 'Raw']\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var value;\n\n        this.scanner.eat(URL);\n        this.scanner.skipSC();\n\n        switch (this.scanner.tokenType) {\n            case STRING:\n                value = this.String();\n                break;\n\n            case RAW:\n                value = this.Raw(this.scanner.currentToken, 0, RAW, true, false);\n                break;\n\n            default:\n                this.scanner.error('String or Raw is expected');\n        }\n\n        this.scanner.skipSC();\n        this.scanner.eat(RIGHTPARENTHESIS);\n\n        return {\n            type: 'Url',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            value: value\n        };\n    },\n    generate: function(node) {\n        this.chunk('url');\n        this.chunk('(');\n        this.node(node.value);\n        this.chunk(')');\n    }\n};\n","var WHITESPACE = require('../../tokenizer').TYPE.WhiteSpace;\nvar SPACE = Object.freeze({\n    type: 'WhiteSpace',\n    loc: null,\n    value: ' '\n});\n\nmodule.exports = {\n    name: 'WhiteSpace',\n    structure: {\n        value: String\n    },\n    parse: function() {\n        this.scanner.eat(WHITESPACE);\n        return SPACE;\n\n        // return {\n        //     type: 'WhiteSpace',\n        //     loc: this.getLocation(this.scanner.tokenStart, this.scanner.tokenEnd),\n        //     value: this.scanner.consume(WHITESPACE)\n        // };\n    },\n    generate: function(node) {\n        this.chunk(node.value);\n    }\n};\n","module.exports = {\n    AnPlusB: require('./AnPlusB'),\n    Atrule: require('./Atrule'),\n    AtrulePrelude: require('./AtrulePrelude'),\n    AttributeSelector: require('./AttributeSelector'),\n    Block: require('./Block'),\n    Brackets: require('./Brackets'),\n    CDC: require('./CDC'),\n    CDO: require('./CDO'),\n    ClassSelector: require('./ClassSelector'),\n    Combinator: require('./Combinator'),\n    Comment: require('./Comment'),\n    Declaration: require('./Declaration'),\n    DeclarationList: require('./DeclarationList'),\n    Dimension: require('./Dimension'),\n    Function: require('./Function'),\n    HexColor: require('./HexColor'),\n    Identifier: require('./Identifier'),\n    IdSelector: require('./IdSelector'),\n    MediaFeature: require('./MediaFeature'),\n    MediaQuery: require('./MediaQuery'),\n    MediaQueryList: require('./MediaQueryList'),\n    Nth: require('./Nth'),\n    Number: require('./Number'),\n    Operator: require('./Operator'),\n    Parentheses: require('./Parentheses'),\n    Percentage: require('./Percentage'),\n    PseudoClassSelector: require('./PseudoClassSelector'),\n    PseudoElementSelector: require('./PseudoElementSelector'),\n    Ratio: require('./Ratio'),\n    Raw: require('./Raw'),\n    Rule: require('./Rule'),\n    Selector: require('./Selector'),\n    SelectorList: require('./SelectorList'),\n    String: require('./String'),\n    StyleSheet: require('./StyleSheet'),\n    TypeSelector: require('./TypeSelector'),\n    UnicodeRange: require('./UnicodeRange'),\n    Url: require('./Url'),\n    Value: require('./Value'),\n    WhiteSpace: require('./WhiteSpace')\n};\n","// https://drafts.csswg.org/css-syntax-3/#the-anb-type\nmodule.exports = {\n    name: 'Nth',\n    structure: {\n        nth: ['AnPlusB', 'Identifier'],\n        selector: ['SelectorList', null]\n    },\n    parse: function(allowOfClause) {\n        this.scanner.skipSC();\n\n        var start = this.scanner.tokenStart;\n        var end = start;\n        var selector = null;\n        var query;\n\n        if (this.scanner.lookupValue(0, 'odd') || this.scanner.lookupValue(0, 'even')) {\n            query = this.Identifier();\n        } else {\n            query = this.AnPlusB();\n        }\n\n        this.scanner.skipSC();\n\n        if (allowOfClause && this.scanner.lookupValue(0, 'of')) {\n            this.scanner.next();\n\n            selector = this.SelectorList();\n\n            if (this.needPositions) {\n                end = this.getLastListNode(selector.children).loc.end.offset;\n            }\n        } else {\n            if (this.needPositions) {\n                end = query.loc.end.offset;\n            }\n        }\n\n        return {\n            type: 'Nth',\n            loc: this.getLocation(start, end),\n            nth: query,\n            selector: selector\n        };\n    },\n    generate: function(node) {\n        this.node(node.nth);\n        if (node.selector !== null) {\n            this.chunk(' of ');\n            this.node(node.selector);\n        }\n    }\n};\n","module.exports = {\n    name: 'Selector',\n    structure: {\n        children: [[\n            'TypeSelector',\n            'IdSelector',\n            'ClassSelector',\n            'AttributeSelector',\n            'PseudoClassSelector',\n            'PseudoElementSelector',\n            'Combinator',\n            'WhiteSpace'\n        ]]\n    },\n    parse: function() {\n        var children = this.readSequence(this.scope.Selector);\n\n        // nothing were consumed\n        if (this.getFirstListNode(children) === null) {\n            this.scanner.error('Selector is expected');\n        }\n\n        return {\n            type: 'Selector',\n            loc: this.getLocationFromList(children),\n            children: children\n        };\n    },\n    generate: function(node) {\n        this.children(node);\n    }\n};\n","module.exports = {\n    name: 'Value',\n    structure: {\n        children: [[]]\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var children = this.readSequence(this.scope.Value);\n\n        return {\n            type: 'Value',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            children: children\n        };\n    },\n    generate: function(node) {\n        this.children(node);\n    }\n};\n","var data = require('../../../data');\n\nmodule.exports = {\n    generic: true,\n    types: data.types,\n    properties: data.properties,\n    node: require('../node')\n};\n","var cmpChar = require('../../tokenizer').cmpChar;\nvar TYPE = require('../../tokenizer').TYPE;\n\nvar IDENTIFIER = TYPE.Identifier;\nvar STRING = TYPE.String;\nvar NUMBER = TYPE.Number;\nvar FUNCTION = TYPE.Function;\nvar URL = TYPE.Url;\nvar NUMBERSIGN = TYPE.NumberSign;\nvar LEFTPARENTHESIS = TYPE.LeftParenthesis;\nvar LEFTSQUAREBRACKET = TYPE.LeftSquareBracket;\nvar PLUSSIGN = TYPE.PlusSign;\nvar HYPHENMINUS = TYPE.HyphenMinus;\nvar COMMA = TYPE.Comma;\nvar SOLIDUS = TYPE.Solidus;\nvar ASTERISK = TYPE.Asterisk;\nvar PERCENTSIGN = TYPE.PercentSign;\nvar BACKSLASH = TYPE.Backslash;\nvar U = 117; // 'u'.charCodeAt(0)\n\nmodule.exports = function defaultRecognizer(context) {\n    switch (this.scanner.tokenType) {\n        case NUMBERSIGN:\n            return this.HexColor();\n\n        case COMMA:\n            context.space = null;\n            context.ignoreWSAfter = true;\n            return this.Operator();\n\n        case SOLIDUS:\n        case ASTERISK:\n        case PLUSSIGN:\n        case HYPHENMINUS:\n            return this.Operator();\n\n        case LEFTPARENTHESIS:\n            return this.Parentheses(this.readSequence, context.recognizer);\n\n        case LEFTSQUAREBRACKET:\n            return this.Brackets(this.readSequence, context.recognizer);\n\n        case STRING:\n            return this.String();\n\n        case NUMBER:\n            switch (this.scanner.lookupType(1)) {\n                case PERCENTSIGN:\n                    return this.Percentage();\n\n                case IDENTIFIER:\n                    // edge case: number with folowing \\0 and \\9 hack shouldn't to be a Dimension\n                    if (cmpChar(this.scanner.source, this.scanner.tokenEnd, BACKSLASH)) {\n                        return this.Number();\n                    } else {\n                        return this.Dimension();\n                    }\n\n                default:\n                    return this.Number();\n            }\n\n        case FUNCTION:\n            return this.Function(this.readSequence, context.recognizer);\n\n        case URL:\n            return this.Url();\n\n        case IDENTIFIER:\n            // check for unicode range, it should start with u+ or U+\n            if (cmpChar(this.scanner.source, this.scanner.tokenStart, U) &&\n                cmpChar(this.scanner.source, this.scanner.tokenStart + 1, PLUSSIGN)) {\n                return this.UnicodeRange();\n            } else {\n                return this.Identifier();\n            }\n    }\n};\n","var TYPE = require('../../tokenizer').TYPE;\n\nvar IDENTIFIER = TYPE.Identifier;\nvar NUMBER = TYPE.Number;\nvar NUMBERSIGN = TYPE.NumberSign;\nvar LEFTSQUAREBRACKET = TYPE.LeftSquareBracket;\nvar PLUSSIGN = TYPE.PlusSign;\nvar SOLIDUS = TYPE.Solidus;\nvar ASTERISK = TYPE.Asterisk;\nvar FULLSTOP = TYPE.FullStop;\nvar COLON = TYPE.Colon;\nvar GREATERTHANSIGN = TYPE.GreaterThanSign;\nvar VERTICALLINE = TYPE.VerticalLine;\nvar TILDE = TYPE.Tilde;\n\nfunction getNode(context) {\n    switch (this.scanner.tokenType) {\n        case PLUSSIGN:\n        case GREATERTHANSIGN:\n        case TILDE:\n            context.space = null;\n            context.ignoreWSAfter = true;\n            return this.Combinator();\n\n        case SOLIDUS:  // /deep/\n            return this.Combinator();\n\n        case FULLSTOP:\n            return this.ClassSelector();\n\n        case LEFTSQUAREBRACKET:\n            return this.AttributeSelector();\n\n        case NUMBERSIGN:\n            return this.IdSelector();\n\n        case COLON:\n            if (this.scanner.lookupType(1) === COLON) {\n                return this.PseudoElementSelector();\n            } else {\n                return this.PseudoClassSelector();\n            }\n\n        case IDENTIFIER:\n        case ASTERISK:\n        case VERTICALLINE:\n            return this.TypeSelector();\n\n        case NUMBER:\n            return this.Percentage();\n    }\n};\n\nmodule.exports = {\n    getNode: getNode\n};\n","// https://drafts.csswg.org/css-images-4/#element-notation\n// https://developer.mozilla.org/en-US/docs/Web/CSS/element\nmodule.exports = function() {\n    this.scanner.skipSC();\n\n    var children = this.createSingleNodeList(\n        this.IdSelector()\n    );\n\n    this.scanner.skipSC();\n\n    return children;\n};\n","var TYPE = require('../../tokenizer').TYPE;\n\nvar IDENTIFIER = TYPE.Identifier;\nvar COMMA = TYPE.Comma;\nvar SEMICOLON = TYPE.Semicolon;\nvar HYPHENMINUS = TYPE.HyphenMinus;\nvar EXCLAMATIONMARK = TYPE.ExclamationMark;\n\n// var '(' ident (',' <value>? )? ')'\nmodule.exports = function() {\n    var children = this.createList();\n\n    this.scanner.skipSC();\n\n    var identStart = this.scanner.tokenStart;\n\n    this.scanner.eat(HYPHENMINUS);\n    if (this.scanner.source.charCodeAt(this.scanner.tokenStart) !== HYPHENMINUS) {\n        this.scanner.error('HyphenMinus is expected');\n    }\n    this.scanner.eat(IDENTIFIER);\n\n    children.push({\n        type: 'Identifier',\n        loc: this.getLocation(identStart, this.scanner.tokenStart),\n        name: this.scanner.substrToCursor(identStart)\n    });\n\n    this.scanner.skipSC();\n\n    if (this.scanner.tokenType === COMMA) {\n        children.push(this.Operator());\n        children.push(this.parseCustomProperty\n            ? this.Value(null)\n            : this.Raw(this.scanner.currentToken, EXCLAMATIONMARK, SEMICOLON, false, false)\n        );\n    }\n\n    return children;\n};\n","var TYPE = require('../../tokenizer').TYPE;\n\nvar STRING = TYPE.String;\nvar IDENTIFIER = TYPE.Identifier;\nvar URL = TYPE.Url;\nvar LEFTPARENTHESIS = TYPE.LeftParenthesis;\n\nmodule.exports = {\n    parse: {\n        prelude: function() {\n            var children = this.createList();\n\n            this.scanner.skipSC();\n\n            switch (this.scanner.tokenType) {\n                case STRING:\n                    children.push(this.String());\n                    break;\n\n                case URL:\n                    children.push(this.Url());\n                    break;\n\n                default:\n                    this.scanner.error('String or url() is expected');\n            }\n\n            if (this.scanner.lookupNonWSType(0) === IDENTIFIER ||\n                this.scanner.lookupNonWSType(0) === LEFTPARENTHESIS) {\n                children.push(this.WhiteSpace());\n                children.push(this.MediaQueryList());\n            }\n\n            return children;\n        },\n        block: null\n    }\n};\n","module.exports = {\n    parse: function selectorList() {\n        return this.createSingleNodeList(\n            this.SelectorList()\n        );\n    }\n};\n","var ALLOW_OF_CLAUSE = true;\n\nmodule.exports = {\n    parse: function nthWithOfClause() {\n        return this.createSingleNodeList(\n            this.Nth(ALLOW_OF_CLAUSE)\n        );\n    }\n};\n","var DISALLOW_OF_CLAUSE = false;\n\nmodule.exports = {\n    parse: function nth() {\n        return this.createSingleNodeList(\n            this.Nth(DISALLOW_OF_CLAUSE)\n        );\n    }\n};\n","function merge() {\n    var dest = {};\n\n    for (var i = 0; i < arguments.length; i++) {\n        var src = arguments[i];\n        for (var key in src) {\n            dest[key] = src[key];\n        }\n    }\n\n    return dest;\n}\n\nmodule.exports = require('./create').create(\n    merge(\n        require('./config/lexer'),\n        require('./config/parser'),\n        require('./config/walker')\n    )\n);\n","module.exports = {\n    parseContext: {\n        default: 'StyleSheet',\n        stylesheet: 'StyleSheet',\n        atrule: 'Atrule',\n        atrulePrelude: function(options) {\n            return this.AtrulePrelude(options.atrule ? String(options.atrule) : null);\n        },\n        mediaQueryList: 'MediaQueryList',\n        mediaQuery: 'MediaQuery',\n        rule: 'Rule',\n        selectorList: 'SelectorList',\n        selector: 'Selector',\n        block: function() {\n            return this.Block(true);\n        },\n        declarationList: 'DeclarationList',\n        declaration: 'Declaration',\n        value: 'Value'\n    },\n    scope: require('../scope'),\n    atrule: require('../atrule'),\n    pseudo: require('../pseudo'),\n    node: require('../node')\n};\n","module.exports = {\n    AtrulePrelude: require('./atrulePrelude'),\n    Selector: require('./selector'),\n    Value: require('./value')\n};\n","module.exports = {\n    getNode: require('./default')\n};\n","module.exports = {\n    getNode: require('./default'),\n    '-moz-element': require('../function/element'),\n    'element': require('../function/element'),\n    'expression': require('../function/expression'),\n    'var': require('../function/var')\n};\n","// legacy IE function\n// expression '(' raw ')'\nmodule.exports = function() {\n    return this.createSingleNodeList(\n        this.Raw(this.scanner.currentToken, 0, 0, false, false)\n    );\n};\n","module.exports = {\n    'font-face': require('./font-face'),\n    'import': require('./import'),\n    'media': require('./media'),\n    'page': require('./page'),\n    'supports': require('./supports')\n};\n","module.exports = {\n    parse: {\n        prelude: null,\n        block: function() {\n            return this.Block(true);\n        }\n    }\n};\n","module.exports = {\n    parse: {\n        prelude: function() {\n            return this.createSingleNodeList(\n                this.MediaQueryList()\n            );\n        },\n        block: function() {\n            return this.Block(false);\n        }\n    }\n};\n","module.exports = {\n    parse: {\n        prelude: function() {\n            return this.createSingleNodeList(\n                this.SelectorList()\n            );\n        },\n        block: function() {\n            return this.Block(true);\n        }\n    }\n};\n","module.exports = {\n    'dir': require('./dir'),\n    'has': require('./has'),\n    'lang': require('./lang'),\n    'matches': require('./matches'),\n    'not': require('./not'),\n    'nth-child': require('./nth-child'),\n    'nth-last-child': require('./nth-last-child'),\n    'nth-last-of-type': require('./nth-last-of-type'),\n    'nth-of-type': require('./nth-of-type'),\n    'slotted': require('./slotted')\n};\n","module.exports = {\n    parse: function() {\n        return this.createSingleNodeList(\n            this.Identifier()\n        );\n    }\n};\n","module.exports = {\n    parse: function() {\n        return this.createSingleNodeList(\n            this.SelectorList()\n        );\n    }\n};\n","module.exports = {\n    parse: function() {\n        return this.createSingleNodeList(\n            this.Identifier()\n        );\n    }\n};\n","module.exports = {\n    parse: function compoundSelector() {\n        return this.createSingleNodeList(\n            this.Selector()\n        );\n    }\n};\n","module.exports = {\n    node: require('../node')\n};\n","//! stable.js 0.1.8, https://github.com/Two-Screen/stable\n//! © 2018 Angry Bytes and contributors. MIT licensed.\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global.stable = factory());\n}(this, (function () { 'use strict';\n\n  // A stable array sort, because `Array#sort()` is not guaranteed stable.\n  // This is an implementation of merge sort, without recursion.\n\n  var stable = function (arr, comp) {\n    return exec(arr.slice(), comp)\n  };\n\n  stable.inplace = function (arr, comp) {\n    var result = exec(arr, comp);\n\n    // This simply copies back if the result isn't in the original array,\n    // which happens on an odd number of passes.\n    if (result !== arr) {\n      pass(result, null, arr.length, arr);\n    }\n\n    return arr\n  };\n\n  // Execute the sort using the input array and a second buffer as work space.\n  // Returns one of those two, containing the final result.\n  function exec(arr, comp) {\n    if (typeof(comp) !== 'function') {\n      comp = function (a, b) {\n        return String(a).localeCompare(b)\n      };\n    }\n\n    // Short-circuit when there's nothing to sort.\n    var len = arr.length;\n    if (len <= 1) {\n      return arr\n    }\n\n    // Rather than dividing input, simply iterate chunks of 1, 2, 4, 8, etc.\n    // Chunks are the size of the left or right hand in merge sort.\n    // Stop when the left-hand covers all of the array.\n    var buffer = new Array(len);\n    for (var chk = 1; chk < len; chk *= 2) {\n      pass(arr, comp, chk, buffer);\n\n      var tmp = arr;\n      arr = buffer;\n      buffer = tmp;\n    }\n\n    return arr\n  }\n\n  // Run a single pass with the given chunk size.\n  var pass = function (arr, comp, chk, result) {\n    var len = arr.length;\n    var i = 0;\n    // Step size / double chunk size.\n    var dbl = chk * 2;\n    // Bounds of the left and right chunks.\n    var l, r, e;\n    // Iterators over the left and right chunk.\n    var li, ri;\n\n    // Iterate over pairs of chunks.\n    for (l = 0; l < len; l += dbl) {\n      r = l + chk;\n      e = r + chk;\n      if (r > len) r = len;\n      if (e > len) e = len;\n\n      // Iterate both chunks in parallel.\n      li = l;\n      ri = r;\n      while (true) {\n        // Compare the chunks.\n        if (li < r && ri < e) {\n          // This works for a regular `sort()` compatible comparator,\n          // but also for a simple comparator like: `a > b`\n          if (comp(arr[li], arr[ri]) <= 0) {\n            result[i++] = arr[li++];\n          }\n          else {\n            result[i++] = arr[ri++];\n          }\n        }\n        // Nothing to compare, just flush what's left.\n        else if (li < r) {\n          result[i++] = arr[li++];\n        }\n        else if (ri < e) {\n          result[i++] = arr[ri++];\n        }\n        // Both iterators are at the chunk ends.\n        else {\n          break\n        }\n      }\n    }\n  };\n\n  return stable;\n\n})));\n","module.exports = function specificity(simpleSelector) {\n    var A = 0;\n    var B = 0;\n    var C = 0;\n\n    simpleSelector.children.each(function walk(node) {\n        switch (node.type) {\n            case 'SelectorList':\n            case 'Selector':\n                node.children.each(walk);\n                break;\n\n            case 'IdSelector':\n                A++;\n                break;\n\n            case 'ClassSelector':\n            case 'AttributeSelector':\n                B++;\n                break;\n\n            case 'PseudoClassSelector':\n                switch (node.name.toLowerCase()) {\n                    case 'not':\n                        node.children.each(walk);\n                        break;\n\n                    case 'before':\n                    case 'after':\n                    case 'first-line':\n                    case 'first-letter':\n                        C++;\n                        break;\n\n                    // TODO: support for :nth-*(.. of <SelectorList>), :matches(), :has()\n\n                    default:\n                        B++;\n                }\n                break;\n\n            case 'PseudoElementSelector':\n                C++;\n                break;\n\n            case 'TypeSelector':\n                // ignore universal selector\n                if (node.name.charAt(node.name.length - 1) !== '*') {\n                    C++;\n                }\n                break;\n\n        }\n    });\n\n    return [A, B, C];\n};\n","'use strict';\n\nvar csstree = require('css-tree'),\n    csstools = require('../css-tools');\n\n\nvar CSSStyleDeclaration = function(node) {\n    this.parentNode = node;\n\n    this.properties = new Map();\n    this.hasSynced = false;\n\n    this.styleAttr = null;\n    this.styleValue = null;\n\n    this.parseError = false;\n};\n\n/**\n * Performs a deep clone of this object.\n *\n * @param parentNode the parentNode to assign to the cloned result\n */\nCSSStyleDeclaration.prototype.clone = function(parentNode) {\n    var node = this;\n    var nodeData = {};\n\n    Object.keys(node).forEach(function(key) {\n        if (key !== 'parentNode') {\n            nodeData[key] = node[key];\n        }\n    });\n\n    // Deep-clone node data.\n    nodeData = JSON.parse(JSON.stringify(nodeData));\n\n    var clone = new CSSStyleDeclaration(parentNode);\n    Object.assign(clone, nodeData);\n    return clone;\n};\n\nCSSStyleDeclaration.prototype.hasStyle = function() {\n    this.addStyleHandler();\n};\n\n\n\n\n// attr.style\n\nCSSStyleDeclaration.prototype.addStyleHandler = function() {\n\n    this.styleAttr = { // empty style attr\n        'name': 'style',\n        'value': null\n    };\n\n    Object.defineProperty(this.parentNode.attrs, 'style', {\n        get: this.getStyleAttr.bind(this),\n        set: this.setStyleAttr.bind(this),\n        enumerable: true,\n        configurable: true\n    });\n\n    this.addStyleValueHandler();\n};\n\n// attr.style.value\n\nCSSStyleDeclaration.prototype.addStyleValueHandler = function() {\n\n    Object.defineProperty(this.styleAttr, 'value', {\n        get: this.getStyleValue.bind(this),\n        set: this.setStyleValue.bind(this),\n        enumerable: true,\n        configurable: true\n    });\n};\n\nCSSStyleDeclaration.prototype.getStyleAttr = function() {\n    return this.styleAttr;\n};\n\nCSSStyleDeclaration.prototype.setStyleAttr = function(newStyleAttr) {\n    this.setStyleValue(newStyleAttr.value); // must before applying value handler!\n\n    this.styleAttr = newStyleAttr;\n    this.addStyleValueHandler();\n    this.hasSynced = false; // raw css changed\n};\n\nCSSStyleDeclaration.prototype.getStyleValue = function() {\n    return this.getCssText();\n};\n\nCSSStyleDeclaration.prototype.setStyleValue = function(newValue) {\n    this.properties.clear(); // reset all existing properties\n    this.styleValue = newValue;\n    this.hasSynced = false; // raw css changed\n};\n\n\n\n\nCSSStyleDeclaration.prototype._loadCssText = function() {\n    if (this.hasSynced) {\n        return;\n    }\n    this.hasSynced = true; // must be set here to prevent loop in setProperty(...)\n\n    if (!this.styleValue || this.styleValue.length === 0) {\n        return;\n    }\n    var inlineCssStr = this.styleValue;\n\n    var declarations = {};\n    try {\n        declarations = csstree.parse(inlineCssStr, {\n            context: 'declarationList',\n            parseValue: false\n        });\n    } catch (parseError) {\n        this.parseError = parseError;\n        return;\n    }\n    this.parseError = false;\n\n    var self = this;\n    declarations.children.each(function(declaration) {\n        try {\n          var styleDeclaration = csstools.csstreeToStyleDeclaration(declaration);\n          self.setProperty(styleDeclaration.name, styleDeclaration.value, styleDeclaration.priority);\n        } catch(styleError) {\n            if(styleError.message !== 'Unknown node type: undefined') {\n                self.parseError = styleError;\n            }\n        }\n    });\n};\n\n\n// only reads from properties\n\n/**\n * Get the textual representation of the declaration block (equivalent to .cssText attribute).\n *\n * @return {String} Textual representation of the declaration block (empty string for no properties)\n */\nCSSStyleDeclaration.prototype.getCssText = function() {\n    var properties = this.getProperties();\n\n    if (this.parseError) {\n        // in case of a parse error, pass through original styles\n        return this.styleValue;\n    }\n\n    var cssText = [];\n    properties.forEach(function(property, propertyName) {\n        var strImportant = property.priority === 'important' ? '!important' : '';\n        cssText.push(propertyName.trim() + ':' + property.value.trim() + strImportant);\n    });\n    return cssText.join(';');\n};\n\nCSSStyleDeclaration.prototype._handleParseError = function() {\n    if (this.parseError) {\n        console.warn('Warning: Parse error when parsing inline styles, style properties of this element cannot be used. The raw styles can still be get/set using .attr(\\'style\\').value. Error details: ' + this.parseError);\n    }\n};\n\n\nCSSStyleDeclaration.prototype._getProperty = function(propertyName) {\n    if(typeof propertyName === 'undefined') {\n        throw Error('1 argument required, but only 0 present.');\n    }\n\n    var properties = this.getProperties();\n    this._handleParseError();\n\n    var property = properties.get(propertyName.trim());\n    return property;\n};\n\n/**\n * Return the optional priority, \"important\".\n *\n * @param {String} propertyName representing the property name to be checked.\n * @return {String} priority that represents the priority (e.g. \"important\") if one exists. If none exists, returns the empty string.\n */\nCSSStyleDeclaration.prototype.getPropertyPriority = function(propertyName) {\n    var property = this._getProperty(propertyName);\n    return property ? property.priority : '';\n};\n\n/**\n * Return the property value given a property name.\n *\n * @param {String} propertyName representing the property name to be checked.\n * @return {String} value containing the value of the property. If not set, returns the empty string.\n */\nCSSStyleDeclaration.prototype.getPropertyValue = function(propertyName) {\n    var property = this._getProperty(propertyName);\n    return property ? property.value : null;\n};\n\n/**\n * Return a property name.\n *\n * @param {Number} index of the node to be fetched. The index is zero-based.\n * @return {String} propertyName that is the name of the CSS property at the specified index.\n */\nCSSStyleDeclaration.prototype.item = function(index) {\n    if(typeof index === 'undefined') {\n        throw Error('1 argument required, but only 0 present.');\n    }\n\n    var properties = this.getProperties();\n    this._handleParseError();\n\n    return Array.from(properties.keys())[index];\n};\n\n/**\n * Return all properties of the node.\n *\n * @return {Map} properties that is a Map with propertyName as key and property (propertyValue + propertyPriority) as value.\n */\nCSSStyleDeclaration.prototype.getProperties = function() {\n    this._loadCssText();\n    return this.properties;\n};\n\n\n// writes to properties\n\n/**\n * Remove a property from the CSS declaration block.\n *\n * @param {String} propertyName representing the property name to be removed.\n * @return {String} oldValue equal to the value of the CSS property before it was removed.\n */\nCSSStyleDeclaration.prototype.removeProperty = function(propertyName) {\n    if(typeof propertyName === 'undefined') {\n        throw Error('1 argument required, but only 0 present.');\n    }\n\n    this.hasStyle();\n\n    var properties = this.getProperties();\n    this._handleParseError();\n\n    var oldValue = this.getPropertyValue(propertyName);\n    properties.delete(propertyName.trim());\n    return oldValue;\n};\n\n/**\n * Modify an existing CSS property or creates a new CSS property in the declaration block.\n *\n * @param {String} propertyName representing the CSS property name to be modified.\n * @param {String} [value] containing the new property value. If not specified, treated as the empty string. value must not contain \"!important\" -- that should be set using the priority parameter.\n * @param {String} [priority] allowing the \"important\" CSS priority to be set. If not specified, treated as the empty string.\n * @return {undefined}\n */\nCSSStyleDeclaration.prototype.setProperty = function(propertyName, value, priority) {\n    if(typeof propertyName === 'undefined') {\n        throw Error('propertyName argument required, but only not present.');\n    }\n\n    this.hasStyle();\n\n    var properties = this.getProperties();\n    this._handleParseError();\n\n    var property = {\n        value: value.trim(),\n        priority: priority.trim()\n    };\n    properties.set(propertyName.trim(), property);\n\n    return property;\n};\n\n\nmodule.exports = CSSStyleDeclaration;\n","'use strict';\n\nvar SAX = require('sax'),\n    JSAPI = require('./jsAPI.js'),\n    CSSClassList = require('./css-class-list'),\n    CSSStyleDeclaration = require('./css-style-declaration'),\n    entityDeclaration = /<!ENTITY\\s+(\\S+)\\s+(?:'([^\\']+)'|\"([^\\\"]+)\")\\s*>/g;\n\nvar config = {\n    strict: true,\n    trim: false,\n    normalize: true,\n    lowercase: true,\n    xmlns: true,\n    position: true\n};\n\n/**\n * Convert SVG (XML) string to SVG-as-JS object.\n *\n * @param {String} data input data\n * @param {Function} callback\n */\nmodule.exports = function(data, callback) {\n\n    var sax = SAX.parser(config.strict, config),\n        root = new JSAPI({ elem: '#document', content: [] }),\n        current = root,\n        stack = [root],\n        textContext = null,\n        parsingError = false;\n\n    function pushToContent(content) {\n\n        content = new JSAPI(content, current);\n\n        (current.content = current.content || []).push(content);\n\n        return content;\n\n    }\n\n    sax.ondoctype = function(doctype) {\n\n        pushToContent({\n            doctype: doctype\n        });\n\n        var subsetStart = doctype.indexOf('['),\n            entityMatch;\n\n        if (subsetStart >= 0) {\n            entityDeclaration.lastIndex = subsetStart;\n\n            while ((entityMatch = entityDeclaration.exec(data)) != null) {\n                sax.ENTITIES[entityMatch[1]] = entityMatch[2] || entityMatch[3];\n            }\n        }\n    };\n\n    sax.onprocessinginstruction = function(data) {\n\n        pushToContent({\n            processinginstruction: data\n        });\n\n    };\n\n    sax.oncomment = function(comment) {\n\n        pushToContent({\n            comment: comment.trim()\n        });\n\n    };\n\n    sax.oncdata = function(cdata) {\n\n        pushToContent({\n            cdata: cdata\n        });\n\n    };\n\n    sax.onopentag = function(data) {\n\n        var elem = {\n            elem: data.name,\n            prefix: data.prefix,\n            local: data.local,\n            attrs: {}\n        };\n\n        elem.class = new CSSClassList(elem);\n        elem.style = new CSSStyleDeclaration(elem);\n\n        if (Object.keys(data.attributes).length) {\n            for (var name in data.attributes) {\n\n                if (name === 'class') { // has class attribute\n                    elem.class.hasClass();\n                }\n\n                if (name === 'style') { // has style attribute\n                    elem.style.hasStyle();\n                }\n\n                elem.attrs[name] = {\n                    name: name,\n                    value: data.attributes[name].value,\n                    prefix: data.attributes[name].prefix,\n                    local: data.attributes[name].local\n                };\n            }\n        }\n\n        elem = pushToContent(elem);\n        current = elem;\n\n        // Save info about <text> tag to prevent trimming of meaningful whitespace\n        if (data.name == 'text' && !data.prefix) {\n            textContext = current;\n        }\n\n        stack.push(elem);\n\n    };\n\n    sax.ontext = function(text) {\n\n        if (/\\S/.test(text) || textContext) {\n\n            if (!textContext)\n                text = text.trim();\n\n            pushToContent({\n                text: text\n            });\n\n        }\n\n    };\n\n    sax.onclosetag = function() {\n\n        var last = stack.pop();\n\n        // Trim text inside <text> tag.\n        if (last == textContext) {\n            trim(textContext);\n            textContext = null;\n        }\n        current = stack[stack.length - 1];\n\n    };\n\n    sax.onerror = function(e) {\n\n        e.message = 'Error in parsing SVG: ' + e.message;\n        if (e.message.indexOf('Unexpected end') < 0) {\n            throw e;\n        }\n\n    };\n\n    sax.onend = function() {\n\n        if (!this.error) {\n            callback(root);\n        } else {\n            callback({ error: this.error.message });\n        }\n\n    };\n\n    try {\n        sax.write(data);\n    } catch (e) {\n        callback({ error: e.message });\n        parsingError = true;\n    }\n    if (!parsingError) sax.close();\n\n    function trim(elem) {\n        if (!elem.content) return elem;\n\n        var start = elem.content[0],\n            end = elem.content[elem.content.length - 1];\n\n        while (start && start.content && !start.text) start = start.content[0];\n        if (start && start.text) start.text = start.text.replace(/^\\s+/, '');\n\n        while (end && end.content && !end.text) end = end.content[end.content.length - 1];\n        if (end && end.text) end.text = end.text.replace(/\\s+$/, '');\n\n        return elem;\n\n    }\n\n};\n","'use strict';\n\n// http://www.w3.org/TR/SVG11/intro.html#Definitions\nexports.elemsGroups = {\n    animation: ['animate', 'animateColor', 'animateMotion', 'animateTransform', 'set'],\n    descriptive: ['desc', 'metadata', 'title'],\n    shape: ['circle', 'ellipse', 'line', 'path', 'polygon', 'polyline', 'rect'],\n    structural: ['defs', 'g', 'svg', 'symbol', 'use'],\n    paintServer: ['solidColor', 'linearGradient', 'radialGradient', 'meshGradient', 'pattern', 'hatch'],\n    nonRendering: ['linearGradient', 'radialGradient', 'pattern', 'clipPath', 'mask', 'marker', 'symbol', 'filter', 'solidColor'],\n    container: ['a', 'defs', 'g', 'marker', 'mask', 'missing-glyph', 'pattern', 'svg', 'switch', 'symbol', 'foreignObject'],\n    textContent: ['altGlyph', 'altGlyphDef', 'altGlyphItem', 'glyph', 'glyphRef', 'textPath', 'text', 'tref', 'tspan'],\n    textContentChild: ['altGlyph', 'textPath', 'tref', 'tspan'],\n    lightSource: ['feDiffuseLighting', 'feSpecularLighting', 'feDistantLight', 'fePointLight', 'feSpotLight'],\n    filterPrimitive: ['feBlend', 'feColorMatrix', 'feComponentTransfer', 'feComposite', 'feConvolveMatrix', 'feDiffuseLighting', 'feDisplacementMap', 'feFlood', 'feGaussianBlur', 'feImage', 'feMerge', 'feMorphology', 'feOffset', 'feSpecularLighting', 'feTile', 'feTurbulence']\n};\n\nexports.pathElems = ['path', 'glyph', 'missing-glyph'];\n\n// http://www.w3.org/TR/SVG11/intro.html#Definitions\nexports.attrsGroups = {\n    animationAddition: ['additive', 'accumulate'],\n    animationAttributeTarget: ['attributeType', 'attributeName'],\n    animationEvent: ['onbegin', 'onend', 'onrepeat', 'onload'],\n    animationTiming: ['begin', 'dur', 'end', 'min', 'max', 'restart', 'repeatCount', 'repeatDur', 'fill'],\n    animationValue: ['calcMode', 'values', 'keyTimes', 'keySplines', 'from', 'to', 'by'],\n    conditionalProcessing: ['requiredFeatures', 'requiredExtensions', 'systemLanguage'],\n    core: ['id', 'tabindex', 'xml:base', 'xml:lang', 'xml:space'],\n    graphicalEvent: ['onfocusin', 'onfocusout', 'onactivate', 'onclick', 'onmousedown', 'onmouseup', 'onmouseover', 'onmousemove', 'onmouseout', 'onload'],\n    presentation: [\n        'alignment-baseline',\n        'baseline-shift',\n        'clip',\n        'clip-path',\n        'clip-rule',\n        'color',\n        'color-interpolation',\n        'color-interpolation-filters',\n        'color-profile',\n        'color-rendering',\n        'cursor',\n        'direction',\n        'display',\n        'dominant-baseline',\n        'enable-background',\n        'fill',\n        'fill-opacity',\n        'fill-rule',\n        'filter',\n        'flood-color',\n        'flood-opacity',\n        'font-family',\n        'font-size',\n        'font-size-adjust',\n        'font-stretch',\n        'font-style',\n        'font-variant',\n        'font-weight',\n        'glyph-orientation-horizontal',\n        'glyph-orientation-vertical',\n        'image-rendering',\n        'letter-spacing',\n        'lighting-color',\n        'marker-end',\n        'marker-mid',\n        'marker-start',\n        'mask',\n        'opacity',\n        'overflow',\n        'paint-order',\n        'pointer-events',\n        'shape-rendering',\n        'stop-color',\n        'stop-opacity',\n        'stroke',\n        'stroke-dasharray',\n        'stroke-dashoffset',\n        'stroke-linecap',\n        'stroke-linejoin',\n        'stroke-miterlimit',\n        'stroke-opacity',\n        'stroke-width',\n        'text-anchor',\n        'text-decoration',\n        'text-overflow',\n        'text-rendering',\n        'transform',\n        'unicode-bidi',\n        'vector-effect',\n        'visibility',\n        'word-spacing',\n        'writing-mode'\n    ],\n    xlink: ['xlink:href', 'xlink:show', 'xlink:actuate', 'xlink:type', 'xlink:role', 'xlink:arcrole', 'xlink:title'],\n    documentEvent: ['onunload', 'onabort', 'onerror', 'onresize', 'onscroll', 'onzoom'],\n    filterPrimitive: ['x', 'y', 'width', 'height', 'result'],\n    transferFunction: ['type', 'tableValues', 'slope', 'intercept', 'amplitude', 'exponent', 'offset']\n};\n\nexports.attrsGroupsDefaults = {\n    core: {'xml:space': 'preserve'},\n    filterPrimitive: {x: '0', y: '0', width: '100%', height: '100%'},\n    presentation: {\n        clip: 'auto',\n        'clip-path': 'none',\n        'clip-rule': 'nonzero',\n        mask: 'none',\n        opacity: '1',\n        'stop-color': '#000',\n        'stop-opacity': '1',\n        'fill-opacity': '1',\n        'fill-rule': 'nonzero',\n        fill: '#000',\n        stroke: 'none',\n        'stroke-width': '1',\n        'stroke-linecap': 'butt',\n        'stroke-linejoin': 'miter',\n        'stroke-miterlimit': '4',\n        'stroke-dasharray': 'none',\n        'stroke-dashoffset': '0',\n        'stroke-opacity': '1',\n        'paint-order': 'normal',\n        'vector-effect': 'none',\n        display: 'inline',\n        visibility: 'visible',\n        'marker-start': 'none',\n        'marker-mid': 'none',\n        'marker-end': 'none',\n        'color-interpolation': 'sRGB',\n        'color-interpolation-filters': 'linearRGB',\n        'color-rendering': 'auto',\n        'shape-rendering': 'auto',\n        'text-rendering': 'auto',\n        'image-rendering': 'auto',\n        'font-style': 'normal',\n        'font-variant': 'normal',\n        'font-weight': 'normal',\n        'font-stretch': 'normal',\n        'font-size': 'medium',\n        'font-size-adjust': 'none',\n        kerning: 'auto',\n        'letter-spacing': 'normal',\n        'word-spacing': 'normal',\n        'text-decoration': 'none',\n        'text-anchor': 'start',\n        'text-overflow': 'clip',\n        'writing-mode': 'lr-tb',\n        'glyph-orientation-vertical': 'auto',\n        'glyph-orientation-horizontal': '0deg',\n        direction: 'ltr',\n        'unicode-bidi': 'normal',\n        'dominant-baseline': 'auto',\n        'alignment-baseline': 'baseline',\n        'baseline-shift': 'baseline'\n    },\n    transferFunction: {slope: '1', intercept: '0', amplitude: '1', exponent: '1', offset: '0'}\n};\n\n// http://www.w3.org/TR/SVG11/eltindex.html\nexports.elems = {\n    a: {\n        attrsGroups: [\n            'conditionalProcessing',\n            'core',\n            'graphicalEvent',\n            'presentation',\n            'xlink'\n        ],\n        attrs: [\n            'class',\n            'style',\n            'externalResourcesRequired',\n            'transform',\n            'target'\n        ],\n        defaults: {\n            target: '_self'\n        },\n        contentGroups: [\n            'animation',\n            'descriptive',\n            'shape',\n            'structural',\n            'paintServer'\n        ],\n        content: [\n            'a',\n            'altGlyphDef',\n            'clipPath',\n            'color-profile',\n            'cursor',\n            'filter',\n            'font',\n            'font-face',\n            'foreignObject',\n            'image',\n            'marker',\n            'mask',\n            'pattern',\n            'script',\n            'style',\n            'switch',\n            'text',\n            'view'\n        ]\n    },\n    altGlyph: {\n        attrsGroups: [\n            'conditionalProcessing',\n            'core',\n            'graphicalEvent',\n            'presentation',\n            'xlink'\n        ],\n        attrs: [\n            'class',\n            'style',\n            'externalResourcesRequired',\n            'x',\n            'y',\n            'dx',\n            'dy',\n            'glyphRef',\n            'format',\n            'rotate'\n        ]\n    },\n    altGlyphDef: {\n        attrsGroups: [\n            'core'\n        ],\n        content: [\n            'glyphRef'\n        ]\n    },\n    altGlyphItem: {\n        attrsGroups: [\n            'core'\n        ],\n        content: [\n            'glyphRef',\n            'altGlyphItem'\n        ]\n    },\n    animate: {\n        attrsGroups: [\n            'conditionalProcessing',\n            'core',\n            'animationAddition',\n            'animationAttributeTarget',\n            'animationEvent',\n            'animationTiming',\n            'animationValue',\n            'presentation',\n            'xlink'\n        ],\n        attrs: [\n            'externalResourcesRequired'\n        ],\n        contentGroups: [\n            'descriptive'\n        ]\n    },\n    animateColor: {\n        attrsGroups: [\n            'conditionalProcessing',\n            'core',\n            'animationEvent',\n            'xlink',\n            'animationAttributeTarget',\n            'animationTiming',\n            'animationValue',\n            'animationAddition',\n            'presentation'\n        ],\n        attrs: [\n            'externalResourcesRequired'\n        ],\n        contentGroups: [\n            'descriptive'\n        ]\n    },\n    animateMotion: {\n        attrsGroups: [\n            'conditionalProcessing',\n            'core',\n            'animationEvent',\n            'xlink',\n            'animationTiming',\n            'animationValue',\n            'animationAddition'\n        ],\n        attrs: [\n            'externalResourcesRequired',\n            'path',\n            'keyPoints',\n            'rotate',\n            'origin'\n        ],\n        defaults: {\n            'rotate': '0'\n        },\n        contentGroups: [\n            'descriptive'\n        ],\n        content: [\n            'mpath'\n        ]\n    },\n    animateTransform: {\n        attrsGroups: [\n            'conditionalProcessing',\n            'core',\n            'animationEvent',\n            'xlink',\n            'animationAttributeTarget',\n            'animationTiming',\n            'animationValue',\n            'animationAddition'\n        ],\n        attrs: [\n            'externalResourcesRequired',\n            'type'\n        ],\n        contentGroups: [\n            'descriptive'\n        ]\n    },\n    circle: {\n        attrsGroups: [\n            'conditionalProcessing',\n            'core',\n            'graphicalEvent',\n            'presentation'\n        ],\n        attrs: [\n            'class',\n            'style',\n            'externalResourcesRequired',\n            'transform',\n            'cx',\n            'cy',\n            'r'\n        ],\n        defaults: {\n            cx: '0',\n            cy: '0'\n        },\n        contentGroups: [\n            'animation',\n            'descriptive'\n        ]\n    },\n    clipPath: {\n        attrsGroups: [\n            'conditionalProcessing',\n            'core',\n            'presentation'\n        ],\n        attrs: [\n            'class',\n            'style',\n            'externalResourcesRequired',\n            'transform',\n            'clipPathUnits'\n        ],\n        defaults: {\n            clipPathUnits: 'userSpaceOnUse'\n        },\n        contentGroups: [\n            'animation',\n            'descriptive',\n            'shape'\n        ],\n        content: [\n            'text',\n            'use'\n        ]\n    },\n    'color-profile': {\n        attrsGroups: [\n            'core',\n            'xlink'\n        ],\n        attrs: [\n            'local',\n            'name',\n            'rendering-intent'\n        ],\n        defaults: {\n            name: 'sRGB',\n            'rendering-intent': 'auto'\n        },\n        contentGroups: [\n            'descriptive'\n        ]\n    },\n    cursor: {\n        attrsGroups: [\n            'core',\n            'conditionalProcessing',\n            'xlink'\n        ],\n        attrs: [\n            'externalResourcesRequired',\n            'x',\n            'y'\n        ],\n        defaults: {\n            x: '0',\n            y: '0'\n        },\n        contentGroups: [\n            'descriptive'\n        ]\n    },\n    defs: {\n        attrsGroups: [\n            'conditionalProcessing',\n            'core',\n            'graphicalEvent',\n            'presentation'\n        ],\n        attrs: [\n            'class',\n            'style',\n            'externalResourcesRequired',\n            'transform'\n        ],\n        contentGroups: [\n            'animation',\n            'descriptive',\n            'shape',\n            'structural',\n            'paintServer'\n        ],\n        content: [\n            'a',\n            'altGlyphDef',\n            'clipPath',\n            'color-profile',\n            'cursor',\n            'filter',\n            'font',\n            'font-face',\n            'foreignObject',\n            'image',\n            'marker',\n            'mask',\n            'pattern',\n            'script',\n            'style',\n            'switch',\n            'text',\n            'view'\n        ]\n    },\n    desc: {\n        attrsGroups: [\n            'core'\n        ],\n        attrs: [\n            'class',\n            'style'\n        ]\n    },\n    ellipse: {\n        attrsGroups: [\n            'conditionalProcessing',\n            'core',\n            'graphicalEvent',\n            'presentation'\n        ],\n        attrs: [\n            'class',\n            'style',\n            'externalResourcesRequired',\n            'transform',\n            'cx',\n            'cy',\n            'rx',\n            'ry'\n        ],\n        defaults: {\n            cx: '0',\n            cy: '0'\n        },\n        contentGroups: [\n            'animation',\n            'descriptive'\n        ]\n    },\n    feBlend: {\n        attrsGroups: [\n            'core',\n            'presentation',\n            'filterPrimitive'\n        ],\n        attrs: [\n            'class',\n            'style',\n            // TODO: in - 'If no value is provided and this is the first filter primitive,\n            // then this filter primitive will use SourceGraphic as its input'\n            'in',\n            'in2',\n            'mode'\n        ],\n        defaults: {\n            mode: 'normal'\n        },\n        content: [\n            'animate',\n            'set'\n        ]\n    },\n    feColorMatrix: {\n        attrsGroups: [\n            'core',\n            'presentation',\n            'filterPrimitive'\n        ],\n        attrs: [\n            'class',\n            'style',\n            'in',\n            'type',\n            'values'\n        ],\n        defaults: {\n            type: 'matrix'\n        },\n        content: [\n            'animate',\n            'set'\n        ]\n    },\n    feComponentTransfer: {\n        attrsGroups: [\n            'core',\n            'presentation',\n            'filterPrimitive'\n        ],\n        attrs: [\n            'class',\n            'style',\n            'in'\n        ],\n        content: [\n            'feFuncA',\n            'feFuncB',\n            'feFuncG',\n            'feFuncR'\n        ]\n    },\n    feComposite: {\n        attrsGroups: [\n            'core',\n            'presentation',\n            'filterPrimitive'\n        ],\n        attrs: [\n            'class',\n            'style',\n            'in',\n            'in2',\n            'operator',\n            'k1',\n            'k2',\n            'k3',\n            'k4'\n        ],\n        defaults: {\n            operator: 'over',\n            k1: '0',\n            k2: '0',\n            k3: '0',\n            k4: '0'\n        },\n        content: [\n            'animate',\n            'set'\n        ]\n    },\n    feConvolveMatrix: {\n        attrsGroups: [\n            'core',\n            'presentation',\n            'filterPrimitive'\n        ],\n        attrs: [\n            'class',\n            'style',\n            'in',\n            'order',\n            'kernelMatrix',\n            // TODO: divisor - 'The default value is the sum of all values in kernelMatrix,\n            // with the exception that if the sum is zero, then the divisor is set to 1'\n            'divisor',\n            'bias',\n            // TODO: targetX - 'By default, the convolution matrix is centered in X over each\n            // pixel of the input image (i.e., targetX = floor ( orderX / 2 ))'\n            'targetX',\n            'targetY',\n            'edgeMode',\n            // TODO: kernelUnitLength - 'The first number is the <dx> value. The second number\n            // is the <dy> value. If the <dy> value is not specified, it defaults to the same value as <dx>'\n            'kernelUnitLength',\n            'preserveAlpha'\n        ],\n        defaults: {\n            order: '3',\n            bias: '0',\n            edgeMode: 'duplicate',\n            preserveAlpha: 'false'\n        },\n        content: [\n            'animate',\n            'set'\n        ]\n    },\n    feDiffuseLighting: {\n        attrsGroups: [\n            'core',\n            'presentation',\n            'filterPrimitive'\n        ],\n        attrs: [\n            'class',\n            'style',\n            'in',\n            'surfaceScale',\n            'diffuseConstant',\n            'kernelUnitLength'\n        ],\n        defaults: {\n            surfaceScale: '1',\n            diffuseConstant: '1'\n        },\n        contentGroups: [\n            'descriptive'\n        ],\n        content: [\n            // TODO: 'exactly one light source element, in any order'\n            'feDistantLight',\n            'fePointLight',\n            'feSpotLight'\n        ]\n    },\n    feDisplacementMap: {\n        attrsGroups: [\n            'core',\n            'presentation',\n            'filterPrimitive'\n        ],\n        attrs: [\n            'class',\n            'style',\n            'in',\n            'in2',\n            'scale',\n            'xChannelSelector',\n            'yChannelSelector'\n        ],\n        defaults: {\n            scale: '0',\n            xChannelSelector: 'A',\n            yChannelSelector: 'A'\n        },\n        content: [\n            'animate',\n            'set'\n        ]\n    },\n    feDistantLight: {\n        attrsGroups: [\n            'core'\n        ],\n        attrs: [\n            'azimuth',\n            'elevation'\n        ],\n        defaults: {\n            azimuth: '0',\n            elevation: '0'\n        },\n        content: [\n            'animate',\n            'set'\n        ]\n    },\n    feFlood: {\n        attrsGroups: [\n            'core',\n            'presentation',\n            'filterPrimitive'\n        ],\n        attrs: [\n            'class',\n            'style'\n        ],\n        content: [\n            'animate',\n            'animateColor',\n            'set'\n        ]\n    },\n    feFuncA: {\n        attrsGroups: [\n            'core',\n            'transferFunction'\n        ],\n        content: [\n            'set',\n            'animate'\n        ]\n    },\n    feFuncB: {\n        attrsGroups: [\n            'core',\n            'transferFunction'\n        ],\n        content: [\n            'set',\n            'animate'\n        ]\n    },\n    feFuncG: {\n        attrsGroups: [\n            'core',\n            'transferFunction'\n        ],\n        content: [\n            'set',\n            'animate'\n        ]\n    },\n    feFuncR: {\n        attrsGroups: [\n            'core',\n            'transferFunction'\n        ],\n        content: [\n            'set',\n            'animate'\n        ]\n    },\n    feGaussianBlur: {\n        attrsGroups: [\n            'core',\n            'presentation',\n            'filterPrimitive'\n        ],\n        attrs: [\n            'class',\n            'style',\n            'in',\n            'stdDeviation'\n        ],\n        defaults: {\n            stdDeviation: '0'\n        },\n        content: [\n            'set',\n            'animate'\n        ]\n    },\n    feImage: {\n        attrsGroups: [\n            'core',\n            'presentation',\n            'filterPrimitive',\n            'xlink'\n        ],\n        attrs: [\n            'class',\n            'style',\n            'externalResourcesRequired',\n            'preserveAspectRatio',\n            'href',\n            'xlink:href'\n        ],\n        defaults: {\n            preserveAspectRatio: 'xMidYMid meet'\n        },\n        content: [\n            'animate',\n            'animateTransform',\n            'set'\n        ]\n    },\n    feMerge: {\n        attrsGroups: [\n            'core',\n            'presentation',\n            'filterPrimitive'\n        ],\n        attrs: [\n            'class',\n            'style'\n        ],\n        content: [\n            'feMergeNode'\n        ]\n    },\n    feMergeNode: {\n        attrsGroups: [\n            'core'\n        ],\n        attrs: [\n            'in'\n        ],\n        content: [\n            'animate',\n            'set'\n        ]\n    },\n    feMorphology: {\n        attrsGroups: [\n            'core',\n            'presentation',\n            'filterPrimitive'\n        ],\n        attrs: [\n            'class',\n            'style',\n            'in',\n            'operator',\n            'radius'\n        ],\n        defaults: {\n            operator: 'erode',\n            radius: '0'\n        },\n        content: [\n            'animate',\n            'set'\n        ]\n    },\n    feOffset: {\n        attrsGroups: [\n            'core',\n            'presentation',\n            'filterPrimitive'\n        ],\n        attrs: [\n            'class',\n            'style',\n            'in',\n            'dx',\n            'dy'\n        ],\n        defaults: {\n            dx: '0',\n            dy: '0'\n        },\n        content: [\n            'animate',\n            'set'\n        ]\n    },\n    fePointLight: {\n        attrsGroups: [\n            'core'\n        ],\n        attrs: [\n            'x',\n            'y',\n            'z'\n        ],\n        defaults: {\n            x: '0',\n            y: '0',\n            z: '0'\n        },\n        content: [\n            'animate',\n            'set'\n        ]\n    },\n    feSpecularLighting: {\n        attrsGroups: [\n            'core',\n            'presentation',\n            'filterPrimitive'\n        ],\n        attrs: [\n            'class',\n            'style',\n            'in',\n            'surfaceScale',\n            'specularConstant',\n            'specularExponent',\n            'kernelUnitLength'\n        ],\n        defaults: {\n            surfaceScale: '1',\n            specularConstant: '1',\n            specularExponent: '1'\n        },\n        contentGroups: [\n            'descriptive',\n            // TODO: exactly one 'light source element'\n            'lightSource'\n        ]\n    },\n    feSpotLight: {\n        attrsGroups: [\n            'core'\n        ],\n        attrs: [\n            'x',\n            'y',\n            'z',\n            'pointsAtX',\n            'pointsAtY',\n            'pointsAtZ',\n            'specularExponent',\n            'limitingConeAngle'\n        ],\n        defaults: {\n            x: '0',\n            y: '0',\n            z: '0',\n            pointsAtX: '0',\n            pointsAtY: '0',\n            pointsAtZ: '0',\n            specularExponent: '1'\n        },\n        content: [\n            'animate',\n            'set'\n        ]\n    },\n    feTile: {\n        attrsGroups: [\n            'core',\n            'presentation',\n            'filterPrimitive'\n        ],\n        attrs: [\n            'class',\n            'style',\n            'in'\n        ],\n        content: [\n            'animate',\n            'set'\n        ]\n    },\n    feTurbulence: {\n        attrsGroups: [\n            'core',\n            'presentation',\n            'filterPrimitive'\n        ],\n        attrs: [\n            'class',\n            'style',\n            'baseFrequency',\n            'numOctaves',\n            'seed',\n            'stitchTiles',\n            'type'\n        ],\n        defaults: {\n            baseFrequency: '0',\n            numOctaves: '1',\n            seed: '0',\n            stitchTiles: 'noStitch',\n            type: 'turbulence'\n        },\n        content: [\n            'animate',\n            'set'\n        ]\n    },\n    filter: {\n        attrsGroups: [\n            'core',\n            'presentation',\n            'xlink'\n        ],\n        attrs: [\n            'class',\n            'style',\n            'externalResourcesRequired',\n            'x',\n            'y',\n            'width',\n            'height',\n            'filterRes',\n            'filterUnits',\n            'primitiveUnits',\n            'href',\n            'xlink:href'\n        ],\n        defaults: {\n            primitiveUnits: 'userSpaceOnUse',\n            x: '-10%',\n            y: '-10%',\n            width: '120%',\n            height: '120%'\n        },\n        contentGroups: [\n            'descriptive',\n            'filterPrimitive'\n        ],\n        content: [\n            'animate',\n            'set'\n        ]\n    },\n    font: {\n        attrsGroups: [\n            'core',\n            'presentation'\n        ],\n        attrs: [\n            'class',\n            'style',\n            'externalResourcesRequired',\n            'horiz-origin-x',\n            'horiz-origin-y',\n            'horiz-adv-x',\n            'vert-origin-x',\n            'vert-origin-y',\n            'vert-adv-y'\n        ],\n        defaults: {\n            'horiz-origin-x': '0',\n            'horiz-origin-y': '0'\n        },\n        contentGroups: [\n            'descriptive'\n        ],\n        content: [\n            'font-face',\n            'glyph',\n            'hkern',\n            'missing-glyph',\n            'vkern'\n        ]\n    },\n    'font-face': {\n        attrsGroups: [\n            'core'\n        ],\n        attrs: [\n            'font-family',\n            'font-style',\n            'font-variant',\n            'font-weight',\n            'font-stretch',\n            'font-size',\n            'unicode-range',\n            'units-per-em',\n            'panose-1',\n            'stemv',\n            'stemh',\n            'slope',\n            'cap-height',\n            'x-height',\n            'accent-height',\n            'ascent',\n            'descent',\n            'widths',\n            'bbox',\n            'ideographic',\n            'alphabetic',\n            'mathematical',\n            'hanging',\n            'v-ideographic',\n            'v-alphabetic',\n            'v-mathematical',\n            'v-hanging',\n            'underline-position',\n            'underline-thickness',\n            'strikethrough-position',\n            'strikethrough-thickness',\n            'overline-position',\n            'overline-thickness'\n        ],\n        defaults: {\n            'font-style': 'all',\n            'font-variant': 'normal',\n            'font-weight': 'all',\n            'font-stretch': 'normal',\n            'unicode-range': 'U+0-10FFFF',\n            'units-per-em': '1000',\n            'panose-1': '0 0 0 0 0 0 0 0 0 0',\n            'slope': '0'\n        },\n        contentGroups: [\n            'descriptive'\n        ],\n        content: [\n            // TODO: \"at most one 'font-face-src' element\"\n            'font-face-src'\n        ]\n    },\n    // TODO: empty content\n    'font-face-format': {\n        attrsGroups: [\n            'core'\n        ],\n        attrs: [\n            'string'\n        ]\n    },\n    'font-face-name': {\n        attrsGroups: [\n            'core'\n        ],\n        attrs: [\n            'name'\n        ]\n    },\n    'font-face-src': {\n        attrsGroups: [\n            'core'\n        ],\n        content: [\n            'font-face-name',\n            'font-face-uri'\n        ]\n    },\n    'font-face-uri': {\n        attrsGroups: [\n            'core',\n            'xlink'\n        ],\n        attrs: [\n            'href',\n            'xlink:href'\n        ],\n        content: [\n            'font-face-format'\n        ]\n    },\n    foreignObject: {\n        attrsGroups: [\n            'core',\n            'conditionalProcessing',\n            'graphicalEvent',\n            'presentation'\n        ],\n        attrs: [\n            'class',\n            'style',\n            'externalResourcesRequired',\n            'transform',\n            'x',\n            'y',\n            'width',\n            'height'\n        ],\n        defaults: {\n            x: 0,\n            y: 0\n        }\n    },\n    g: {\n        attrsGroups: [\n            'conditionalProcessing',\n            'core',\n            'graphicalEvent',\n            'presentation'\n        ],\n        attrs: [\n            'class',\n            'style',\n            'externalResourcesRequired',\n            'transform'\n        ],\n        contentGroups: [\n            'animation',\n            'descriptive',\n            'shape',\n            'structural',\n            'paintServer'\n        ],\n        content: [\n            'a',\n            'altGlyphDef',\n            'clipPath',\n            'color-profile',\n            'cursor',\n            'filter',\n            'font',\n            'font-face',\n            'foreignObject',\n            'image',\n            'marker',\n            'mask',\n            'pattern',\n            'script',\n            'style',\n            'switch',\n            'text',\n            'view'\n        ]\n    },\n    glyph: {\n        attrsGroups: [\n            'core',\n            'presentation'\n        ],\n        attrs: [\n            'class',\n            'style',\n            'd',\n            'horiz-adv-x',\n            'vert-origin-x',\n            'vert-origin-y',\n            'vert-adv-y',\n            'unicode',\n            'glyph-name',\n            'orientation',\n            'arabic-form',\n            'lang'\n        ],\n        defaults: {\n            'arabic-form': 'initial'\n        },\n        contentGroups: [\n            'animation',\n            'descriptive',\n            'shape',\n            'structural',\n            'paintServer'\n        ],\n        content: [\n            'a',\n            'altGlyphDef',\n            'clipPath',\n            'color-profile',\n            'cursor',\n            'filter',\n            'font',\n            'font-face',\n            'foreignObject',\n            'image',\n            'marker',\n            'mask',\n            'pattern',\n            'script',\n            'style',\n            'switch',\n            'text',\n            'view'\n        ],\n    },\n    glyphRef: {\n        attrsGroups: [\n            'core',\n            'presentation'\n        ],\n        attrs: [\n            'class',\n            'style',\n            'd',\n            'horiz-adv-x',\n            'vert-origin-x',\n            'vert-origin-y',\n            'vert-adv-y'\n        ],\n        contentGroups: [\n            'animation',\n            'descriptive',\n            'shape',\n            'structural',\n            'paintServer'\n        ],\n        content: [\n            'a',\n            'altGlyphDef',\n            'clipPath',\n            'color-profile',\n            'cursor',\n            'filter',\n            'font',\n            'font-face',\n            'foreignObject',\n            'image',\n            'marker',\n            'mask',\n            'pattern',\n            'script',\n            'style',\n            'switch',\n            'text',\n            'view'\n        ]\n    },\n    hatch: {\n        attrsGroups: [\n            'core',\n            'presentation',\n            'xlink'\n        ],\n        attrs: [\n            'class',\n            'style',\n            'x',\n            'y',\n            'pitch',\n            'rotate',\n            'hatchUnits',\n            'hatchContentUnits',\n            'transform'\n        ],\n        defaults: {\n            hatchUnits: 'objectBoundingBox',\n            hatchContentUnits: 'userSpaceOnUse',\n            x: '0',\n            y: '0',\n            pitch: '0',\n            rotate: '0'\n        },\n        contentGroups: [\n            'animation',\n            'descriptive'\n        ],\n        content: [\n            'hatchPath'\n        ]\n    },\n    hatchPath: {\n        attrsGroups: [\n            'core',\n            'presentation',\n            'xlink'\n        ],\n        attrs: [\n            'class',\n            'style',\n            'd',\n            'offset'\n        ],\n        defaults: {\n            offset: '0'\n        },\n        contentGroups: [\n            'animation',\n            'descriptive'\n        ]\n    },\n    hkern: {\n        attrsGroups: [\n            'core'\n        ],\n        attrs: [\n            'u1',\n            'g1',\n            'u2',\n            'g2',\n            'k'\n        ]\n    },\n    image: {\n        attrsGroups: [\n            'core',\n            'conditionalProcessing',\n            'graphicalEvent',\n            'xlink',\n            'presentation'\n        ],\n        attrs: [\n            'class',\n            'style',\n            'externalResourcesRequired',\n            'preserveAspectRatio',\n            'transform',\n            'x',\n            'y',\n            'width',\n            'height',\n            'href',\n            'xlink:href'\n        ],\n        defaults: {\n            x: '0',\n            y: '0',\n            preserveAspectRatio: 'xMidYMid meet'\n        },\n        contentGroups: [\n            'animation',\n            'descriptive'\n        ]\n    },\n    line: {\n        attrsGroups: [\n            'conditionalProcessing',\n            'core',\n            'graphicalEvent',\n            'presentation'\n        ],\n        attrs: [\n            'class',\n            'style',\n            'externalResourcesRequired',\n            'transform',\n            'x1',\n            'y1',\n            'x2',\n            'y2'\n        ],\n        defaults: {\n            x1: '0',\n            y1: '0',\n            x2: '0',\n            y2: '0'\n        },\n        contentGroups: [\n            'animation',\n            'descriptive'\n        ]\n    },\n    linearGradient: {\n        attrsGroups: [\n            'core',\n            'presentation',\n            'xlink'\n        ],\n        attrs: [\n            'class',\n            'style',\n            'externalResourcesRequired',\n            'x1',\n            'y1',\n            'x2',\n            'y2',\n            'gradientUnits',\n            'gradientTransform',\n            'spreadMethod',\n            'href',\n            'xlink:href'\n        ],\n        defaults: {\n            x1: '0',\n            y1: '0',\n            x2: '100%',\n            y2: '0',\n            spreadMethod: 'pad'\n        },\n        contentGroups: [\n            'descriptive'\n        ],\n        content: [\n            'animate',\n            'animateTransform',\n            'set',\n            'stop'\n        ]\n    },\n    marker: {\n        attrsGroups: [\n            'core',\n            'presentation'\n        ],\n        attrs: [\n            'class',\n            'style',\n            'externalResourcesRequired',\n            'viewBox',\n            'preserveAspectRatio',\n            'refX',\n            'refY',\n            'markerUnits',\n            'markerWidth',\n            'markerHeight',\n            'orient'\n        ],\n        defaults: {\n            markerUnits: 'strokeWidth',\n            refX: '0',\n            refY: '0',\n            markerWidth: '3',\n            markerHeight: '3'\n        },\n        contentGroups: [\n            'animation',\n            'descriptive',\n            'shape',\n            'structural',\n            'paintServer'\n        ],\n        content: [\n            'a',\n            'altGlyphDef',\n            'clipPath',\n            'color-profile',\n            'cursor',\n            'filter',\n            'font',\n            'font-face',\n            'foreignObject',\n            'image',\n            'marker',\n            'mask',\n            'pattern',\n            'script',\n            'style',\n            'switch',\n            'text',\n            'view'\n        ]\n    },\n    mask: {\n        attrsGroups: [\n            'conditionalProcessing',\n            'core',\n            'presentation'\n        ],\n        attrs: [\n            'class',\n            'style',\n            'externalResourcesRequired',\n            'x',\n            'y',\n            'width',\n            'height',\n            'maskUnits',\n            'maskContentUnits'\n        ],\n        defaults: {\n            maskUnits: 'objectBoundingBox',\n            maskContentUnits: 'userSpaceOnUse',\n            x: '-10%',\n            y: '-10%',\n            width: '120%',\n            height: '120%'\n        },\n        contentGroups: [\n            'animation',\n            'descriptive',\n            'shape',\n            'structural',\n            'paintServer'\n        ],\n        content: [\n            'a',\n            'altGlyphDef',\n            'clipPath',\n            'color-profile',\n            'cursor',\n            'filter',\n            'font',\n            'font-face',\n            'foreignObject',\n            'image',\n            'marker',\n            'mask',\n            'pattern',\n            'script',\n            'style',\n            'switch',\n            'text',\n            'view'\n        ]\n    },\n    metadata: {\n        attrsGroups: [\n            'core'\n        ]\n    },\n    'missing-glyph': {\n        attrsGroups: [\n            'core',\n            'presentation'\n        ],\n        attrs: [\n            'class',\n            'style',\n            'd',\n            'horiz-adv-x',\n            'vert-origin-x',\n            'vert-origin-y',\n            'vert-adv-y'\n        ],\n        contentGroups: [\n            'animation',\n            'descriptive',\n            'shape',\n            'structural',\n            'paintServer'\n        ],\n        content: [\n            'a',\n            'altGlyphDef',\n            'clipPath',\n            'color-profile',\n            'cursor',\n            'filter',\n            'font',\n            'font-face',\n            'foreignObject',\n            'image',\n            'marker',\n            'mask',\n            'pattern',\n            'script',\n            'style',\n            'switch',\n            'text',\n            'view'\n        ]\n    },\n    mpath: {\n        attrsGroups: [\n            'core',\n            'xlink'\n        ],\n        attrs: [\n            'externalResourcesRequired',\n            'href',\n            'xlink:href'\n        ],\n        contentGroups: [\n            'descriptive'\n        ]\n    },\n    path: {\n        attrsGroups: [\n            'conditionalProcessing',\n            'core',\n            'graphicalEvent',\n            'presentation'\n        ],\n        attrs: [\n            'class',\n            'style',\n            'externalResourcesRequired',\n            'transform',\n            'd',\n            'pathLength'\n        ],\n        contentGroups: [\n            'animation',\n            'descriptive'\n        ]\n    },\n    pattern: {\n        attrsGroups: [\n            'conditionalProcessing',\n            'core',\n            'presentation',\n            'xlink'\n        ],\n        attrs: [\n            'class',\n            'style',\n            'externalResourcesRequired',\n            'viewBox',\n            'preserveAspectRatio',\n            'x',\n            'y',\n            'width',\n            'height',\n            'patternUnits',\n            'patternContentUnits',\n            'patternTransform',\n            'href',\n            'xlink:href'\n        ],\n        defaults: {\n            patternUnits: 'objectBoundingBox',\n            patternContentUnits: 'userSpaceOnUse',\n            x: '0',\n            y: '0',\n            width: '0',\n            height: '0',\n            preserveAspectRatio: 'xMidYMid meet'\n        },\n        contentGroups: [\n            'animation',\n            'descriptive',\n            'paintServer',\n            'shape',\n            'structural'\n        ],\n        content: [\n            'a',\n            'altGlyphDef',\n            'clipPath',\n            'color-profile',\n            'cursor',\n            'filter',\n            'font',\n            'font-face',\n            'foreignObject',\n            'image',\n            'marker',\n            'mask',\n            'pattern',\n            'script',\n            'style',\n            'switch',\n            'text',\n            'view'\n        ]\n    },\n    polygon: {\n        attrsGroups: [\n            'conditionalProcessing',\n            'core',\n            'graphicalEvent',\n            'presentation'\n        ],\n        attrs: [\n            'class',\n            'style',\n            'externalResourcesRequired',\n            'transform',\n            'points'\n        ],\n        contentGroups: [\n            'animation',\n            'descriptive'\n        ]\n    },\n    polyline: {\n        attrsGroups: [\n            'conditionalProcessing',\n            'core',\n            'graphicalEvent',\n            'presentation'\n        ],\n        attrs: [\n            'class',\n            'style',\n            'externalResourcesRequired',\n            'transform',\n            'points'\n        ],\n        contentGroups: [\n            'animation',\n            'descriptive'\n        ]\n    },\n    radialGradient: {\n        attrsGroups: [\n            'core',\n            'presentation',\n            'xlink'\n        ],\n        attrs: [\n            'class',\n            'style',\n            'externalResourcesRequired',\n            'cx',\n            'cy',\n            'r',\n            'fx',\n            'fy',\n            'fr',\n            'gradientUnits',\n            'gradientTransform',\n            'spreadMethod',\n            'href',\n            'xlink:href'\n        ],\n        defaults: {\n            gradientUnits: 'objectBoundingBox',\n            cx: '50%',\n            cy: '50%',\n            r: '50%'\n        },\n        contentGroups: [\n            'descriptive'\n        ],\n        content: [\n            'animate',\n            'animateTransform',\n            'set',\n            'stop'\n        ]\n    },\n    meshGradient: {\n        attrsGroups: [\n            'core',\n            'presentation',\n            'xlink'\n        ],\n        attrs: [\n            'class',\n            'style',\n            'x',\n            'y',\n            'gradientUnits',\n            'transform'\n        ],\n        contentGroups: [\n            'descriptive',\n            'paintServer',\n            'animation',\n        ],\n        content: [\n            'meshRow'\n        ]\n    },\n    meshRow: {\n        attrsGroups: [\n            'core',\n            'presentation'\n        ],\n        attrs: [\n            'class',\n            'style'\n        ],\n        contentGroups: [\n            'descriptive'\n        ],\n        content: [\n            'meshPatch'\n        ]\n    },\n    meshPatch: {\n        attrsGroups: [\n            'core',\n            'presentation'\n        ],\n        attrs: [\n            'class',\n            'style'\n        ],\n        contentGroups: [\n            'descriptive'\n        ],\n        content: [\n            'stop'\n        ]\n    },\n    rect: {\n        attrsGroups: [\n            'conditionalProcessing',\n            'core',\n            'graphicalEvent',\n            'presentation'\n        ],\n        attrs: [\n            'class',\n            'style',\n            'externalResourcesRequired',\n            'transform',\n            'x',\n            'y',\n            'width',\n            'height',\n            'rx',\n            'ry'\n        ],\n        defaults: {\n            x: '0',\n            y: '0'\n        },\n        contentGroups: [\n            'animation',\n            'descriptive'\n        ]\n    },\n    script: {\n        attrsGroups: [\n            'core',\n            'xlink'\n        ],\n        attrs: [\n            'externalResourcesRequired',\n            'type',\n            'href',\n            'xlink:href'\n        ]\n    },\n    set: {\n        attrsGroups: [\n            'conditionalProcessing',\n            'core',\n            'animation',\n            'xlink',\n            'animationAttributeTarget',\n            'animationTiming',\n        ],\n        attrs: [\n            'externalResourcesRequired',\n            'to'\n        ],\n        contentGroups: [\n            'descriptive'\n        ]\n    },\n    solidColor: {\n        attrsGroups: [\n            'core',\n            'presentation'\n        ],\n        attrs: [\n            'class',\n            'style'\n        ],\n        contentGroups: [\n            'paintServer'\n        ]\n    },\n    stop: {\n        attrsGroups: [\n            'core',\n            'presentation'\n        ],\n        attrs: [\n            'class',\n            'style',\n            'offset',\n            'path'\n        ],\n        content: [\n            'animate',\n            'animateColor',\n            'set'\n        ]\n    },\n    style: {\n        attrsGroups: [\n            'core'\n        ],\n        attrs: [\n            'type',\n            'media',\n            'title'\n        ],\n        defaults: {\n            type: 'text/css'\n        }\n    },\n    svg: {\n        attrsGroups: [\n            'conditionalProcessing',\n            'core',\n            'documentEvent',\n            'graphicalEvent',\n            'presentation'\n        ],\n        attrs: [\n            'class',\n            'style',\n            'x',\n            'y',\n            'width',\n            'height',\n            'viewBox',\n            'preserveAspectRatio',\n            'zoomAndPan',\n            'version',\n            'baseProfile',\n            'contentScriptType',\n            'contentStyleType'\n        ],\n        defaults: {\n            x: '0',\n            y: '0',\n            width: '100%',\n            height: '100%',\n            preserveAspectRatio: 'xMidYMid meet',\n            zoomAndPan: 'magnify',\n            version: '1.1',\n            baseProfile: 'none',\n            contentScriptType: 'application/ecmascript',\n            contentStyleType: 'text/css'\n        },\n        contentGroups: [\n            'animation',\n            'descriptive',\n            'shape',\n            'structural',\n            'paintServer'\n        ],\n        content: [\n            'a',\n            'altGlyphDef',\n            'clipPath',\n            'color-profile',\n            'cursor',\n            'filter',\n            'font',\n            'font-face',\n            'foreignObject',\n            'image',\n            'marker',\n            'mask',\n            'pattern',\n            'script',\n            'style',\n            'switch',\n            'text',\n            'view'\n        ]\n    },\n    switch: {\n        attrsGroups: [\n            'conditionalProcessing',\n            'core',\n            'graphicalEvent',\n            'presentation'\n        ],\n        attrs: [\n            'class',\n            'style',\n            'externalResourcesRequired',\n            'transform'\n        ],\n        contentGroups: [\n            'animation',\n            'descriptive',\n            'shape'\n        ],\n        content: [\n            'a',\n            'foreignObject',\n            'g',\n            'image',\n            'svg',\n            'switch',\n            'text',\n            'use'\n        ]\n    },\n    symbol: {\n        attrsGroups: [\n            'core',\n            'graphicalEvent',\n            'presentation'\n        ],\n        attrs: [\n            'class',\n            'style',\n            'externalResourcesRequired',\n            'preserveAspectRatio',\n            'viewBox',\n            'refX',\n            'refY'\n        ],\n        defaults: {\n            refX: 0,\n            refY: 0\n        },\n        contentGroups: [\n            'animation',\n            'descriptive',\n            'shape',\n            'structural',\n            'paintServer'\n        ],\n        content: [\n            'a',\n            'altGlyphDef',\n            'clipPath',\n            'color-profile',\n            'cursor',\n            'filter',\n            'font',\n            'font-face',\n            'foreignObject',\n            'image',\n            'marker',\n            'mask',\n            'pattern',\n            'script',\n            'style',\n            'switch',\n            'text',\n            'view'\n        ]\n    },\n    text: {\n        attrsGroups: [\n            'conditionalProcessing',\n            'core',\n            'graphicalEvent',\n            'presentation'\n        ],\n        attrs: [\n            'class',\n            'style',\n            'externalResourcesRequired',\n            'transform',\n            'lengthAdjust',\n            'x',\n            'y',\n            'dx',\n            'dy',\n            'rotate',\n            'textLength'\n        ],\n        defaults: {\n            x: '0',\n            y: '0',\n            lengthAdjust: 'spacing'\n        },\n        contentGroups: [\n            'animation',\n            'descriptive',\n            'textContentChild'\n        ],\n        content: [\n            'a'\n        ]\n    },\n    textPath: {\n        attrsGroups: [\n            'conditionalProcessing',\n            'core',\n            'graphicalEvent',\n            'presentation',\n            'xlink'\n        ],\n        attrs: [\n            'class',\n            'style',\n            'externalResourcesRequired',\n            'href',\n            'xlink:href',\n            'startOffset',\n            'method',\n            'spacing',\n            'd'\n        ],\n        defaults: {\n            startOffset: '0',\n            method: 'align',\n            spacing: 'exact'\n        },\n        contentGroups: [\n            'descriptive'\n        ],\n        content: [\n            'a',\n            'altGlyph',\n            'animate',\n            'animateColor',\n            'set',\n            'tref',\n            'tspan'\n        ]\n    },\n    title: {\n        attrsGroups: [\n            'core'\n        ],\n        attrs: [\n            'class',\n            'style'\n        ]\n    },\n    tref: {\n        attrsGroups: [\n            'conditionalProcessing',\n            'core',\n            'graphicalEvent',\n            'presentation',\n            'xlink'\n        ],\n        attrs: [\n            'class',\n            'style',\n            'externalResourcesRequired',\n            'href',\n            'xlink:href'\n        ],\n        contentGroups: [\n            'descriptive'\n        ],\n        content: [\n            'animate',\n            'animateColor',\n            'set'\n        ]\n    },\n    tspan: {\n        attrsGroups: [\n            'conditionalProcessing',\n            'core',\n            'graphicalEvent',\n            'presentation'\n        ],\n        attrs: [\n            'class',\n            'style',\n            'externalResourcesRequired',\n            'x',\n            'y',\n            'dx',\n            'dy',\n            'rotate',\n            'textLength',\n            'lengthAdjust'\n        ],\n        contentGroups: [\n            'descriptive'\n        ],\n        content: [\n            'a',\n            'altGlyph',\n            'animate',\n            'animateColor',\n            'set',\n            'tref',\n            'tspan'\n        ]\n    },\n    use: {\n        attrsGroups: [\n            'core',\n            'conditionalProcessing',\n            'graphicalEvent',\n            'presentation',\n            'xlink'\n        ],\n        attrs: [\n            'class',\n            'style',\n            'externalResourcesRequired',\n            'transform',\n            'x',\n            'y',\n            'width',\n            'height',\n            'href',\n            'xlink:href'\n        ],\n        defaults: {\n            x: '0',\n            y: '0'\n        },\n        contentGroups: [\n            'animation',\n            'descriptive'\n        ]\n    },\n    view: {\n        attrsGroups: [\n            'core'\n        ],\n        attrs: [\n            'externalResourcesRequired',\n            'viewBox',\n            'preserveAspectRatio',\n            'zoomAndPan',\n            'viewTarget'\n        ],\n        contentGroups: [\n            'descriptive'\n        ]\n    },\n    vkern: {\n        attrsGroups: [\n            'core'\n        ],\n        attrs: [\n            'u1',\n            'g1',\n            'u2',\n            'g2',\n            'k'\n        ]\n    }\n};\n\n// http://wiki.inkscape.org/wiki/index.php/Inkscape-specific_XML_attributes\nexports.editorNamespaces = [\n    'http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd',\n    'http://inkscape.sourceforge.net/DTD/sodipodi-0.dtd',\n    'http://www.inkscape.org/namespaces/inkscape',\n    'http://www.bohemiancoding.com/sketch/ns',\n    'http://ns.adobe.com/AdobeIllustrator/10.0/',\n    'http://ns.adobe.com/Graphs/1.0/',\n    'http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/',\n    'http://ns.adobe.com/Variables/1.0/',\n    'http://ns.adobe.com/SaveForWeb/1.0/',\n    'http://ns.adobe.com/Extensibility/1.0/',\n    'http://ns.adobe.com/Flows/1.0/',\n    'http://ns.adobe.com/ImageReplacement/1.0/',\n    'http://ns.adobe.com/GenericCustomNamespace/1.0/',\n    'http://ns.adobe.com/XPath/1.0/',\n    'http://schemas.microsoft.com/visio/2003/SVGExtensions/'\n];\n\n// http://www.w3.org/TR/SVG11/linking.html#processingIRI\nexports.referencesProps = [\n    'clip-path',\n    'color-profile',\n    'fill',\n    'filter',\n    'marker-start',\n    'marker-mid',\n    'marker-end',\n    'mask',\n    'stroke',\n    'style'\n];\n\n// http://www.w3.org/TR/SVG11/propidx.html\nexports.inheritableAttrs = [\n    'clip-rule',\n    'color',\n    'color-interpolation',\n    'color-interpolation-filters',\n    'color-profile',\n    'color-rendering',\n    'cursor',\n    'direction',\n    'dominant-baseline',\n    'fill',\n    'fill-opacity',\n    'fill-rule',\n    'font',\n    'font-family',\n    'font-size',\n    'font-size-adjust',\n    'font-stretch',\n    'font-style',\n    'font-variant',\n    'font-weight',\n    'glyph-orientation-horizontal',\n    'glyph-orientation-vertical',\n    'image-rendering',\n    'letter-spacing',\n    'marker',\n    'marker-end',\n    'marker-mid',\n    'marker-start',\n    'paint-order',\n    'pointer-events',\n    'shape-rendering',\n    'stroke',\n    'stroke-dasharray',\n    'stroke-dashoffset',\n    'stroke-linecap',\n    'stroke-linejoin',\n    'stroke-miterlimit',\n    'stroke-opacity',\n    'stroke-width',\n    'text-anchor',\n    'text-rendering',\n    'transform',\n    'visibility',\n    'word-spacing',\n    'writing-mode'\n];\n\nexports.presentationNonInheritableGroupAttrs = [\n    'display',\n    'clip-path',\n    'filter',\n    'mask',\n    'opacity',\n    'text-decoration',\n    'transform',\n    'unicode-bidi',\n    'visibility'\n];\n\n// http://www.w3.org/TR/SVG11/single-page.html#types-ColorKeywords\nexports.colorsNames = {\n    'aliceblue': '#f0f8ff',\n    'antiquewhite': '#faebd7',\n    'aqua': '#0ff',\n    'aquamarine': '#7fffd4',\n    'azure': '#f0ffff',\n    'beige': '#f5f5dc',\n    'bisque': '#ffe4c4',\n    'black': '#000',\n    'blanchedalmond': '#ffebcd',\n    'blue': '#00f',\n    'blueviolet': '#8a2be2',\n    'brown': '#a52a2a',\n    'burlywood': '#deb887',\n    'cadetblue': '#5f9ea0',\n    'chartreuse': '#7fff00',\n    'chocolate': '#d2691e',\n    'coral': '#ff7f50',\n    'cornflowerblue': '#6495ed',\n    'cornsilk': '#fff8dc',\n    'crimson': '#dc143c',\n    'cyan': '#0ff',\n    'darkblue': '#00008b',\n    'darkcyan': '#008b8b',\n    'darkgoldenrod': '#b8860b',\n    'darkgray': '#a9a9a9',\n    'darkgreen': '#006400',\n    'darkgrey': '#a9a9a9',\n    'darkkhaki': '#bdb76b',\n    'darkmagenta': '#8b008b',\n    'darkolivegreen': '#556b2f',\n    'darkorange': '#ff8c00',\n    'darkorchid': '#9932cc',\n    'darkred': '#8b0000',\n    'darksalmon': '#e9967a',\n    'darkseagreen': '#8fbc8f',\n    'darkslateblue': '#483d8b',\n    'darkslategray': '#2f4f4f',\n    'darkslategrey': '#2f4f4f',\n    'darkturquoise': '#00ced1',\n    'darkviolet': '#9400d3',\n    'deeppink': '#ff1493',\n    'deepskyblue': '#00bfff',\n    'dimgray': '#696969',\n    'dimgrey': '#696969',\n    'dodgerblue': '#1e90ff',\n    'firebrick': '#b22222',\n    'floralwhite': '#fffaf0',\n    'forestgreen': '#228b22',\n    'fuchsia': '#f0f',\n    'gainsboro': '#dcdcdc',\n    'ghostwhite': '#f8f8ff',\n    'gold': '#ffd700',\n    'goldenrod': '#daa520',\n    'gray': '#808080',\n    'green': '#008000',\n    'greenyellow': '#adff2f',\n    'grey': '#808080',\n    'honeydew': '#f0fff0',\n    'hotpink': '#ff69b4',\n    'indianred': '#cd5c5c',\n    'indigo': '#4b0082',\n    'ivory': '#fffff0',\n    'khaki': '#f0e68c',\n    'lavender': '#e6e6fa',\n    'lavenderblush': '#fff0f5',\n    'lawngreen': '#7cfc00',\n    'lemonchiffon': '#fffacd',\n    'lightblue': '#add8e6',\n    'lightcoral': '#f08080',\n    'lightcyan': '#e0ffff',\n    'lightgoldenrodyellow': '#fafad2',\n    'lightgray': '#d3d3d3',\n    'lightgreen': '#90ee90',\n    'lightgrey': '#d3d3d3',\n    'lightpink': '#ffb6c1',\n    'lightsalmon': '#ffa07a',\n    'lightseagreen': '#20b2aa',\n    'lightskyblue': '#87cefa',\n    'lightslategray': '#789',\n    'lightslategrey': '#789',\n    'lightsteelblue': '#b0c4de',\n    'lightyellow': '#ffffe0',\n    'lime': '#0f0',\n    'limegreen': '#32cd32',\n    'linen': '#faf0e6',\n    'magenta': '#f0f',\n    'maroon': '#800000',\n    'mediumaquamarine': '#66cdaa',\n    'mediumblue': '#0000cd',\n    'mediumorchid': '#ba55d3',\n    'mediumpurple': '#9370db',\n    'mediumseagreen': '#3cb371',\n    'mediumslateblue': '#7b68ee',\n    'mediumspringgreen': '#00fa9a',\n    'mediumturquoise': '#48d1cc',\n    'mediumvioletred': '#c71585',\n    'midnightblue': '#191970',\n    'mintcream': '#f5fffa',\n    'mistyrose': '#ffe4e1',\n    'moccasin': '#ffe4b5',\n    'navajowhite': '#ffdead',\n    'navy': '#000080',\n    'oldlace': '#fdf5e6',\n    'olive': '#808000',\n    'olivedrab': '#6b8e23',\n    'orange': '#ffa500',\n    'orangered': '#ff4500',\n    'orchid': '#da70d6',\n    'palegoldenrod': '#eee8aa',\n    'palegreen': '#98fb98',\n    'paleturquoise': '#afeeee',\n    'palevioletred': '#db7093',\n    'papayawhip': '#ffefd5',\n    'peachpuff': '#ffdab9',\n    'peru': '#cd853f',\n    'pink': '#ffc0cb',\n    'plum': '#dda0dd',\n    'powderblue': '#b0e0e6',\n    'purple': '#800080',\n    'rebeccapurple': '#639',\n    'red': '#f00',\n    'rosybrown': '#bc8f8f',\n    'royalblue': '#4169e1',\n    'saddlebrown': '#8b4513',\n    'salmon': '#fa8072',\n    'sandybrown': '#f4a460',\n    'seagreen': '#2e8b57',\n    'seashell': '#fff5ee',\n    'sienna': '#a0522d',\n    'silver': '#c0c0c0',\n    'skyblue': '#87ceeb',\n    'slateblue': '#6a5acd',\n    'slategray': '#708090',\n    'slategrey': '#708090',\n    'snow': '#fffafa',\n    'springgreen': '#00ff7f',\n    'steelblue': '#4682b4',\n    'tan': '#d2b48c',\n    'teal': '#008080',\n    'thistle': '#d8bfd8',\n    'tomato': '#ff6347',\n    'turquoise': '#40e0d0',\n    'violet': '#ee82ee',\n    'wheat': '#f5deb3',\n    'white': '#fff',\n    'whitesmoke': '#f5f5f5',\n    'yellow': '#ff0',\n    'yellowgreen': '#9acd32'\n};\n\nexports.colorsShortNames = {\n  '#f0ffff': 'azure',\n  '#f5f5dc': 'beige',\n  '#ffe4c4': 'bisque',\n  '#a52a2a': 'brown',\n  '#ff7f50': 'coral',\n  '#ffd700': 'gold',\n  '#808080': 'gray',\n  '#008000': 'green',\n  '#4b0082': 'indigo',\n  '#fffff0': 'ivory',\n  '#f0e68c': 'khaki',\n  '#faf0e6': 'linen',\n  '#800000': 'maroon',\n  '#000080': 'navy',\n  '#808000': 'olive',\n  '#ffa500': 'orange',\n  '#da70d6': 'orchid',\n  '#cd853f': 'peru',\n  '#ffc0cb': 'pink',\n  '#dda0dd': 'plum',\n  '#800080': 'purple',\n  '#f00': 'red',\n  '#ff0000': 'red',\n  '#fa8072': 'salmon',\n  '#a0522d': 'sienna',\n  '#c0c0c0': 'silver',\n  '#fffafa': 'snow',\n  '#d2b48c': 'tan',\n  '#008080': 'teal',\n  '#ff6347': 'tomato',\n  '#ee82ee': 'violet',\n  '#f5deb3': 'wheat'\n};\n\n// http://www.w3.org/TR/SVG11/single-page.html#types-DataTypeColor\nexports.colorsProps = [\n    'color', 'fill', 'stroke', 'stop-color', 'flood-color', 'lighting-color'\n];\n","'use strict';\n\nexports.type = 'perItem';\n\nexports.active = true;\n\nexports.description = 'removes XML processing instructions';\n\n/**\n * Remove XML Processing Instruction.\n *\n * @example\n * <?xml version=\"1.0\" encoding=\"utf-8\"?>\n *\n * @param {Object} item current iteration item\n * @return {Boolean} if false, item will be filtered out\n *\n * @author Kir Belevich\n */\nexports.fn = function(item) {\n\n    return !(item.processinginstruction && item.processinginstruction.name === 'xml');\n\n};\n","'use strict';\n\nexports.type = 'perItem';\n\nexports.active = true;\n\nexports.description = 'removes comments';\n\n/**\n * Remove comments.\n *\n * @example\n * <!-- Generator: Adobe Illustrator 15.0.0, SVG Export\n * Plug-In . SVG Version: 6.00 Build 0)  -->\n *\n * @param {Object} item current iteration item\n * @return {Boolean} if false, item will be filtered out\n *\n * @author Kir Belevich\n */\nexports.fn = function(item) {\n\n    if (item.comment && item.comment.charAt(0) !== '!') {\n        return false;\n    }\n\n};\n","'use strict';\n\nexports.type = 'perItem';\n\nexports.active = false;\n\nexports.description = 'removes xmlns attribute (for inline svg, disabled by default)';\n\n/**\n * Remove the xmlns attribute when present.\n *\n * @example\n * <svg viewBox=\"0 0 100 50\" xmlns=\"http://www.w3.org/2000/svg\">\n *   ↓\n * <svg viewBox=\"0 0 100 50\">\n *\n * @param {Object} item current iteration item\n * @return {Boolean} if true, xmlns will be filtered out\n *\n * @author Ricardo Tomasi\n */\nexports.fn = function(item) {\n\n    if (item.isElem('svg') && item.hasAttr('xmlns')) {\n        item.removeAttr('xmlns');\n    }\n\n};","'use strict';\n\nexports.type = 'perItem';\n\nexports.active = true;\n\nexports.description = 'removes hidden elements (zero sized, with absent attributes)';\n\nexports.params = {\n    isHidden: true,\n    displayNone: true,\n    opacity0: false,\n    circleR0: false,\n    ellipseRX0: false,\n    ellipseRY0: false,\n    rectWidth0: false,\n    rectHeight0: false,\n    patternWidth0: false,\n    patternHeight0: false,\n    imageWidth0: false,\n    imageHeight0: false,\n    pathEmptyD: false,\n    polylineEmptyPoints: false,\n    polygonEmptyPoints: false\n};\n\nvar regValidPath = /M\\s*(?:[-+]?(?:\\d*\\.\\d+|\\d+(?:\\.|(?!\\.)))([eE][-+]?\\d+)?(?!\\d)\\s*,?\\s*){2}\\D*\\d/i;\n\n/**\n * Remove hidden elements with disabled rendering:\n * - display=\"none\"\n * - opacity=\"0\"\n * - circle with zero radius\n * - ellipse with zero x-axis or y-axis radius\n * - rectangle with zero width or height\n * - pattern with zero width or height\n * - image with zero width or height\n * - path with empty data\n * - polyline with empty points\n * - polygon with empty points\n *\n * @param {Object} item current iteration item\n * @param {Object} params plugin params\n * @return {Boolean} if false, item will be filtered out\n *\n * @author Kir Belevich\n */\nexports.fn = function (item, params) {\n\n    if (item.elem) {\n        // Removes hidden elements\n        // https://www.w3schools.com/cssref/pr_class_visibility.asp\n        if (params.isHidden && item.hasAttr('visibility', 'hidden'))\n            item.removeAttr(['visibility', 'hidden']);\n\n        // display=\"none\"\n        //\n        // http://www.w3.org/TR/SVG/painting.html#DisplayProperty\n        // \"A value of display: none indicates that the given element\n        // and its children shall not be rendered directly\"\n        if (params.displayNone && item.hasAttr('display', 'none'))\n            item.removeAttr(['display', 'none']);\n\n\n        // opacity=\"0\"\n        //\n        // http://www.w3.org/TR/SVG/masking.html#ObjectAndGroupOpacityProperties\n        if (\n            params.opacity0 &&\n            item.hasAttr('opacity', '0')\n        ) return false;\n\n        // Circles with zero radius\n        //\n        // http://www.w3.org/TR/SVG/shapes.html#CircleElementRAttribute\n        // \"A value of zero disables rendering of the element\"\n        //\n        // <circle r=\"0\">\n        if (\n            params.circleR0 &&\n            item.isElem('circle') &&\n            item.isEmpty() &&\n            item.hasAttr('r', '0')\n        ) return false;\n\n        // Ellipse with zero x-axis radius\n        //\n        // http://www.w3.org/TR/SVG/shapes.html#EllipseElementRXAttribute\n        // \"A value of zero disables rendering of the element\"\n        //\n        // <ellipse rx=\"0\">\n        if (\n            params.ellipseRX0 &&\n            item.isElem('ellipse') &&\n            item.isEmpty() &&\n            item.hasAttr('rx', '0')\n        ) return false;\n\n        // Ellipse with zero y-axis radius\n        //\n        // http://www.w3.org/TR/SVG/shapes.html#EllipseElementRYAttribute\n        // \"A value of zero disables rendering of the element\"\n        //\n        // <ellipse ry=\"0\">\n        if (\n            params.ellipseRY0 &&\n            item.isElem('ellipse') &&\n            item.isEmpty() &&\n            item.hasAttr('ry', '0')\n        ) return false;\n\n        // Rectangle with zero width\n        //\n        // http://www.w3.org/TR/SVG/shapes.html#RectElementWidthAttribute\n        // \"A value of zero disables rendering of the element\"\n        //\n        // <rect width=\"0\">\n        if (\n            params.rectWidth0 &&\n            item.isElem('rect') &&\n            item.isEmpty() &&\n            item.hasAttr('width', '0')\n        ) return false;\n\n        // Rectangle with zero height\n        //\n        // http://www.w3.org/TR/SVG/shapes.html#RectElementHeightAttribute\n        // \"A value of zero disables rendering of the element\"\n        //\n        // <rect height=\"0\">\n        if (\n            params.rectHeight0 &&\n            params.rectWidth0 &&\n            item.isElem('rect') &&\n            item.isEmpty() &&\n            item.hasAttr('height', '0')\n        ) return false;\n\n        // Pattern with zero width\n        //\n        // http://www.w3.org/TR/SVG/pservers.html#PatternElementWidthAttribute\n        // \"A value of zero disables rendering of the element (i.e., no paint is applied)\"\n        //\n        // <pattern width=\"0\">\n        if (\n            params.patternWidth0 &&\n            item.isElem('pattern') &&\n            item.hasAttr('width', '0')\n        ) return false;\n\n        // Pattern with zero height\n        //\n        // http://www.w3.org/TR/SVG/pservers.html#PatternElementHeightAttribute\n        // \"A value of zero disables rendering of the element (i.e., no paint is applied)\"\n        //\n        // <pattern height=\"0\">\n        if (\n            params.patternHeight0 &&\n            item.isElem('pattern') &&\n            item.hasAttr('height', '0')\n        ) return false;\n\n        // Image with zero width\n        //\n        // http://www.w3.org/TR/SVG/struct.html#ImageElementWidthAttribute\n        // \"A value of zero disables rendering of the element\"\n        //\n        // <image width=\"0\">\n        if (\n            params.imageWidth0 &&\n            item.isElem('image') &&\n            item.hasAttr('width', '0')\n        ) return false;\n\n        // Image with zero height\n        //\n        // http://www.w3.org/TR/SVG/struct.html#ImageElementHeightAttribute\n        // \"A value of zero disables rendering of the element\"\n        //\n        // <image height=\"0\">\n        if (\n            params.imageHeight0 &&\n            item.isElem('image') &&\n            item.hasAttr('height', '0')\n        ) return false;\n\n        // Path with empty data\n        //\n        // http://www.w3.org/TR/SVG/paths.html#DAttribute\n        //\n        // <path d=\"\"/>\n        if (\n            params.pathEmptyD &&\n            item.isElem('path') &&\n            (!item.hasAttr('d') || !regValidPath.test(item.attr('d').value))\n        ) return false;\n\n        // Polyline with empty points\n        //\n        // http://www.w3.org/TR/SVG/shapes.html#PolylineElementPointsAttribute\n        //\n        // <polyline points=\"\">\n        if (\n            params.polylineEmptyPoints &&\n            item.isElem('polyline') &&\n            !item.hasAttr('points')\n        ) return false;\n\n        // Polygon with empty points\n        //\n        // http://www.w3.org/TR/SVG/shapes.html#PolygonElementPointsAttribute\n        //\n        // <polygon points=\"\">\n        if (\n            params.polygonEmptyPoints &&\n            item.isElem('polygon') &&\n            !item.hasAttr('points')\n        ) return false;\n\n    }\n\n};\n","'use strict';\n\nexports.type = 'perItem';\n\nexports.active = true;\n\nexports.description = 'removes editors namespaces, elements and attributes';\n\nvar editorNamespaces = require('./_collections').editorNamespaces,\n    prefixes = [];\n\nexports.params = {\n    additionalNamespaces: []\n};\n\n/**\n * Remove editors namespaces, elements and attributes.\n *\n * @example\n * <svg xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\">\n * <sodipodi:namedview/>\n * <path sodipodi:nodetypes=\"cccc\"/>\n *\n * @param {Object} item current iteration item\n * @param {Object} params plugin params\n * @return {Boolean} if false, item will be filtered out\n *\n * @author Kir Belevich\n */\nexports.fn = function(item, params) {\n\n    if (Array.isArray(params.additionalNamespaces)) {\n        editorNamespaces = editorNamespaces.concat(params.additionalNamespaces);\n    }\n\n    if (item.elem) {\n\n        if (item.isElem('svg')) {\n\n            item.eachAttr(function(attr) {\n                if (attr.prefix === 'xmlns' && editorNamespaces.indexOf(attr.value) > -1) {\n                    prefixes.push(attr.local);\n\n                    // <svg xmlns:sodipodi=\"\">\n                    item.removeAttr(attr.name);\n                }\n            });\n\n        }\n\n        // <* sodipodi:*=\"\">\n        item.eachAttr(function(attr) {\n            if (prefixes.indexOf(attr.prefix) > -1) {\n                item.removeAttr(attr.name);\n            }\n        });\n\n        // <sodipodi:*>\n        if (prefixes.indexOf(item.prefix) > -1) {\n            return false;\n        }\n\n    }\n\n};\n","'use strict';\n\nexports.type = 'perItem';\n\nexports.active = true;\n\nexports.description = 'removes doctype declaration';\n\n/**\n * Remove DOCTYPE declaration.\n *\n * \"Unfortunately the SVG DTDs are a source of so many\n * issues that the SVG WG has decided not to write one\n * for the upcoming SVG 1.2 standard. In fact SVG WG\n * members are even telling people not to use a DOCTYPE\n * declaration in SVG 1.0 and 1.1 documents\"\n * https://jwatt.org/svg/authoring/#doctype-declaration\n *\n * @example\n * <!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n * q\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n *\n * @example\n * <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n * \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\" [\n *     <!-- an internal subset can be embedded here -->\n * ]>\n *\n * @param {Object} item current iteration item\n * @return {Boolean} if false, item will be filtered out\n *\n * @author Kir Belevich\n */\nexports.fn = function(item) {\n\n    if (item.doctype) {\n        return false;\n    }\n\n};\n","'use strict';\n\nexports.type = 'perItem';\n\nexports.active = true;\n\nexports.description = 'removes <metadata>';\n\n/**\n * Remove <metadata>.\n *\n * http://www.w3.org/TR/SVG/metadata.html\n *\n * @param {Object} item current iteration item\n * @return {Boolean} if false, item will be filtered out\n *\n * @author Kir Belevich\n */\nexports.fn = function(item) {\n\n    return !item.isElem('metadata');\n\n};\n","'use strict';\n\nexports.type = 'perItem';\n\nexports.active = true;\n\nexports.description = 'removes <foreignObject>';\n\n/**\n * Remove <title>.\n *\n * https://developer.mozilla.org/en-US/docs/Web/SVG/Element/foreignObject\n *\n * @param {Object} item current iteration item\n * @return {Boolean} if false, item will be filtered out\n *\n * @author  Pratik Bhangale\n */\nexports.fn = function(item) {\n\n    return !item.isElem('foreignObject');\n\n};\n","'use strict';\n\nexports.type = 'perItem';\n\nexports.active = true;\n\nexports.description = 'removes <switch>';\n\n/**\n * Remove <switch>.\n *\n * https://developer.mozilla.org/en-US/docs/Web/SVG/Element/switch\n *\n * @param {Object} item current iteration item\n * @return {Boolean} if false, item will be filtered out\n *\n * @author  Pratik Bhangale\n */\nexports.fn = function(item) {\n\n    if(item.isElem('switch')){\n        item.renameElem('g');\n    }\n};\n"],"names":["init","call","_maxListeners","defaultMaxListeners","length","apply","TypeError","_events","newListener","emit","listener","_eventsCount","unshift","push","warned","Error","name","emitter","type","count","console","warn","log","removeListener","arguments","pop","Array","setTimeout","clearTimeout","concat","run","fun","array","join","replace","JSON","stringify","global","process","noDeprecation","throwDeprecation","traceDeprecation","trace","error","seen","stylize","depth","colors","showHidden","customInspect","styles","forEach","inspect","constructor","prototype","Object","keys","getOwnPropertyNames","indexOf","RegExp","toString","Date","toUTCString","map","hasOwnProperty","match","getOwnPropertyDescriptor","value","get","set","split","substr","reduce","isArray","charCodeAt","NaN","Infinity","isNaN","Math","LN2","Buffer","TYPED_ARRAY_SUPPORT","RangeError","Uint8Array","__proto__","ArrayBuffer","fill","isEncoding","write","slice","byteLength","copy","buffer","data","_isBuffer","isView","toLowerCase","from","lastIndexOf","readUInt16BE","read","parseInt","base64.fromByteArray","String","ieee754.write","trim","base64.toByteArray","isBuffer","readFloatLE","head","tail","encoding","surrogateSize","detectIncompleteChar","charBuffer","charReceived","charLength","prependListener","on","listeners","objectMode","readableObjectMode","highWaterMark","pipes","pipesCount","flowing","ended","endEmitted","reading","sync","needReadable","emittedReadable","readableListening","resumeScheduled","defaultEncoding","ranOut","awaitDrain","readingMore","decoder","_readableState","readable","_read","end","shift","clear","next","allocUnsafe","chunk","callback","defineProperty","getBuffer","writableObjectMode","needDrain","ending","finished","decodeStrings","writing","corked","bufferProcessing","onwrite","writecb","writelen","bufferedRequest","lastBufferedRequest","pendingcb","prefinished","errorEmitted","bufferedRequestCount","corkedRequestsFree","_writableState","writable","_write","writev","_writev","entry","finish","once","Readable","Writable","allowHalfOpen","afterTransform","needTransform","transforming","writechunk","writeencoding","_transformState","Duplex","transform","_transform","flush","_flush","Transform","EE","sort","toUpperCase","charAt","decodeCodePoint","children","ElementType","CDATA","Text","isTag","SyntaxError","action","ignoreCase","lowerCaseAttributeNames","xmlMode","test","lowerCaseTags","procedure","attribute","equals","pseudo","getParent","Set","has","getName","compileUnsafe","adapter","parse","some","every","filter","context","shouldTestNextSiblings","Rules","rootFunc","removeSubsets","getChildren","getSiblings","splice","existsOne","getAttributeValue","findOne","findAll","prev","cursor","source","line","column","Boolean","isNumber","lines","startLine","columns","startColumn","linesAnsColumnsComputed","offsetAndType","balance","tokenCount","min","max","comma","explicit","terms","combinator","disallowEmpty","multiplier","loc","offset","substring","keyword","unit","pos","str","substringToPos","eat","charCode","nextCharCode","syntax","node","badNode","lastNode","mismatch","matchSyntax","childrenMatch","toJSON","getType","getProperty","matched","isFinite","start","structure","docs","check","generate","walk","getTrace","isType","isProperty","isKeyword","valueCommonSyntax","scope","atrule","parseContext","_array","_set","Map","create","generatedLine","generatedColumn","util","compareByGeneratedPositionsInflated","_sorted","_last","_file","getArg","_sourceRoot","_skipValidation","_sources","_names","_mappings","_sourcesContents","round","random","swap","sections","_version","normalize","isAbsolute","relative","ArraySet","fromArray","sourceRoot","sourcesContent","file","originalLine","originalColumn","_sections","url","generatedOffset","consumer","sourceContents","add","nullable","walkContext","fields","reverse","Function","Atrule","StyleSheet","Rule","Block","Declaration","isObject","createParser","createWalker","createGenerator","createConvertor","List","Tokenizer","Lexer","vendorPrefix","property","isCustomProperty","grammar","lexer","createLexer","clone","fromPlainObject","toPlainObject","createSyntax","mix","fork","generic","types","properties","tokenStart","tokenEnd","Raw","scanner","lookupType","eof","tokenType","getLocation","substrToCursor","parseWithFallback","currentToken","Value","isBalanceEdge","skip","skipSC","consume","getTokenValue","isHex","consumeNonWS","SelectorList","scan","createSingleNodeList","lookupNonWSType","createList","WhiteSpace","AtrulePrelude","Identifier","Parentheses","item","Uint16Array","location","hostname","navigator","appVersion","config","assign","indent","repeat","pretty","doctypeEnd","procInstEnd","commentEnd","cdataEnd","tagShortEnd","tagOpenEnd","tagCloseEnd","textEnd","indentLevel","textContext","content","active","fn","params","prefix","parentNode","isElem","hasAttr","width","parseFloat","attr","height","plugins","input","dimensions","Number","MAX_VALUE","fromCharCode","abs","pow","floor","self","EventEmitter","usingDomains","domain","Domain","getPrototypeOf","setMaxListeners","getMaxListeners","domainEmitter","domainThrown","addListener","prependOnceListener","removeAllListeners","listenerCount","eventNames","Reflect","ownKeys","performance","now","mozNow","msNow","oNow","webkitNow","getTime","nextTick","title","browser","env","argv","version","versions","off","binding","cwd","chdir","umask","hrtime","platform","release","uptime","super_","enumerable","configurable","poolSize","_augment","alloc","allocUnsafeSlow","compare","swap16","swap32","swap64","includes","_arr","subarray","readUIntLE","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","ieee754.read","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","BufferList","ReadableState","NODE_DEBUG","inherits","isPaused","setEncoding","pipe","pause","unpipe","resume","wrap","bind","_fromList","WritableState","cork","uncork","setDefaultEncoding","PassThrough","Stream","destroy","_isStdio","q","c","bufferCheckPosition","MAX_BUFFER_LENGTH","opt","lowercase","lowercasetags","looseCase","tags","closed","closedRoot","sawRoot","tag","strict","noscript","state","BEGIN","strictEntities","ENTITIES","XML_ENTITIES","attribList","xmlns","ns","trackPosition","position","cdata","script","_parser","onend","onerror","_decoder","textNode","BEGIN_WHITESPACE","TEXT","tagName","attributes","local","attribName","attribValue","uri","isSelfClosing","SCRIPT","entity","OPEN_WAKA","startTagPosition","fromCodePoint","parser","SAXParser","SAXStream","createStream","EVENTS","TEXT_ENTITY","SCRIPT_ENDING","CLOSE_TAG","SGML_DECL","sgmlDecl","OPEN_TAG","PROC_INST","procInstName","procInstBody","COMMENT","comment","DOCTYPE","doctype","SGML_DECL_QUOTED","DOCTYPE_DTD","DOCTYPE_QUOTED","DOCTYPE_DTD_QUOTED","COMMENT_ENDING","COMMENT_ENDED","CDATA_ENDING","CDATA_ENDING_2","PROC_INST_ENDING","PROC_INST_BODY","body","OPEN_TAG_SLASH","ATTRIB","ATTRIB_NAME","ATTRIB_VALUE","ATTRIB_NAME_SAW_WHITE","ATTRIB_VALUE_QUOTED","ATTRIB_VALUE_UNQUOTED","ATTRIB_VALUE_ENTITY_Q","ATTRIB_VALUE_CLOSED","ATTRIB_VALUE_ENTITY_U","CLOSE_TAG_SAW_WHITE","close","require$$1","StringDecoder","xml","STATE","COMMENT_STARTING","Directive","Comment","Script","Style","Tag","Doctype","XML","HTML","HTMLStrict","escape","decodeEntities","encodeXML","attribs","parent","allowfullscreen","async","autofocus","autoplay","checked","controls","default","defer","disabled","hidden","ismap","loop","multiple","muted","open","readonly","required","reversed","scoped","seamless","selected","typemustmatch","style","xmp","iframe","noembed","noframes","plaintext","area","base","basefont","br","col","command","embed","frame","hr","img","isindex","keygen","link","meta","param","track","wbr","cheerio","getInnerHTML","getOuterHTML","getText","require$$0","find","findOneChild","tag_name","tag_type","tag_contains","DISCONNECTED","PRECEDING","FOLLOWING","CONTAINS","CONTAINED_BY","exports","trueFunc","falseFunc","exists","not","any","hyphen","element","hasAttrib","compile","rules","BaseFuncs","filters","contains","icontains","getNCheck","root","checkbox","password","radio","reset","image","submit","empty","visited","enabled","optional","header","button","text","pseudos","Pseudos","descendant","WeakSet","_flexibleDescendant","child","sibling","adjacent","universal","matches","compileToken","compileRaw","selectAll","selectOne","is","iterate","_compileUnsafe","_compileToken","baseCssAdapter","elem","class","renameElem","isEmpty","closestElem","spliceContent","attrs","hasAttrLocal","someAttr","computedAttr","removeAttr","addAttr","hasClass","hasStyle","eachAttr","querySelectorAll","querySelector","toStr","callee","propertyIsEnumerable","$applicationCache","$console","$external","$frame","$frameElement","$frames","$innerHeight","$innerWidth","$outerHeight","$outerWidth","$pageXOffset","$pageYOffset","$parent","$scrollLeft","$scrollTop","$scrollX","$scrollY","$self","$webkitIndexedDB","$webkitStorageInfo","$window","window","isArguments","isArgs","shim","Symbol","isFunction","x","getOwnPropertySymbols","supportsDescriptors","toStringTag","getDay","hasToStringTag","iterator","hasSymbolSham","valueOf","hasSymbols","isPrimitive","toPrimitive","isSymbol","isDate","entries","values","asyncIterator","Atomics","DataView","decodeURI","decodeURIComponent","encodeURI","encodeURIComponent","eval","EvalError","Float32Array","Float64Array","Int8Array","Int16Array","Int32Array","Promise","then","all","reject","resolve","Proxy","ReferenceError","SharedArrayBuffer","Uint8ClampedArray","Uint32Array","URIError","WeakMap","undefined","$Object","$TypeError","$String","ToPrimitive","ToBoolean","ToNumber","ToInteger","$isNaN","$isFinite","ToInt32","ToUint32","ToUint16","ToString","ToObject","CheckObjectCoercible","IsCallable","SameValue","Type","IsPropertyDescriptor","IsAccessorDescriptor","IsDataDescriptor","IsGenericDescriptor","FromPropertyDescriptor","ToPropertyDescriptor","regexExec","exec","lastIndex","MAX_SAFE_INTEGER","isExtensible","Call","ToInt16","ToInt8","ToUint8","ToUint8Clamp","RequireObjectCoercible","ToPropertyKey","ToLength","CanonicalNumericIndexString","ES5","IsArray","IsConstructor","IsExtensible","preventExtensions","IsInteger","IsPropertyKey","IsRegExp","hasRegExpMatcher","SameValueZero","GetV","GetMethod","Get","SpeciesConstructor","species","CompletePropertyDescriptor","HasOwnProperty","HasProperty","IsConcatSpreadable","isConcatSpreadable","Invoke","GetIterator","IteratorNext","IteratorComplete","IteratorValue","IteratorStep","IteratorClose","CreateIterResultObject","done","RegExpExec","ArraySpeciesCreate","CreateDataProperty","CreateDataPropertyOrThrow","ObjectCreate","AdvanceStringIndex","SameValueNonNumber","isEnumerable","ES","getPolyfill","define","implementation","classNames","classAttr","addClassHandler","getClassAttr","setClassAttr","addClassValueHandler","getClassValue","setClassValue","_addSingle","remove","_removeSingle","delete","toggle","createItem","updateCursors","getSize","toArray","first","last","each","eachRight","forEachRight","nextUntil","prevUntil","appendData","insert","prepend","prependData","append","insertData","prependList","insertList","appendList","message","stack","sourceFragment","parseError","WHITESPACE","IDENTIFIER","NUMBER","STRING","PUNCTUATOR","N","F","R","TYPE","Punctuator","CDO","CDC","Url","ExclamationMark","QuotationMark","NumberSign","DollarSign","PercentSign","Ampersand","Apostrophe","LeftParenthesis","RightParenthesis","Asterisk","PlusSign","Comma","HyphenMinus","FullStop","Solidus","Colon","Semicolon","LessThanSign","EqualsSign","GreaterThanSign","QuestionMark","CommercialAt","LeftSquareBracket","Backslash","RightSquareBracket","CircumflexAccent","LowLine","GraveAccent","LeftCurlyBracket","VerticalLine","RightCurlyBracket","Tilde","NAME","SafeUint32Array","SYMBOL_TYPE","PUNCTUATION","STOP_URL_RAW","constants","FULLSTOP","PLUSSIGN","HYPHENMINUS","TAB","SPACE","firstCharOffset","isWhiteSpace","isNewline","getNewlineLength","cmpChar","cmpStr","findWhiteSpaceStart","findWhiteSpaceEnd","findCommentEnd","findStringEnd","findDecimalNumberEnd","findNumberEnd","findEscapeEnd","findIdentifierEnd","findUrlRawEnd","setSource","startOffset","lookupValue","getTokenStart","getOffsetExcludeWS","getRawLength","skipWS","eatNonWS","consumeFunctionName","expectIdentifier","getLocationRange","dump","idx","CssSyntaxError","SyntaxReferenceError","reference","MatchError","decorator","rawMessage","generateGrammar","css","mismatchOffset","freeze","basename","vendor","custom","hack","SyntaxParseError","EXCLAMATIONMARK","APOSTROPHE","LEFTPARENTHESIS","RIGHTPARENTHESIS","LESSTHANSIGN","GREATERTHANSIGN","LEFTSQUAREBRACKET","RIGHTSQUAREBRACKET","LEFTCURLYBRACKET","RIGHTCURLYBRACKET","noop","enter","leave","MULTIPLIER_DEFAULT","matchFragments","nodes","getStructureFromConfig","addType_","addProperty_","checkStructure","createDescriptor","expression","matchDeclaration","matchProperty","matchType","findValueFragments","findDeclarationValueFragments","findAllFragments","visit","validate","recognizer","space","ignoreWS","ignoreWSAfter","getNode","filename","needPositions","onParseError","onParseErrorThrow","parseAtrulePrelude","parseRulePrelude","parseValue","parseCustomProperty","readSequence","getFirstListNode","list","getLastListNode","getLocationFromList","positions","encode","decode","rest","scheme","auth","host","port","path","size","toSetString","at","MappingList","unsortedForEach","SourceMapGenerator","fromSourceMap","eachMapping","generated","original","addMapping","sources","sourceContentFor","setSourceContent","_validateMapping","applySourceMap","originalPositionFor","_serializeMappings","base64VLQ","_generateSourcesContent","names","mappings","LEAST_UPPER_BOUND","GREATEST_LOWER_BOUND","quickSort","SourceMapConsumer","__generatedMappings","_parseMappings","__originalMappings","_charIsMappingSeparator","GENERATED_ORDER","ORIGINAL_ORDER","_generatedMappings","_originalMappings","allGeneratedPositionsFor","_findMapping","compareByOriginalPositions","lastColumn","compareByGeneratedPositionsDeflated","search","computeColumnSpans","lastGeneratedColumn","hasContentsOfAllSources","urlParse","generatedPositionFor","bias","SourceNode","fromStringWithSourceMap","replaceRight","walkSourceContents","fromSetString","toStringWithSourceMap","code","require$$2","Selector","result","sourceMap","stylesheet","atrulePrelude","rule","selector","block","declaration","function","ensureFunction","patch","syntaxes","a","b","ATRULE","prelude","SEMICOLON","ASTERISK","VERTICALLINE","matcher","flags","SOLIDUS","TILDE","COLON","DOLLARSIGN","NUMBERSIGN","important","readProperty","Dimension","Ratio","COMMA","PERCENTSIGN","FUNCTION","left","right","QUESTIONMARK","URL","RAW","AnPlusB","AttributeSelector","Brackets","ClassSelector","Combinator","DeclarationList","HexColor","IdSelector","MediaFeature","MediaQuery","MediaQueryList","Nth","nth","Operator","Percentage","PseudoClassSelector","PseudoElementSelector","consumeRaw","TypeSelector","UnicodeRange","mediaQueryList","mediaQuery","selectorList","declarationList","localeCompare","inplace","csstree","priority","hasSynced","styleAttr","styleValue","addStyleHandler","getStyleAttr","setStyleAttr","addStyleValueHandler","getStyleValue","setStyleValue","getCssText","_loadCssText","csstools","csstreeToStyleDeclaration","setProperty","getProperties","_handleParseError","_getProperty","getPropertyPriority","getPropertyValue","removeProperty","sax","SAX","ondoctype","onprocessinginstruction","processinginstruction","oncomment","oncdata","onopentag","ontext","onclosetag","EOL","tmpdir","tmpDir","networkInterfaces","getNetworkInterfaces","cpus","totalmem","freemem","loadavg","endianness","animation","descriptive","shape","structural","paintServer","nonRendering","container","textContent","textContentChild","lightSource","filterPrimitive","animationAddition","animationAttributeTarget","animationEvent","animationTiming","animationValue","conditionalProcessing","core","graphicalEvent","presentation","xlink","documentEvent","transferFunction","y","clip","mask","opacity","stroke","display","visibility","kerning","direction","slope","intercept","amplitude","exponent","attrsGroups","defaults","target","contentGroups","altGlyph","altGlyphDef","altGlyphItem","animate","animateColor","animateMotion","animateTransform","circle","cx","cy","clipPath","clipPathUnits","defs","desc","ellipse","feBlend","mode","feColorMatrix","feComponentTransfer","feComposite","operator","k1","k2","k3","k4","feConvolveMatrix","order","edgeMode","preserveAlpha","feDiffuseLighting","surfaceScale","diffuseConstant","feDisplacementMap","scale","xChannelSelector","yChannelSelector","feDistantLight","azimuth","elevation","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","stdDeviation","feImage","preserveAspectRatio","feMerge","feMergeNode","feMorphology","radius","feOffset","dx","dy","fePointLight","z","feSpecularLighting","specularConstant","specularExponent","feSpotLight","pointsAtX","pointsAtY","pointsAtZ","feTile","feTurbulence","baseFrequency","numOctaves","seed","stitchTiles","primitiveUnits","font","foreignObject","g","glyph","glyphRef","hatch","hatchUnits","hatchContentUnits","pitch","rotate","hatchPath","hkern","x1","y1","x2","y2","linearGradient","spreadMethod","marker","markerUnits","refX","refY","markerWidth","markerHeight","maskUnits","maskContentUnits","metadata","mpath","pattern","patternUnits","patternContentUnits","polygon","polyline","radialGradient","gradientUnits","r","meshGradient","meshRow","meshPatch","rect","solidColor","stop","svg","zoomAndPan","baseProfile","contentScriptType","contentStyleType","switch","symbol","lengthAdjust","textPath","method","spacing","tref","tspan","use","view","vkern","elemsGroups","doctypeStart","procInstStart","tagOpenStart","tagCloseStart","tagShortStart","attrStart","attrEnd","commentStart","cdataStart","textStart","regEntities","regValEntities","encodeEntity","entities","useShortTags","convert","createElem","createText","createDoctype","createProcInst","createComment","createCDATA","info","createIndent","createAttrs","referencesProps","editorNamespaces","removeDoctype","removeComments","removeMetadata","removeEditorsNSData","additionalNamespaces","cleanupIDs","minify","preserve","force","removeHiddenElems","isHidden","displayNone","opacity0","circleR0","ellipseRX0","ellipseRY0","rectWidth0","rectHeight0","patternWidth0","patternHeight0","imageWidth0","imageHeight0","pathEmptyD","polylineEmptyPoints","polygonEmptyPoints","removeForeignObject","removeSwitch","load","settings","nextPass","onmessage","postMessage","id"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}